-- LEXER

T__53 : ( '=' );
T__54 : ( 'USE_EQUAL_ALLOCATION' );
T__55 : ( 'USE_EQUAL_INCREMENT' );
T__56 : ( 'USE_WEIGHTED_ALLOCATION' );
T__57 : ( 'USE_WEIGHTED_INCREMENT' );
T__58 : ( ',' );
T__59 : ( '*' );
T__60 : ( '.' );
T__61 : ( '(' );
T__62 : ( ')' );
T__63 : ( '<>' );
T__64 : ( '<' );
T__65 : ( '>' );
T__66 : ( '<=' );
T__67 : ( '>=' );
T__68 : ( '+' );
T__69 : ( '-' );
T__70 : ( '/' );
T__71 : ( '^' );
T__72 : ( ':' );
T__73 : ( '&' );
T__74 : ( '{' );
T__75 : ( '}' );
T__76 : ( '!' );
AND : ( ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'D' | 'd' ) );
AS : ( ( 'A' | 'a' ) ( 'S' | 's' ) );
BY : ( ( 'B' | 'b' ) ( 'Y' | 'y' ) );
CASE : ( ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' ) );
CALCULATED : ( ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'C' | 'c' ) ( 'U' | 'u' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'D' | 'd' ) );
CALCULATION : ( ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'C' | 'c' ) ( 'U' | 'u' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
CELL : ( ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'L' | 'l' ) );
CELL_ORDINAL : ( ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'L' | 'l' ) ( '_' ) ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'L' | 'l' ) );
CREATE : ( ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'E' | 'e' ) );
CUBE : ( ( 'C' | 'c' ) ( 'U' | 'u' ) ( 'B' | 'b' ) ( 'E' | 'e' ) );
DIMENSION : ( ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
ELSE : ( ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) );
EMPTY : ( ( 'E' | 'e' ) ( 'M' | 'm' ) ( 'P' | 'p' ) ( 'T' | 't' ) ( 'Y' | 'y' ) );
END : ( ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'D' | 'd' ) );
FORMATTED_VALUE : ( ( 'F' | 'f' ) ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( '_' ) ( 'V' | 'v' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'U' | 'u' ) ( 'E' | 'e' ) );
FOR : ( ( 'F' | 'f' ) ( 'O' | 'o' ) ( 'R' | 'r' ) );
FROM : ( ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) );
SELECT : ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) );
IS : ( ( 'I' | 'i' ) ( 'S' | 's' ) );
GLOBAL : ( ( 'G' | 'g' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'L' | 'l' ) );
MEMBER : ( ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'M' | 'm' ) ( 'B' | 'b' ) ( 'E' | 'e' ) ( 'R' | 'r' ) );
NON : ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
NOT : ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) );
ON : ( ( 'O' | 'o' ) ( 'N' | 'n' ) );
OR : ( ( 'O' | 'o' ) ( 'R' | 'r' ) );
PROPERTIES : ( ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'P' | 'p' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'E' | 'e' ) ( 'S' | 's' ) );
SESSION : ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
SET : ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'T' | 't' ) );
THEN : ( ( 'T' | 't' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'N' | 'n' ) );
UPDATE : ( ( 'U' | 'u' ) ( 'P' | 'p' ) ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'E' | 'e' ) );
VALUE : ( ( 'V' | 'v' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'U' | 'u' ) ( 'E' | 'e' ) );
USE_EQUAL_ALLOCATION : ( ( 'U' | 'u' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( '_' ) ( 'E' | 'e' ) ( 'Q' | 'q' ) ( 'U' | 'u' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( '_' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
USE_EQUAL_INCREMENT : ( ( 'U' | 'u' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( '_' ) ( 'E' | 'e' ) ( 'Q' | 'q' ) ( 'U' | 'u' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( '_' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'T' | 't' ) );
USE_WEIGHTED_ALLOCATION : ( ( 'U' | 'u' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( '_' ) ( 'W' | 'w' ) ( 'E' | 'e' ) ( 'I' | 'i' ) ( 'G' | 'g' ) ( 'H' | 'h' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( '_' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'C' | 'c' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) );
USE_WEIGHTED_INCREMENT : ( ( 'U' | 'u' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( '_' ) ( 'W' | 'w' ) ( 'E' | 'e' ) ( 'I' | 'i' ) ( 'G' | 'g' ) ( 'H' | 'h' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( '_' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'T' | 't' ) );
VISUAL : ( ( 'V' | 'v' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'U' | 'u' ) ( 'A' | 'a' ) ( 'L' | 'l' ) );
WITH : ( ( 'W' | 'w' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'H' | 'h' ) );
WHEN : ( ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'N' | 'n' ) );
WHERE : ( ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) );
XOR : ( ( 'X' | 'x' ) ( 'O' | 'o' ) ( 'R' | 'r' ) );
FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* );
INTEGER : ( ( '0' .. '9' )+ );
ID : ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' | '\\u0410' .. '\\u0451' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' | '\\u0410' .. '\\u0451' )* );
QUOTED_ID : ( ( '[' (~ ']' )* ']' ) );
STRING : ( '\"' (~ '\"' )* '\"' | '\\'' (~ '\\'' )* '\\'' );
RANET_EXPRESSION : ( '<%' ( options {greedy=false; } : . )+ '%>' );
WS : ( ( ' ' | '\\t' | '\\r' | '\\f' | '\\n' | '\\u00A0' )+ );
LINE_COMMENT : ( '//' (~ ( '\\n' | '\\r' ) )* | '--' (~ ( '\\n' | '\\r' ) )* );
COMMENT : ( '/*' ( options {greedy=false; } : . )* '*/' );
????? : ( T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | AND | AS | BY | CASE | CALCULATED | CALCULATION | CELL | CELL_ORDINAL | CREATE | CUBE | DIMENSION | ELSE | EMPTY | END | FORMATTED_VALUE | FOR | FROM | SELECT | IS | GLOBAL | MEMBER | NON | NOT | ON | OR | PROPERTIES | SESSION | SET | THEN | UPDATE | VALUE | USE_EQUAL_ALLOCATION | USE_EQUAL_INCREMENT | USE_WEIGHTED_ALLOCATION | USE_WEIGHTED_INCREMENT | VISUAL | WITH | WHEN | WHERE | XOR | FLOAT | INTEGER | ID | QUOTED_ID | STRING | RANET_EXPRESSION | WS | LINE_COMMENT | COMMENT );



-- PARSER

mdx_statement : mdx_statement_single EOF ;
mdx_statement_single : ( select_statement | update_statement );
update_statement : UPDATE ( CUBE )? cube_specification SET expression_property '=' expression_or_xor ( 'USE_EQUAL_ALLOCATION' | 'USE_EQUAL_INCREMENT' | 'USE_WEIGHTED_ALLOCATION' ( BY weight_value_expression )? 'USE_WEIGHTED_INCREMENT' ( BY weight_value_expression )? )? ;
weight_value_expression : expression_property ;
condition : expression_property ;
select_statement : ( WITH ( with_clause_single )+ )? select_statement_subcube ( ( CELL )? PROPERTIES cell_property ( ',' cell_property )* )? ;
select_statement_subcube : SELECT ( '*' | axis_specification ( ',' axis_specification )* )? FROM cube_specification ( WHERE condition )? ;
with_clause_single : ( ( ( CALCULATED )? MEMBER member_name AS | CELL CALCULATION FOR expression AS ) expression ( ',' property_definition )* | SET set_name AS expression );
member_name : compound_id ;
property_definition : identifier '=' expression_or_xor ;
set_name : compound_id ;
compound_id : identifier ( '.' identifier )* ;
axis_specification : ( NON EMPTY )? expression ( ( DIMENSION )? PROPERTIES property ( ',' property )* )? ON axis_name ;
axis_name : ( identifier | INTEGER );
property : compound_id ;
cube_specification : ( cube_name | ( NON VISUAL )? '(' select_statement_subcube ')' );
cube_name : ( compound_id | RANET_EXPRESSION );
cell_property : ( CELL_ORDINAL | VALUE | FORMATTED_VALUE | provider_specific_cell_property );
provider_specific_cell_property : identifier ;
expression : expression_or_xor ;
expression_or_xor : expression_and ( ( XOR | OR ) expression_and )* ;
expression_and : expression_compare ( AND expression_compare )* ;
expression_compare : expression_add ( ( '=' | '<>' | '<' | '>' | '<=' | '>=' ) expression_add )* ;
expression_add : expression_mult ( ( '+' | '-' ) expression_mult )* ;
expression_mult : expression_power ( ( '/' | '*' ) expression_power )* ;
expression_power : expression_unary ( '^' expression_unary )* ;
expression_unary : ( '-' expression_range_is | '+' expression_range_is | NOT expression_range_is | expression_range_is );
expression_range_is : expression_property ( ':' expression_property | IS expression_property )? ;
expression_property : expression_simple ( '.' ( unquoted_identifier | '&' quoted_identifier ( '&' quoted_identifier )* | quoted_identifier | expression_function ) )* ;
expression_simple : ( expression_function | '(' expressions_list ')' | '{' ( expressions_list )? '}' | expression_case | STRING | INTEGER | FLOAT | identifier | RANET_EXPRESSION );
expressions_list : expression ( ',' expression )* ;
expression_function : identifier ( '!' identifier )* '(' ( expressions_list )? ')' ;
expression_case : CASE ( expression )? ( when_clause ( when_clause )* )? ( ELSE expression )? END ;
when_clause : WHEN expression THEN expression ;
identifier : ( unquoted_identifier | quoted_identifier );
unquoted_identifier : ( ID | keyword );
quoted_identifier : QUOTED_ID ;
keyword : ( DIMENSION | PROPERTIES );  