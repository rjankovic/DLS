<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.ServiceBus</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Azure.ServiceBus.Amqp.AmqpSubscriptionClient.PrefetchCount">
            <summary>
            Gets or sets the number of messages that the subscription client can simultaneously request.
            </summary>
            <value>The number of messages that the subscription client can simultaneously request.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ClientEntity">
            <summary>
            Contract for all client entities with Open-Close/Abort state m/c
            main-purpose: closeAll related entities
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.#ctor(System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary></summary>
            <param name="clientId"></param>
            <param name="retryPolicy"></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.IsClosedOrClosing">
            <summary>
            Returns true if the client is closed or closing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.ClientId">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID (in that process).</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.RetryPolicy">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> defined on the client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.CloseAsync">
            <summary>
            Closes the Client. Closes the connections opened by it.
            </summary>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ClientEntity.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.OnClosingAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.GetNextId">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.GenerateClientId(System.String,System.String)">
            <summary>
            Generates a new client id that can be used to identify a specific client in logs and error messages.
            </summary>
            <param name="clientTypeName">The type of the client.</param>
            <param name="postfix">Information that can be appended by the client.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ClientEntity.UpdateClientId(System.String)">
            <summary>
            Updates the client id.
            </summary>
            <param name="newClientId"></param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver">
            <summary>
            The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them.
            </summary>
            <example>
            Create a new MessageReceiver to receive a message from a Subscription
            <code>
            IMessageReceiver messageReceiver = new MessageReceiver(
                namespaceConnectionString,
                EntityNameHelper.FormatSubscriptionPath(topicName, subscriptionName),
                ReceiveMode.PeekLock);
            </code>
            
            Receive a message from the Subscription.
            <code>
            var message = await messageReceiver.ReceiveAsync();
            await messageReceiver.CompleteAsync(message.SystemProperties.LockToken);
            </code>
            </example>
            <remarks>
            The MessageReceiver provides advanced functionality that is not found in the 
            <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> or <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />. For instance, 
            <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync"/>, which allows you to receive messages on demand, but also requires
            you to manually renew locks using <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)"/>.
            </remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.LastPeekedSequenceNumber">
            <summary>Gets the sequence number of the last peeked message.</summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.Path"/> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> mode.
            </summary>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>Operation will time out after duration of <see cref="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout"/></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.TimeSpan)">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.Path"/> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> mode.
            </summary>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>The message received. Returns null if no message is found.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.Int32)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount"/> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.Path"/> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks> Receving less than <paramref name="maxMessageCount"/> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount"/> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.Path"/> using <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks> Receving less than <paramref name="maxMessageCount"/> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Int64)">
            <summary>
            Receives a specific deferred message identified by <paramref name="sequenceNumber"/>.
            </summary>
            <param name="sequenceNumber">The sequence number of the message that will be received.</param>
            <returns>Message identified by sequence number <paramref name="sequenceNumber"/>. Returns null if no such message is found. 
            Throws if the message has not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1"/> of deferred messages identified by <paramref name="sequenceNumbers"/>.
            </summary>
            <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the sequence numbers to receive.</param>
            <returns>Messages identified by sequence number are returned. Returns null if no messages are found.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.CompleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Completes a series of <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a list of lock tokens. This will delete the message from the service.
            </summary>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <param name="lockTokens">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the lock tokens of the corresponding messages to complete.</param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.DeferAsync(System.String)">
            <summary>Indicates that the receiver wants to defer the processing for the message.</summary>
            <param name="lockToken">The lock token of the <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive this message again in the future, you will need to save the <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/>
            and receive it using <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveDeferredMessageAsync(System.Int64)"/>.
            Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
            </summary>
            <param name="message"> <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/> mode, the message is locked on the server for this 
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is renewed by 
            the entity's LockDuration. 
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync">
            <summary>
            Fetches the next active message without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync"/> fetches the first active message for this receiver. Each subsequent call 
            fetches the subsequent message in the entity.
            Unliked a received messaged, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Defered/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync"/>, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync(System.Int32)">
            <summary>
            Fetches the next batch of active messages without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekAsync"/> fetches the first active message for this receiver. Each subsequent call 
            fetches the subsequent message in the entity.
            Unliked a received messaged, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Defered/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.ReceiveAsync"/>, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>List of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekBySequenceNumberAsync(System.Int64)">
            <summary>
            Asynchronously reads the next message without changing the state of the receiver or the message source.
            </summary>
            <param name="fromSequenceNumber">The sequence number from where to read the message.</param>
            <returns>The asynchronous operation that returns the <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IMessageReceiver.PeekBySequenceNumberAsync(System.Int64,System.Int32)">
            <summary>Peeks a batch of messages.</summary>
            <param name="fromSequenceNumber">The starting point from which to browse a batch of messages.</param>
            <param name="messageCount">The number of messages.</param>
            <returns>A batch of messages peeked.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IMessageSender">
            <summary>
            The MessageSender can be used to send messages to Queues or Topics.
            </summary>
            <example>
            Create a new MessageSender to send to a Queue
            <code>
            IMessageSender messageSender = new MessageSender(
                namespaceConnectionString,
                queueName)
            </code>
            
            Send message
            <code>
            byte[] data = GetData();
            await messageSender.SendAsync(data);
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.TopicClient"/>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.IReceiverClient">
            <summary>
            An interface used to describe common functionality for receiving messages from <see cref="T:Microsoft.Azure.ServiceBus.IQueueClient"/> and <see cref="T:Microsoft.Azure.ServiceBus.ISubscriptionClient"/>.
            </summary>
            <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/> for advanced set of functionality.</remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.IQueueClient"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.ISubscriptionClient"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks> 
            <para>
            When Prefetch is enabled, the receiver will quietly acquire more messages, up to the PrefetchCount limit, than what the application 
            immediately asks for. A single initial Receive/ReceiveAsync call will therefore acquire a message for immediate consumption 
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background. 
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is 
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the 
            buffer and then wait or block as expected. 
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.Path">
            <summary>
            Gets the path of the <see cref="T:Microsoft.Azure.ServiceBus.Core.IReceiverClient"/>. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> of the current receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions"/> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speeden up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using its lock token. This will delete the message from the queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.AbandonAsync(System.String)">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            Abandoning a message will increase the delivery count on the message.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.DeadLetterAsync(System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.IReceiverClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/>, with the corresponding path. 
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)"/> to help with this.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.ISenderClient">
            <summary>
            Interface that defines common send functionality between different clients.
            </summary>
            <seealso cref="T:Microsoft.Azure.ServiceBus.Core.IMessageSender"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.IQueueClient"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.ITopicClient"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
            <param name="messageList">The list of messages</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="scheduleEnqueueTimeUtc">The UTC time that the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ISenderClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/> of the message to be cancelled.</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver">
            <summary>
            The MessageReceiver can be used to receive messages from Queues and Subscriptions and acknowledge them.
            </summary>
            <example>
            Create a new MessageReceiver to receive a message from a Subscription
            <code>
            IMessageReceiver messageReceiver = new MessageReceiver(
                namespaceConnectionString,
                EntityNameHelper.FormatSubscriptionPath(topicName, subscriptionName),
                ReceiveMode.PeekLock);
            </code>
            
            Receive a message from the Subscription.
            <code>
            var message = await messageReceiver.ReceiveAsync();
            await messageReceiver.CompleteAsync(message.SystemProperties.LockToken);
            </code>
            </example>
            <remarks>
            The MessageReceiver provides advanced functionality that is not found in the 
            <see cref="T:Microsoft.Azure.ServiceBus.QueueClient" /> or <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient" />. For instance, 
            <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync"/>, which allows you to receive messages on demand, but also requires
            you to manually renew locks using <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)"/>.
            It uses AMQP protocol to communicate with service.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new MessageReceiver from a <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/>.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having entity level connection details.</param>
            <param name="receiveMode">The <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/>.</param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount"/> that specifies the upper limit of messages this receiver 
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new MessageReceiver from a specified connection string and entity path.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain Entity details.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the path. 
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)"/>, to help create this path.</param>
            <param name="receiveMode">The <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount"/> that specifies the upper limit of messages this receiver 
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> of the current receiver.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks> 
            <para>
            When Prefetch is enabled, the receiver will quietly acquire more messages, up to the PrefetchCount limit, than what the application 
            immediately asks for. A single initial Receive/ReceiveAsync call will therefore acquire a message for immediate consumption 
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background. 
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is 
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the 
            buffer and then wait or block as expected. 
            </para>
            <para>Prefetch also works equivalently with the <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})"/> APIs.</para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.LastPeekedSequenceNumber">
            <summary>Gets the sequence number of the last peeked message.</summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path">
            <summary>The path of the entity for this receiver. For Queues this will be the name, but for Subscriptions this will be the path.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.LockedUntilUtcInternal">
            <summary>
            Gets the DateTime that the current receiver is locked until. This is only applicable when Sessions are used.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.SessionIdInternal">
            <summary>
            Gets the SessionId of the current receiver. This is only applicable when Sessions are used.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path"/> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> mode.
            </summary>
            <returns>The message received. Returns null if no message is found.</returns>
            <remarks>Operation will time out after duration of <see cref="P:Microsoft.Azure.ServiceBus.ClientEntity.OperationTimeout"/></remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.TimeSpan)">
            <summary>
            Receive a message from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path"/> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> mode.
            </summary>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>The message received. Returns null if no message is found.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.Int32)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount"/> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path"/> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks> Receving less than <paramref name="maxMessageCount"/> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync(System.Int32,System.TimeSpan)">
            <summary>
            Receives a maximum of <paramref name="maxMessageCount"/> messages from the entity defined by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.Path"/> using <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> mode.
            </summary>
            <param name="maxMessageCount">The maximum number of messages that will be received.</param>
            <param name="operationTimeout">The time span the client waits for receiving a message before it times out.</param>
            <returns>List of messages received. Returns null if no message is found.</returns>
            <remarks> Receving less than <paramref name="maxMessageCount"/> messages is not an indication of empty entity.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Int64)">
            <summary>
            Receives a specific deferred message identified by <paramref name="sequenceNumber"/>.
            </summary>
            <param name="sequenceNumber">The sequence number of the message that will be received.</param>
            <returns>Message identified by sequence number <paramref name="sequenceNumber"/>. Returns null if no such message is found. 
            Throws if the message has not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Receives a <see cref="T:System.Collections.Generic.IList`1"/> of deferred messages identified by <paramref name="sequenceNumbers"/>.
            </summary>
            <param name="sequenceNumbers">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the sequence numbers to receive.</param>
            <returns>Messages identified by sequence number are returned. Returns null if no messages are found.
            Throws if the messages have not been deferred.</returns>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String)"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using its lock token. This will delete the message from the service.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.CompleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Completes a series of <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a list of lock tokens. This will delete the message from the service.
            </summary>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <param name="lockTokens">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the lock tokens of the corresponding messages to complete.</param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.AbandonAsync(System.String)">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            Abandoning a message will increase the delivery count on the message.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeferAsync(System.String)">
            <summary>Indicates that the receiver wants to defer the processing for the message.</summary>
            <param name="lockToken">The lock token of the <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive this message again in the future, you will need to save the <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/>
            and receive it using <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveDeferredMessageAsync(System.Int64)"/>.
            Deferring messages does not impact message's expiration, meaning that deferred messages can still expire.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.DeadLetterAsync(System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive a message from the deadletter queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/>, with the corresponding path. 
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)"/> to help with this.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RenewLockAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the queue.
            </summary>
            <param name="message"> <see cref="T:Microsoft.Azure.ServiceBus.Message" />.</param>
            <remarks>
            When a message is received in <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/> mode, the message is locked on the server for this 
            receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration).
            If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is renewed by 
            the entity's LockDuration. 
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync">
            <summary>
            Fetches the next active message without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync"/> fetches the first active message for this receiver. Each subsequent call 
            fetches the subsequent message in the entity.
            Unliked a received messaged, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Defered/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync"/>, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync(System.Int32)">
            <summary>
            Fetches the next batch of active messages without changing the state of the receiver or the message source.
            </summary>
            <remarks>
            The first call to <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekAsync"/> fetches the first active message for this receiver. Each subsequent call 
            fetches the subsequent message in the entity.
            Unliked a received messaged, peeked message will not have lock token associated with it, and hence it cannot be Completed/Abandoned/Defered/Deadlettered/Renewed.
            Also, unlike <see cref="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.ReceiveAsync"/>, this method will fetch even Deferred messages (but not Deadlettered message)
            </remarks>
            <returns>List of <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read. Returns null when nothing to peek.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekBySequenceNumberAsync(System.Int64)">
            <summary>
            Asynchronously reads the next message without changing the state of the receiver or the message source.
            </summary>
            <param name="fromSequenceNumber">The sequence number from where to read the message.</param>
            <returns>The asynchronous operation that returns the <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that represents the next message to be read.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.PeekBySequenceNumberAsync(System.Int64,System.Int32)">
            <summary>Peeks a batch of messages.</summary>
            <param name="fromSequenceNumber">The starting point from which to browse a batch of messages.</param>
            <param name="messageCount">The number of messages.</param>
            <returns>A batch of messages peeked.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is used to notify exceptions.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions"/> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speeden up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnClosingAsync">
            <summary></summary>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnReceiveAsync(System.Int32,System.TimeSpan)">
            <summary></summary>
            <param name="maxMessageCount"></param>
            <param name="serverWaitTime"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnPeekAsync(System.Int64,System.Int32)">
            <summary></summary>
            <param name="fromSequenceNumber"></param>
            <param name="messageCount"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnReceiveDeferredMessageAsync(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary></summary>
            <param name="sequenceNumbers"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnCompleteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary></summary>
            <param name="lockTokens"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnAbandonAsync(System.String)">
            <summary></summary>
            <param name="lockToken"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnDeferAsync(System.String)">
            <summary></summary>
            <param name="lockToken"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnDeadLetterAsync(System.String)">
            <summary></summary>
            <param name="lockToken"></param>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnRenewLockAsync(System.String)">
            <summary></summary>
            <param name="lockToken"></param>
            <returns>The asynchronour operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.OnMessageHandler(Microsoft.Azure.ServiceBus.MessageHandlerOptions,System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this receiver.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageReceiver.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> of the plugin to be unregistered.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.MessageSender">
            <summary>
            The MessageSender can be used to send messages to Queues or Topics.
            </summary>
            <example>
            Create a new MessageSender to send to a Queue
            <code>
            IMessageSender messageSender = new MessageSender(
                namespaceConnectionString,
                queueName)
            </code>
            
            Send message
            <code>
            byte[] data = GetData();
            await messageSender.SendAsync(data);
            </code>
            </example>
            <remarks>This uses AMQP protocol to communicate with service.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new AMQP MessageSender.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having entity level connection details.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Creates a new AMQP MessageSender.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain Entity details.</param>
            <param name="entityPath">The path of the entity this sender should connect to.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with Service Bus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the entity, which is opened during the first operation.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this sender.
            </summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path">
            <summary>
            Gets the entity path of the MessageSender.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.MessageSender.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.OnClosingAsync">
            <summary>Closes the connection.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to the entity as described by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path"/>.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> to send</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to the entity as described by <see cref="P:Microsoft.Azure.ServiceBus.Core.MessageSender.Path"/>.
            </summary>
            <param name="messageList">The <see cref="T:System.Collections.Generic.IList`1"/> to send</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> that needs to be scheduled.</param>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/> of the message to be cancelled.</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this sender.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.MessageSender.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin">
            <summary>
            This class provides methods that can be overridden to manipulate messages for custom plugin functionality.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name">
            <summary>
            Gets the name of the <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <remarks>This name is used to idenify the plugin, and prevent a plugin from being registered multiple times.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.ShouldContinueOnException">
            <summary>
            Determines whether or an exception in the plugin should prevent a send or receive operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.BeforeMessageSend(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            This operation is called before a message is sent.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> to be modified by the plugin</param>
            <returns>The modified <see cref="T:Microsoft.Azure.ServiceBus.Message"/></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.AfterMessageReceive(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            This operation is called after a message is received, but before it is returned to the <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/>.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> to be modified by the plugin</param>
            <returns>The modified <see cref="T:Microsoft.Azure.ServiceBus.Message"/></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.EntityNameHelper">
            <summary>
            This class can be used to format the path for different Service Bus entity types.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)">
            <summary>
            Formats the dead letter path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <returns>The path as a string of the dead letter entity.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubQueuePath(System.String,System.String)">
            <summary>
            Formats the subqueue path for either a queue, or a subscription.
            </summary>
            <param name="entityPath">The name of the queue, or path of the subscription.</param>
            <param name="subQueueName">The name of the subqueue.</param>
            <returns>The path as a string of the subqueue entity.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)">
            <summary>
            Formats the subscription path, based on the topic path and subscription name.
            </summary>
            <param name="topicPath">The name of the topic, including slashes.</param>
            <param name="subscriptionName">The name of the subscription.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatTransferDeadLetterPath(System.String)">
            <summary>
            Utility method that creates the name for the transfer dead letter receiver, specified by <paramref name="entityPath"/>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedContext">
            <summary>Context provided for <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> exception raised by the client.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedContext" /> class.</summary>
            <param name="action">The action associated with the exception.</param>
            <param name="endpoint">The endpoint associated with the exception.</param>
            <param name="entityPath">The entity path associated with the exception.</param>
            <param name="clientId">The Client Id can be used to associate with the Queueclient, SubscriptionClient, MessageSender or MessageReceiver that encountered the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.Action">
            <summary>Gets the action associated with the event.</summary>
            <value>The action associated with the event.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.Endpoint">
            <summary>The namespace name used when this exception occured.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.EntityPath">
            <summary>The entity path used when this exception occured.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedContext.ClientId">
            <summary>The Client Id associated with the sender, receiver or session when this exception occured.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs">
            <summary>Provides data for the <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ExceptionReceivedHandler" /> event.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.#ctor(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs" /> class.</summary>
            <param name="exception">The exception that this event data belongs to.</param>
            <param name="action">The action associated with the event.</param>
            <param name="endpoint">The endpoint used when this exception occurred.</param>
            <param name="entityName">The entity path used when this exception occurred.</param>
            <param name="clientId">The Client Id can be used to associate with the Queueclient, SubscriptionClient, MessageSender or MessageReceiver that encountered the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.Exception">
            <summary>Gets the parent class exception to which this event data belongs.</summary>
            <value>The exception, generated by the parent class, to which this event data belongs.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs.ExceptionReceivedContext">
            <summary>
            Gets the context of the exception (action, namespace name, and entity path).
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction">
            <summary>Action taking place when <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> is raised.</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Complete">
            <summary>Message completion operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Abandon">
            <summary>Message abandon operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.UserCallback">
            <summary>User message handler invocation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.Receive">
            <summary>Message receive operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.RenewLock">
            <summary>Message lock renewal operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.AcceptMessageSession">
            <summary>Session start operation</summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgsAction.CloseMessageSession">
            <summary>Session close operation</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer">
            <summary>
            This class describes a serializer class used to serialize and deserialize an Object.
            This class is almost identical to DataContractSerializer; only difference is that 
            ReadObject(Stream) and WriteObject(Stream, object) pick Binary Xml Reader/Writer 
            instead of text.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.#ctor(System.Type)">
            <summary>
            Initializes a new DataContractBinarySerializer instance
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.ReadObject(System.IO.Stream)">
            <summary>
            Converts from stream to the corresponding object
            </summary>
            <param name="stream"></param>
            <returns>Object corresponding to the stream</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObject(System.IO.Stream,System.Object)">
            <summary>
            Serializes the object into the stream
            </summary>
            <param name="stream"></param>
            <param name="graph"></param>
            <remarks>Override the default (Text) and use Binary Xml Reader instead</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            Serializes the object into the stream using the XmlDictionaryWriter
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
            <param name="reader"></param>
            <param name="verifyObjectName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            This method simply delegates to the DataContractSerializer implementation
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer`1">
            <summary>
            Returns a static <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer"/> instance of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer`1.Instance">
            <summary>
            Initializes a DataContractBinarySerializer instance of type T
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.InteropExtensions.MessageInteropExtensions">
            <summary>
            A Message Extension Class that provides extension methods to deserialize 
            the body of a message that was serialized and sent to ServiceBus Queue/Topic
            using the WindowsAzure.Messaging client library. The WindowsAzure.Messaging
            client libary serializes objects using the 
            <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer"/> (default serializer) or <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>
            when sending message. This class provides extension methods to deserialize
            and retrieve the body of such messages.
            </summary>
            <remarks>
            1. If a message is only being sent and received using this Microsoft.Azure.ServiceBus
            client library, then the below extension methods are not relevant and should not be used.
            
            2. If this client library will be used to receive messages that were sent using both 
            WindowsAzure.Messaging client library and this (Microsoft.Azure.ServiceBus) library,
            then the Users need to add a User property <see cref="P:Microsoft.Azure.ServiceBus.Message.UserProperties"/>
            while sending the message. On receiving the message, this property can be examined to
            determine if the message was from WindowsAzure.Messaging client library and if so
            use the message.GetBody() extension method to get the actual body associated with the message.
            
            ----------------------------------------------
            Scenarios to use the GetBody Extension method:
            ----------------------------------------------
            If message was constructed using the WindowsAzure.Messaging client library as follows:
            <code>
                var message1 = new BrokeredMessage("contoso"); // Sending a plain string
                var message2 = new BrokeredMessage(sampleObject); // Sending an actual customer object
                var message3 = new BrokeredMessage(Encoding.UTF8.GetBytes("contoso")); // Sending a UTF8 encoded byte array object
                
                await messageSender.SendAsync(message1);
                await messageSender.SendAsync(message2);
                await messageSender.SendAsync(message3);
            </code>
            
            Then retreive the original objects using this client library as follows:
            (By default <see cref="T:Microsoft.Azure.ServiceBus.InteropExtensions.DataContractBinarySerializer"/> will be used to deserialize and retrieve the body.
             If a serializer other than that was used, pass in the serializer explicitly.)
            <code>
                var message1 = await messageReceiver.ReceiveAsync();
                var returnedData1 = message1.GetBody&lt;string&gt;();
                
                var message2 = await messageReceiver.ReceiveAsync();
                var returnedData2 = message1.GetBody&lt;SampleObject&gt;();
                
                var message3 = await messageReceiver.ReceiveAsync();
                var returnedData3Bytes = message1.GetBody&lt;byte[]&gt;();
                Console.WriteLine($"Message3 String: {Encoding.UTF8.GetString(returnedData3Bytes)}");
            </code>
            
            -------------------------------------------------
            Scenarios to NOT use the GetBody Extension method:
            -------------------------------------------------
             If message was sent using the WindowsAzure.Messaging client library as follows:
                var message4 = new BrokeredMessage(new MemoryStream(Encoding.UTF8.GetBytes("contoso")));
                await messageSender.SendAsync(message4);
                
             Then retreive the original objects using this client library as follows:
                var message4 = await messageReceiver.ReceiveAsync();
                string returned = Encoding.UTF8.GetString(message4.Body); // Since message was sent as Stream, no deserialization required here.
            
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.InteropExtensions.MessageInteropExtensions.GetBody``1(Microsoft.Azure.ServiceBus.Message,System.Runtime.Serialization.XmlObjectSerializer)">
            <summary>
            Deserializes the body of a message that was serialized using XmlObjectSerializer
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.CorrelationFilter">
            <summary>
            Represents the correlation filter expression.
            </summary>
            <remarks>
            <para>
            A CorrelationFilter holds a set of conditions that are matched against one of more of an arriving message's user and system properties.
            A common use is a match against the <see cref="P:Microsoft.Azure.ServiceBus.Message.CorrelationId"/> property, but the application can also choose to match against 
            <see cref="P:Microsoft.Azure.ServiceBus.Message.ContentType"/>, <see cref="P:Microsoft.Azure.ServiceBus.Message.Label"/>, <see cref="P:Microsoft.Azure.ServiceBus.Message.MessageId"/>, <see cref="P:Microsoft.Azure.ServiceBus.Message.ReplyTo"/>, 
            <see cref="P:Microsoft.Azure.ServiceBus.Message.ReplyToSessionId"/>, <see cref="P:Microsoft.Azure.ServiceBus.Message.SessionId"/>, <see cref="P:Microsoft.Azure.ServiceBus.Message.To"/>, and any user-defined properties. 
            A match exists when an arriving message's value for a property is equal to the value specified in the correlation filter. For string expressions, 
            the comparison is case-sensitive. When specifying multiple match properties, the filter combines them as a logical AND condition, 
            meaning all conditions must match for the filter to match.
            </para>
            <para>
            The CorrelationFilter provides an efficient shortcut for declarations of filters that deal only with correlation equality.
            In this case the cost of the lexigraphical analysis of the expression can be avoided.
            Not only will correlation filters be optimized at declaration time, but they will also be optimized at runtime.
            Correlation filter matching can be reduced to a hashtable lookup, which aggregates the complexity of the set of defined correlation filters to O(1).
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter" /> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter" /> class with the specified correlation identifier.
            </summary>
            <param name="correlationId">The identifier for the correlation.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="correlationId" /> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.CorrelationId">
            <summary>
            Identifier of the correlation.
            </summary>
            <value>The identifier of the correlation.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.MessageId">
            <summary>
            Identifier of the message.
            </summary>
            <value>The identifier of the message.</value>
            <remarks>Max MessageId size is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.To">
            <summary>
            Address to send to.
            </summary>
            <value>The address to send to.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ReplyTo">
            <summary>
            Address of the queue to reply to.
            </summary>
            <value>The address of the queue to reply to.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.Label">
            <summary>
            Application specific label.
            </summary>
            <value>The application specific label.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.SessionId">
            <summary>
            Session identifier.
            </summary>
            <value>The session identifier.</value>
            <remarks>Max size of sessionId is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ReplyToSessionId">
            <summary>
            Session identifier to reply to.
            </summary>
            <value>The session identifier to reply to.</value>
            <remarks>Max size of ReplyToSessionId is 128.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.ContentType">
            <summary>
            Content type of the message.
            </summary>
            <value>The content type of the message.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.CorrelationFilter.Properties">
            <summary>
            Application specific properties of the message.
            </summary>
            <value>The application specific properties of the message.</value>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal, 
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan, Stream, byte[], 
            and IList / IDictionary of supported types
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.CorrelationFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.FalseFilter">
            <summary>
            Matches none the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.FalseFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.FalseFilter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.FalseFilter.ToString">
            <summary>
            Converts the current instance to its string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Filter">
            <summary>
            Describes a filter expression that is evaluated against a Message.
            </summary>
            <remarks>
            Filter is an abstract class with the following concrete implementations:
            <list type="bullet">
            <item><b>SqlFilter</b> that represents a filter using SQL syntax. </item>
            <item><b>CorrelationFilter</b> that provides an optimization for correlation equality expressions.</item>
            </list>
            </remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SqlFilter"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.FalseFilter"/>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RuleAction">
            <summary>
            Represents the filter actions which are allowed for the transformation
            of a message that have been matched by a filter expression.
            </summary>
            <remarks>
            Filter actions allow for the transformation of a message that have been matched by a filter expression.
            The typical use case for filter acions is to append or update the properties that are attached to a message,
            for example assigning a group ID based on the correlation ID of a message.
            </remarks>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction"/>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RuleDescription">
            <summary>
            Represents a description of a rule.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName">
            <summary>
            Gets the name of the default rule on the subscription.
            </summary>
            <remarks>
            Whenever a new subscription is created, a default rule is always added. 
            The default rule is a <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/> which will enable all messages in the topic to reach subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified name.
            </summary>
            <param name="name">The name of the rule.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified filter expression.
            </summary>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RuleDescription.#ctor(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.RuleDescription" /> class with the specified name and filter expression.
            </summary>
            <param name="name">The name of the rule.</param>
            <param name="filter">The filter expression used to match messages.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Filter">
            <summary>
            Gets or sets the filter expression used to match messages.
            </summary>
            <value>The filter expression used to match messages.</value>
            <exception cref="T:System.ArgumentNullException">null (Nothing in Visual Basic) is assigned.</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Action">
            <summary>
            Gets or sets the action to perform if the message satisfies the filtering expression.
            </summary>
            <value>The action to perform if the message satisfies the filtering expression.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RuleDescription.Name">
            <summary>
            Gets or sets the name of the rule.
            </summary>
            <value>Returns a <see cref="T:System.String" /> Representing the name of the rule.</value>
            <remarks>Max allowed length of rule name is 50 chars.</remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SqlFilter">
            <summary>
            Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter"/> holds a SQL-like condition expression that is evaluated in the broker against the arriving messages' 
            user-defined properties and system properties. All system properties (which are all properties explicitly listed 
            on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/> class) must be prefixed with <code>sys.</code> in the condition expression. The SQL subset implements 
            testing for existence of properties (EXISTS), testing for null-values (IS NULL), logical NOT/AND/OR, relational operators, 
            numeric arithmetic, and simple text pattern matching with LIKE.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" /> class using the specified SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlFilter.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlFilter.Parameters">
            <summary>
            Sets the value of a filter expression.
            </summary>
            <value>The value of a filter expression.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlFilter.ToString">
            <summary>
            Returns a string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" />.
            </summary>
            <returns>The string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlFilter" />.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SqlRuleAction">
            <summary>
            Represents set of actions written in SQL language-based syntax that is performed against a <see cref="T:Microsoft.Azure.ServiceBus.Message" />.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlRuleAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" /> class with the specified SQL expression.
            </summary>
            <param name="sqlExpression">The SQL expression.</param>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlRuleAction.SqlExpression">
            <summary>
            Gets the SQL expression.
            </summary>
            <value>The SQL expression.</value>
            <remarks>Max allowed length of sql expression is 1024 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SqlRuleAction.Parameters">
            <summary>
            Sets the value of a rule action.
            </summary>
            <value>The value of a rule action.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SqlRuleAction.ToString">
            <summary>
            Returns a string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" />.
            </summary>
            <returns>The string representation of <see cref="T:Microsoft.Azure.ServiceBus.SqlRuleAction" />.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.TrueFilter">
            <summary>
            Matches all the messages arriving to be selected for the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TrueFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TrueFilter.ToString">
            <summary>
            Converts the value of the current instance to its equivalent string representation.
            </summary>
            <returns>A string representation of the current instance.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IClientEntity">
            <summary>
            An interface showing the common functionality between all Service Bus clients.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.ClientId">
            <summary>
            Gets the ID to identify this client. This can be used to correlate logs and exceptions.
            </summary>
            <remarks>Every new client has a unique ID (in that process).</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.IsClosedOrClosing">
            <summary>
            Returns true if the client is closed or closing.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.CloseAsync">
            <summary>
            Closes the Client. Closes the connections opened by it.
            </summary>
            <returns>The asynchronous operation</returns>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IClientEntity.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IClientEntity.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IMessageSession">
            <summary>
            Describes a Session object. IMessageSession can be used to perform operations on sessions.
            </summary>
            <remarks>
            <para>
            Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session.
            </para>
            <para>
            Any sender can create a session when submitting messages into a Topic or Queue by setting the <see cref="P:Microsoft.Azure.ServiceBus.Message.SessionId"/> property on Message to some 
            application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property.
            </para>
            <para>
            Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. 
            Once a Session exists, there is no defined moment or gesture for when the session expires or disappears.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId">
            <summary>
            Gets the SessionId.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IMessageSession.LockedUntilUtc">
            <summary>
            Gets the time that the session identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> is locked until for this client.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.GetStateAsync">
            <summary>
            Gets the session state.
            </summary>
            <returns>The session state as byte array.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.SetStateAsync(System.Byte[])">
            <summary>
            Set a custom state on the session which can be later retrieved using <see cref="M:Microsoft.Azure.ServiceBus.IMessageSession.GetStateAsync"/>
            </summary>
            <param name="sessionState">A byte array of session state</param>
            <returns>The asynchronous operation</returns>
            <remarks>This state is stored on Service Bus forever unless you set an empty state on it.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IMessageSession.RenewSessionLockAsync">
            <summary>
            Renews the lock on the session specified by the <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/>. The lock will be renewed based on the setting specified on the entity.
            </summary>
            <remarks>
            <para>
            When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation.
            If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by 
            the entity's LockDuration. 
            </para>
            <para>
            Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.
            </para>
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.IQueueClient">
             <summary>
             QueueClient can be used for all basic interactions with a Service Bus Queue.
             </summary>
             <example>
             Create a new QueueClient
             <code>
             IQueueClient queueClient = new QueueClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
             
             Send a message to the queue:
             <code>
             byte[] data = GetData();
             await queueClient.SendAsync(data);
             </code>
             
             Register a message handler which will be invoked every time a message is received.
             <code>
             queueClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the queueClient is opened in ReceiveMode.PeekLock mode.
                        await queueClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageSender"/> or <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/> for advanced set of functionality.</remarks>
             <seealso cref="T:Microsoft.Azure.ServiceBus.QueueClient"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.IQueueClient.QueueName">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.IQueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ISessionClient">
            <summary> 
            Describes a Session client. A session client can be used to accept session objects which can be used to interact with all messages with the same sessionId. 
            </summary> 
            <remarks> 
            You can accept any session or a given session (identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> using a session client. 
            Once you accept a session, you can use it as a <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/> which receives only messages having the same session id.
            See <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> for usage of session object.
            <example>
            To create a new SessionClient
            <code>
            ISessionClient sessionClient = new SessionClient(
                namespaceConnectionString,
                queueName,
                ReceiveMode.PeekLock);
            </code>
            
            To receive a session object for a given sessionId
            <code>
            IMessageSession session = await sessionClient.AcceptMessageSessionAsync(sessionId);
            </code>
            
            To receive any session
            <code>
            IMessageSession session = await sessionClient.AcceptMessageSessionAsync();
            </code>
            </example>
            </remarks> 
            <seealso cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/>
            <seealso cref="T:Microsoft.Azure.ServiceBus.SessionClient"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISessionClient.EntityPath">
            <summary>
            Gets the path of the entity. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.TimeSpan)">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="serverWaitTime">Amount of time for which the call should wait for to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.String)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISessionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <param name="serverWaitTime">Amount of time for which the call should wait for to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ISubscriptionClient">
             <summary>
             SubscriptionClient can be used for all basic interactions with a Service Bus Subscription.
             </summary>
             <example>
             Create a new SubscriptionClient
             <code>
             ISubscriptionClient subscriptionClient = new SubscriptionClient(
                 namespaceConnectionString,
                 topicName,
                 subscriptionName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
             
             Register a message handler which will be invoked every time a message is received.
             <code>
             subscriptionClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the subscriptionClient is opened in ReceiveMode.PeekLock mode.
                        await subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/> for advanced set of functionality.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISubscriptionClient.TopicPath">
            <summary>
            Gets the path of the topic, for this subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ISubscriptionClient.SubscriptionName">
            <summary>
            Gets the name of subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.AddRuleAsync(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="ruleName">The name of the rule to add.</param>
            <param name="filter">The filter expression against which messages will be matched.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that will decide filter which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName"/> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="description">The rule description that provides the rule to add.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that will decide filter which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName"/> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RemoveRuleAsync(System.String)">
            <summary>
            Removes the rule on the subscription identified by <paramref name="ruleName" />.
            </summary>
            <param name="ruleName">The name of the rule.</param>
            <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.GetRulesAsync">
            <summary>
            Get all rules associated with the subscription.
            </summary>
            <returns>IEnumerable of rules</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continously from the subscription. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ISubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continously from the subscription. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. </remarks>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ITopicClient">
            <summary>
            TopicClient can be used for all basic interactions with a Service Bus topic.
            </summary>
            <example>
            Create a new TopicClient
            <code>
            ITopicClient topicClient = new TopicClient(
                namespaceConnectionString,
                topicName,
                RetryExponential);
            </code>
            
            Send a message to the topic:
            <code>
            byte[] data = GetData();
            await topicClient.SendAsync(data);
            </code>
            </example>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ITopicClient.TopicName">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Message">
            <summary>
            The object used to communicate and transfer data with Service Bus.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.#ctor">
            <summary>
            Creates a new Message
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.#ctor(System.Byte[])">
            <summary>
            Creates a new message from the specified payload.
            </summary>
            <param name="body">The payload of the message in bytes</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>
            The easiest way to create a new message from a string is the following:
            <code>
            message.Body = System.Text.Encoding.UTF8.GetBytes("Message1");
            </code>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.MessageId">
            <summary>
            Gets or sets the MessageId to identify the message.
            </summary>
            <remarks>A value set by the user to identify the message. In case message deduplication is enabled on the entity, this value will be used for deduplication.
            Max MessageId size is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.PartitionKey">
            <summary>Gets or sets a partition key for sending a transactional message to a queue or topic that is not session-aware.</summary>
            <value>The partition key for sending a transactional message.</value>
            <remarks>Transactions are not currently supported with this library. Messages with same partitionKey are sent to the same partition.
            Max PartitionKey size is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ViaPartitionKey">
            <summary>Gets or sets a partition key for sending a transactional message via a transfer queue.</summary>
            <value>The partition key value when a transaction is to be used to send messages via a transfer queue.</value>
            <remarks>Max size of ViaPartitionKey is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SessionId">
            <summary>Gets or sets a sessionId. A message with sessionId set can only be received using a <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> object.</summary>
            <value>The identifier of the session.</value>
            <remarks>Max size of sessionId is 128 chars.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ReplyToSessionId">
            <summary>Gets or sets the session identifier to reply to.</summary>
            <value>The session identifier to reply to.</value>
            <remarks>Max size of ReplyToSessionId is 128.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ExpiresAtUtc">
            <summary>Gets the date and time in UTC at which the message is set to expire.</summary>
            <value>The message expiration time in UTC.</value>
            <exception cref="T:System.InvalidOperationException">If the message has not been received. For example if a new message was created but not yet sent and received.</exception>
            <remarks>Unless specifically set for a message, this value is controlled by the 'DefaultMessageTimeToLive' property set while creating the entity.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.TimeToLive">
            <summary>
            Gets or sets the message’s time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. 
            Messages older than their TimeToLive value will expire and no longer be retained in the message store. Expired messages cannot be received. 
            TimeToLive is the maximum lifetime that a message can be received, but its value cannot exceed the entity specified value on the destination queue or subscription. 
            If a lower TimeToLive value is specified, it will be applied to the individual message. However, a larger value specified on the message will be overridden by the 
            entity’s DefaultMessageTimeToLive value.
            </summary> 
            <value>The message’s time to live value.</value>
            <remarks>If the TTL set on a message by the sender exceeds the destination's TTL, then the message's TTL will be overwritten by the later one.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.CorrelationId">
            <summary>Gets or sets the a correlation identifier.</summary>
            <value>The identifier of the correlation.</value>
            <remarks>Its a custom property that can be used to either transfer a correlation Id to the destination or be used in <see cref="T:Microsoft.Azure.ServiceBus.CorrelationFilter"/></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Label">
            <summary>Gets or sets the application specific label.</summary>
            <value>The application specific label.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.To">
            <summary>Gets or sets the send to address.</summary>
            <value>The send to address.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ContentType">
            <summary>Gets or sets the type of the content.</summary>
            <value>The type of the content of the message body. This is a 
            content type identifier utilized by the sender and receiver for application specific logic.</value> 
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ReplyTo">
            <summary>Gets or sets the address of the queue to reply to.</summary>
            <value>The reply to queue address.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.ScheduledEnqueueTimeUtc">
            <summary>Gets or sets the date and time in UTC at which the message will be enqueued. This 
            property returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC.</summary> 
            <value>The scheduled enqueue time in UTC. This value is for delayed message sending. 
            It is utilized to delay messages sending to a specific time in the future.</value> 
            <remarks> Message enquing time does not mean that the message will be sent at the same time. It will get enqueued, but the actual sending time
            depends on the queue's workload and its state.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.Size">
            <summary>
            Gets the total size of the message body in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.UserProperties">
            <summary>
            Gets the user property bag, which can be used for custom message properties.
            </summary>
            <remarks>
            Only following value types are supported:
            byte, sbyte, char, short, ushort, int, uint, long, ulong, float, double, decimal, 
            bool, Guid, string, Uri, DateTime, DateTimeOffset, TimeSpan, Stream, byte[], 
            and IList / IDictionary of supported types
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemProperties">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection"/>, which is used to store properties that are set by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.ToString">
            <summary>Returns a string that represents the current message.</summary>
            <returns>The string representation of the current message.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Message.Clone">
            <summary>Clones a message, so that it is possible to send a clone of a message as a new message.</summary>
            <returns>The <see cref="T:Microsoft.Azure.ServiceBus.Message" /> that contains the cloned message.</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection">
            <summary>
            A collection used to store properties which are set by the Service Bus service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.IsLockTokenSet">
            <summary>
            Specifies whether or not there is a lock token set on the current message.
            </summary>
            <remarks>A lock token will only be specified if the message was received using <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken">
            <summary>
            Gets the lock token for the current message.
            </summary>
            <remarks>A lock token will only be specified if the message was received using <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/></remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.IsReceived">
            <summary>Specifies if message is a received message or not.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.DeliveryCount">
            <summary>
            Get the current delivery count.
            </summary>
            <value>This value starts at 1.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockedUntilUtc">
            <summary>Gets the date and time in UTC until which the message will be locked in the queue/subscription.</summary>
            <value>The date and time until which the message will be locked in the queue/subscription.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber">
            <summary>Gets the unique number assigned to a message by Service Bus, for this entity.</summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.DeadLetterSource">
            <summary>
            Gets the name of the queue or subscription that this message was enqueued on, before it was deadlettered.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedSequenceNumber">
            <summary>Gets or sets the enqueued sequence number of the message.</summary>
            <value>The enqueued sequence number of the message.</value>
            <remarks>In scenarios of Topic-Subscription or ForwardTo, the message is initially enqueued on a different entity as compared to the 
            entity from where the message is received. This returns the sequence number of the message in the initial entity.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.EnqueuedTimeUtc">
            <summary>Gets or sets the date and time of the sent time in UTC.</summary>
            <value>The enqueue time in UTC. This value represents the actual time of enqueuing the message.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions">
            <summary>Provides options associated with message pump processing using
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" /> and
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)" />.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.MessageHandlerOptions.#ctor(System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions" /> class.
            Default Values:
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxConcurrentCalls"/> = 1
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.AutoComplete"/> = true
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ReceiveTimeOut"/> = 1 minute
                <see cref="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxAutoRenewDuration"/> = 5 minutes
            </summary>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.ExceptionReceivedHandler">
            <summary>Occurs when an exception is received. Enables you to be notified of any errors encountered by the message pump.
            When errors are received calls will automatically be retried, so this is informational. </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxConcurrentCalls">
            <summary>Gets or sets the maximum number of concurrent calls to the callback the message pump should initiate.</summary>
            <value>The maximum number of concurrent calls to the callback.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.AutoComplete">
            <summary>Gets or sets a value that indicates whether the message-pump should call
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.CompleteAsync(System.String)" /> or
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.CompleteAsync(System.String)" /> on messages after the callback has completed processing.</summary>
            <value>true to complete the message processing automatically on successful execution of the operation; otherwise, false.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageHandlerOptions.MaxAutoRenewDuration">
            <summary>Gets or sets the maximum duration within which the lock will be renewed automatically. This
            value should be greater than the longest message lock duration; for example, the LockDuration Property. </summary>
            <value>The maximum duration during which locks are automatically renewed.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessageLockLostException">
            <summary>
            The exception that is thrown when the lock on the message is lost.  Callers should call Receive and process the message again.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageSession.LockedUntilUtc">
            <summary>
            Gets the time that the session identified by <see cref="P:Microsoft.Azure.ServiceBus.MessageSession.SessionId"/> is locked until for this client.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.MessageSession.SessionId">
            <summary>
            Gets the SessionId.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessagingEntityDisabledException">
            <summary>
            The exception that is thrown when the Messaging Entity is disabled. Enable the entity again using Portal.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.MessagingEntityNotFoundException">
            <summary>
            The exception that is thrown when the Messaging Entity is not found.  Verify Entity Exists.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.NoRetry">
            <summary>
            A retry policy, which does not actually retry.
            </summary>
            <remarks>Use this if you want all Service Bus exceptions to be handled by user code.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.NoRetry.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)">
            <summary>
            Called to see if a retry should be performed.
            </summary>
            <param name="remainingTime">The remaining time before the timeout expires.</param>
            <param name="currentRetryCount">The number of attempts that have been processed.</param>
            <param name="retryInterval">The amount of time to delay before retry.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken">
            <summary>
            Provides information about a security token such as audience, expiry time, and the string token value.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.#ctor(System.String,System.DateTime,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken"/> class.
            </summary>
            <param name="tokenString">The token</param>
            <param name="expiresAtUtc">The expiration time</param>
            <param name="audience">The audience</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.#ctor(System.String,System.DateTime)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken"/> class.
            </summary>
            <param name="tokenString">The token</param>
            <param name="expiresAtUtc">The expiration time</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken"/> class.
            </summary>
            <param name="tokenString">The token</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.Audience">
            <summary>
            Gets the audience of this token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.ExpiresAtUtc">
            <summary>
            Gets the expiration time of this token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.TokenValue">
            <summary>
            Gets the actual token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.ExpiresOnFieldName">
            <summary></summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.AudienceFieldName">
            <summary></summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.KeyValueSeparator">
            <summary></summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.SecurityToken.PairSeparator">
            <summary></summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.ServiceBusConnection.OperationTimeout">
            <summary>
            OperationTimeout is applied in erroneous situations to notify the caller about the relevant <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusException"/>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.ServiceBusConnection.RetryPolicy">
            <summary>
            Get the retry policy instance that was created as part of this builder's creation.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.ServiceBusConnection.SasKey">
            <summary>
            Get the shared access policy key value from the connection string
            </summary>
            <value>Shared Access Signature key</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.ServiceBusConnection.SasKeyName">
            <summary>
            Get the shared access policy owner name from the connection string
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider">
            <summary>
            The SharedAccessSignatureTokenProvider generates tokens using a shared access key or existing signature.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.EpochTime">
            <summary>
            Represents 00:00:00 UTC Thursday 1, January 1970.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.#ctor(System.String,System.String,System.Func{System.String,System.Byte[]},System.TimeSpan,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary></summary>
            <param name="keyName"></param>
            <param name="sharedAccessKey"></param>
            <param name="customKeyEncoder"></param>
            <param name="tokenTimeToLive"></param>
            <param name="tokenScope"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.OnGetTokenAsync(System.String,System.String,System.TimeSpan)">
            <summary></summary>
            <param name="appliesTo"></param>
            <param name="action"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.BuildSignature(System.String)">
            <summary></summary>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.SharedAccessSignatureTokenProvider.SharedAccessSignatureToken">
            <summary>
            A WCF SecurityToken that wraps a Shared Access Signature
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatForUser(System.String,System.Object[])">
            <summary>
            Formats a string+parameters using CurrentCulture.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatInvariant(System.String,System.Object)">
            <summary>
            Formats a string+parameter using InvariantCulture.  This overload avoids allocating an array when there's only one replacement parameter
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.StringUtility.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats a string+parameters using InvariantCulture.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenProvider">
            <summary>
            This abstract base class can be extended to implement additional token providers.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.#ctor">
            <summary></summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.#ctor(Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary></summary>
            <param name="tokenScope"></param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.TokenScope">
            <summary>
            Gets the scope or permissions associated with the token.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.ThisLock">
            <summary></summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String)">
            <summary>
            Construct a TokenProvider based on a sharedAccessSignature.
            </summary>
            <param name="sharedAccessSignature">The shared access signature</param>
            <returns>A TokenProvider initialized with the shared access signature</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,System.TimeSpan)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenTimeToLive">The token time to live</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenScope">The tokenScope of tokens to request.</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.CreateSharedAccessSignatureTokenProvider(System.String,System.String,System.TimeSpan,Microsoft.Azure.ServiceBus.Primitives.TokenScope)">
            <summary>
            Construct a TokenProvider based on the provided Key Name and Shared Access Key.
            </summary>
            <param name="keyName">The key name of the corresponding SharedAccessKeyAuthorizationRule.</param>
            <param name="sharedAccessKey">The key associated with the SharedAccessKeyAuthorizationRule</param>
            <param name="tokenTimeToLive">The token time to live</param>
            <param name="tokenScope">The tokenScope of tokens to request.</param>
            <returns>A TokenProvider initialized with the provided RuleId and Password</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.GetTokenAsync(System.String,System.String,System.TimeSpan)">
            <summary>
            Gets a <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken"/> for the given audience and duration.
            </summary>
            <param name="appliesTo">The URI which the access token applies to</param>
            <param name="action">The request action</param>
            <param name="timeout">The time span that specifies the timeout value for the message that gets the security token</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.OnGetTokenAsync(System.String,System.String,System.TimeSpan)">
            <summary></summary>
            <param name="appliesTo"></param>
            <param name="action"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.Primitives.TokenProvider.NormalizeAppliesTo(System.String)">
            <summary></summary>
            <param name="appliesTo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenProviderAdapter">
            <summary>
            Provides an adapter from TokenProvider to ICbsTokenProvider for AMQP CBS usage.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Primitives.TokenScope">
            <summary>
            A enum representing the scope of the <see cref="T:Microsoft.Azure.ServiceBus.Primitives.SecurityToken"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.TokenScope.Namespace">
            <summary>
            The namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.Primitives.TokenScope.Entity">
            <summary>
            The entity.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.QueueClient">
             <summary>
             QueueClient can be used for all basic interactions with a Service Bus Queue.
             </summary>
             <example>
             Create a new QueueClient
             <code>
             IQueueClient queueClient = new QueueClient(
                 namespaceConnectionString,
                 queueName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
             
             Send a message to the queue:
             <code>
             byte[] data = GetData();
             await queueClient.SendAsync(data);
             </code>
             
             Register a message handler which will be invoked every time a message is received.
             <code>
             queueClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the queueClient is opened in ReceiveMode.PeekLock mode.
                        await queueClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageSender"/> or <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/> for advanced set of functionality.
             It uses AMQP protocol for communicating with servicebus.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.QueueClient"/> to perform operations on a queue.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having namespace and queue information.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode"/>.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the queue, which is opened during the first send/receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.QueueClient"/> to perform operations on a queue.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain queue information.</param>
            <param name="entityPath">Name of the queue</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode"/>.PeekLock.</param>
            <param name="retryPolicy">Retry policy for queue operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the queue, which is opened during the first send/receive operation.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.QueueName">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> for the QueueClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.Path">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks> 
            <para>
            When Prefetch is enabled, the client will quietly acquire more messages, up to the PrefetchCount limit, than what the application 
            immediately asks for. The message pump will therefore acquire a message for immediate consumption 
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background. 
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is 
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the 
            buffer and then wait or block as expected. 
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.QueueClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this QueueClient.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.OnClosingAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
            <param name="messageList">The list of messages</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using its lock token. This will delete the message from the queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.AbandonAsync(System.String)">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            Abandoning a message will increase the delivery count on the message.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.DeadLetterAsync(System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.QueueClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive a message from the deadletter sub-queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/> or <see cref="T:Microsoft.Azure.ServiceBus.IQueueClient"/>, with the corresponding path. 
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)"/> to help with this.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions"/> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speeden up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the queue client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> that needs to be scheduled.</param>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/> of the message to be cancelled.</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this queue client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.QueueClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.QuotaExceededException">
            <summary>
            The exception that is thrown when the Quota (Entity Max Size or other Connection etc) allocated to the Entity has exceeded.  Callers should check the
            error message to see which of the Quota exceeded and take appropriate action.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ReceiveMode">
            <summary>
            Specifies the behavior of the receiver.
            </summary>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock">
            <summary>Allows a message to be received, and only deleted from Service Bus when <see cref="M:Microsoft.Azure.ServiceBus.Core.IReceiverClient.CompleteAsync(System.String)"/> is called.</summary>
            <remarks>This is the default value for <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode" />, and should be used for guaranteed delivery.</remarks>
        </member>
        <member name="F:Microsoft.Azure.ServiceBus.ReceiveMode.ReceiveAndDelete">
            <summary>ReceiveAndDelete will delete the message from Service Bus as soon as the message is delivered.</summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.Resources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.AmqpFieldSessionId">
            <summary>
               Looks up a localized string similar to No session-id was specified for a session receiver..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.AmqpMessageSizeExceeded">
            <summary>
               Looks up a localized string similar to The received message (delivery-id:{0}, size:{1} bytes) exceeds the limit ({2} bytes) currently allowed on the link..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentMustBePositive">
            <summary>
               Looks up a localized string similar to The value of the argument {0} must be positive..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentNullOrWhiteSpace">
            <summary>
               Looks up a localized string similar to The argument {0} is null or white space..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ArgumentStringTooBig">
            <summary>
               Looks up a localized string similar to The argument &apos;{0}&apos; cannot exceed {1} characters..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.BrokeredMessageListIsNullOrEmpty">
            <summary>
               Looks up a localized string similar to There are no brokeredMessages supplied. Please make sure input messages are not empty..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.CannotSendAnEmptyMessage">
            <summary>
               Looks up a localized string similar to Sending empty {0} is not a valid operation..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.CharacterReservedForUriScheme">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; contains character &apos;{1}&apos; which is not allowed because it is reserved in the Uri scheme..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.DefaultServerBusyException">
            <summary>
               Looks up a localized string similar to This request has been blocked because the entity or namespace is being throttled. Please retry the operation, and if condition continues, please slow down your rate of request..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.EntityNameLengthExceedsLimit">
            <summary>
               Looks up a localized string similar to The entity path/name &apos;{0}&apos; exceeds the &apos;{1}&apos; character limit..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.ExponentialRetryBackoffRange">
            <summary>
               Looks up a localized string similar to The minimum back off period &apos;{0}&apos; cannot exceed the maximum back off period of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.FailedToSerializeUnsupportedType">
            <summary>
               Looks up a localized string similar to Serialization operation failed due to unsupported type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidAmqpMessageProperty">
            <summary>
               Looks up a localized string similar to {0} is not a supported user property type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidCharacterInEntityName">
            <summary>
               Looks up a localized string similar to The entity name or path contains an invalid character &apos;{0}&apos;. The supplied value is &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.InvalidEncoding">
            <summary>
               Looks up a localized string similar to The string has an invalid encoding format..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MaxConcurrentCallsMustBeGreaterThanZero">
            <summary>
               Looks up a localized string similar to The specified value &apos;{0}&apos; is invalid. &quot;maxConcurrentCalls&quot; must be greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MessageHandlerAlreadyRegistered">
            <summary>
               Looks up a localized string similar to A message handler has already been registered..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.MessageLockLost">
            <summary>
               Looks up a localized string similar to The lock supplied is invalid. Either the lock expired, or the message has already been removed from the queue..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.NotSupportedPropertyType">
            <summary>
               Looks up a localized string similar to &apos;{0}&apos; is not a supported type..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.PeekLockModeRequired">
            <summary>
               Looks up a localized string similar to This operation is only supported for a message receiver in &apos;PeekLock&apos; receive mode..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.PluginAlreadyRegistered">
            <summary>
               Looks up a localized string similar to The {0} plugin has already been registered...
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.RuleFilterNotSupported">
            <summary>
               Looks up a localized string similar to Provided rule filter {0} is not supported. Supported values are: {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionFilterMissing">
            <summary>
               Looks up a localized string similar to Session filter is missing on the link.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionHandlerAlreadyRegistered">
            <summary>
               Looks up a localized string similar to A session handler has already been registered..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SessionLockExpiredOnMessageSession">
            <summary>
               Looks up a localized string similar to The session lock has expired on the MessageSession. Accept a new MessageSession..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SqlFilterActionStatmentTooLong">
            <summary>
               Looks up a localized string similar to The length of the filter action statement is {0}, which exceeds the maximum length of {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.SqlFilterStatmentTooLong">
            <summary>
               Looks up a localized string similar to The length of the filter statement is {0}, which exceeds the maximum length of {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TimeoutMustBeNonNegative">
            <summary>
               Looks up a localized string similar to Argument {0} must be a non-negative timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TimeoutMustBePositive">
            <summary>
               Looks up a localized string similar to Argument {0} must be a positive timeout value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TokenMissingAudience">
            <summary>
               Looks up a localized string similar to The provided token does not specify the &apos;Audience&apos; value..
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.Resources.TokenMissingExpiresOn">
            <summary>
               Looks up a localized string similar to The provided token does not specify the &apos;ExpiresOn&apos; value..
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RetryExponential">
            <summary>
            RetryPolicy implementation where the delay between retries will grow in a staggered exponential manner.
            RetryIntervals will be computed using a retryFactor which is a function of deltaBackOff (MaximumBackoff - MinimumBackoff) and MaximumRetryCount
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryExponential.#ctor(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Returns a new RetryExponential retry policy object.
            </summary>
            <param name="minimumBackoff">Minimum backoff interval.</param>
            <param name="maximumBackoff">Maximum backoff interval.</param>
            <param name="maximumRetryCount">Maximum retry count.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MinimalBackoff">
            <summary>
            Minimum backoff interval.
            </summary>
            <value>The minimum backoff interval.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MaximumBackoff">
            <summary>
            Gets or sets the maximum backoff interval.
            </summary>
            <value>The maximum backoff interval.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.DeltaBackoff">
            <summary>
            Gets or sets the backoff interval associated with the retry.
            </summary>
            <value>The backoff interval associated with the retry.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryExponential.MaxRetryCount">
            <summary>
            Gets or sets the maximum number of allowed retries.
            </summary>
            <value>The maximum number of allowed retries.</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryExponential.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)">
            <summary>
            Called to see if a retry should be performed.
            </summary>
            <param name="remainingTime">The remaining time before the timeout expires.</param>
            <param name="currentRetryCount">The number of attempts that have been processed.</param>
            <param name="retryInterval">The amount of time to delay before retry.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.RetryPolicy">
            <summary>
            Represents an abstraction for retrying messaging operations. Users should not 
            implement this class, and instead should use one of the provided implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.#ctor">
            <summary></summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default">
            <summary>
            Returns the default retry policy, <see cref="T:Microsoft.Azure.ServiceBus.RetryExponential"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.IsServerBusy">
            <summary>
            Determines whether or not the server returned a busy error.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.RetryPolicy.ServerBusyExceptionMessage">
            <summary>
            Gets the exception message when a server busy error is returned.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.RunOperation(System.Func{System.Threading.Tasks.Task},System.TimeSpan)">
            <summary>
            Runs a <see cref="T:System.Func`2"/>, using the current RetryPolicy.
            </summary>
            <param name="operation">A <see cref="T:System.Func`2"/> to be executed.</param>
            <param name="operationTimeout">The timeout for the entire operation.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.IsRetryableException(System.Exception)">
            <summary>
            Determines whether or not the exception can be retried.
            </summary>
            <param name="exception"></param>
            <returns>A bool indicating whether or not the operation can be retried.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)">
            <summary></summary>
            <param name="remainingTime"></param>
            <param name="currentRetryCount"></param>
            <param name="retryInterval"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServerBusyException">
            <summary>
            The exception that is thrown when a server is busy.  Callers should wait a while and retry the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusCommunicationException">
            <summary>
            Exception for signaling general communication errors related to messaging operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusCommunicationException.#ctor(System.String)">
            <summary></summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusCommunicationException.#ctor(System.String,System.Exception)">
            <summary></summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder">
            <summary>
            Used to generate Service Bus connection strings.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Instatiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/>.
            </summary>
            <param name="connectionString">Connection string for namespace or the entity.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/>.
            </summary>
            <example>
            <code>
            var connectionStringBuilder = new ServiceBusConnectionStringBuilder(
                "contoso.servicebus.windows.net",
                "myQueue",
                "RootManageSharedAccessKey",
                "&amp;lt;sharedAccessKey&amp;gt;
            );
            </code>
            </example>
            <param name="endpoint">Fully qualified endpoint.</param>
            <param name="entityPath">Path to the entity.</param>
            <param name="sharedAccessKeyName">Shared access key name.</param>
            <param name="sharedAccessKey">Shared access key.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.Endpoint">
            <summary>
            Fully qualified domain name of the endpoint.
            </summary>
            <example>
            <code>this.Endpoint = contoso.servicebus.windows.net</code>
            </example>
            <exception cref="T:System.ArgumentException">Throws when endpoint is not fully qualified endpoint.</exception>
            <exception cref="T:System.UriFormatException">Throws when the hostname cannot be parsed</exception>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath">
            <summary>
            Get the entity path value from the connection string
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.SasKeyName">
            <summary>
            Get the shared access policy owner name from the connection string
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.SasKey">
            <summary>
            Get the shared access policy key value from the connection string
            </summary>
            <value>Shared Access Signature key</value>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.GetNamespaceConnectionString">
            <summary>
            Returns an interoperable connection string that can be used to connect to ServiceBus Namespace
            </summary>
            <returns>Namespace connection string</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.GetEntityConnectionString">
            <summary>
            Returns an interoperable connection string that can be used to connect to the given ServiceBus Entity
            </summary>
            <returns>Entity connection string</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder.ToString">
            <summary>
            Returns an interoperable connection string that can be used to connect to ServiceBus Namespace
            </summary>
            <returns>The connection string</returns>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusException">
            <summary>
            Base Exception for various Service Bus errors.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.String)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
            <param name="message">The detailed message exception.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.Exception)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.ServiceBusException.#ctor(System.Boolean,System.String,System.Exception)">
            <summary>
            Returns a new ServiceBusException
            </summary>
            <param name="isTransient">Specifies whether or not the exception is transient.</param>
            <param name="message">The detailed message exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.Message">
            <summary>
            Gets the message as a formatted string.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.IsTransient">
            <summary>
            A boolean indicating if the exception is a transient error or not.
            </summary>
            <value>returns true when user can retry the operation that generated the exception without additional intervention.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.ServiceBusException.ServiceBusNamespace">
            <summary>
            Gets the Service Bus namespace from which the exception occured, if available.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.ServiceBusTimeoutException">
            <summary>
            The exception that is thrown when a time out is encountered.  Callers retry the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionClient">
            <summary> 
            A session client can be used to accept session objects which can be used to interact with all messages with the same sessionId. 
            </summary> 
            <remarks> 
            You can accept any session or a given session (identified by <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> using a session client. 
            Once you accept a session, you can use it as a <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/> which receives only messages having the same session id.
            See <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> for usage of session object.
            This uses AMQP protocol to communicate with the service.
            </remarks>
            <example>
            To create a new SessionClient
            <code>
            ISessionClient sessionClient = new SessionClient(
                namespaceConnectionString,
                queueName,
                ReceiveMode.PeekLock);
            </code>
            
            To receive a session object for a given sessionId
            <code>
            IMessageSession session = await sessionClient.AcceptMessageSessionAsync(sessionId);
            </code>
            
            To receive any session
            <code>
            IMessageSession session = await sessionClient.AcceptMessageSessionAsync();
            </code>
            </example>
            <seealso cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient from a <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/>
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having entity level connection details.</param>
            <param name="receiveMode">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode"/> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with ServiceBus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount"/> that specifies the upper limit of messages the session object
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is used for all the sessions objects accepted using this client.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy,System.Int32)">
            <summary>
            Creates a new SessionClient from a specified connection string and entity path.
            </summary>
            <param name="connectionString">Namespace connection string used to communicate with Service Bus. Must not contain entity details.</param>
            <param name="entityPath">The path of the entity for this receiver. For Queues this will be the anme, but for Subscriptions this will be the full path.</param>
            <param name="receiveMode">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.ReceiveMode"/> used to specify how messages are received. Defaults to PeekLock mode.</param>
            <param name="retryPolicy">The <see cref="T:Microsoft.Azure.ServiceBus.RetryPolicy"/> that will be used when communicating with ServiceBus. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <param name="prefetchCount">The <see cref="P:Microsoft.Azure.ServiceBus.SessionClient.PrefetchCount"/> that specifies the upper limit of messages the session object
            will actively receive regardless of whether a receive operation is pending. Defaults to 0.</param>
            <remarks>Creates a new connection to the entity, which is used for all the sessions objects accepted using this client.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.EntityPath">
            <summary>
            Gets the path of the entity. This is either the name of the queue, or the full path of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.OnClosingAsync">
            <summary></summary>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.TimeSpan)">
            <summary>
            Gets a session object of any <see cref="P:Microsoft.Azure.ServiceBus.IMessageSession.SessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="serverWaitTime">Amount of time for which the call should wait to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.String)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)">
            <summary>
            Gets a particular session object identified by <paramref name="sessionId"/> that can be used to receive messages for that sessionId.
            </summary>
            <param name="sessionId">The sessionId present in all its messages.</param>
            <param name="serverWaitTime">Amount of time for which the call should wait to fetch the next session.</param>
            <remarks>All plugins registered on <see cref="T:Microsoft.Azure.ServiceBus.SessionClient"/> will be applied to each <see cref="T:Microsoft.Azure.ServiceBus.MessageSession"/> that is accepted.
            Individual sessions can further register additional plugins.</remarks>
            <returns>A session object.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this receiver.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> of the plugin to be unregistered.</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionHandlerOptions">
            <summary>Provides options associated with session pump processing using
            <see cref="M:Microsoft.Azure.ServiceBus.QueueClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" /> and
            <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)" />.</summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SessionHandlerOptions.#ctor(System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Azure.ServiceBus.SessionHandlerOptions" /> class.
            Default Values:
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxConcurrentSessions"/> = 2000
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.AutoComplete"/> = true
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MessageWaitTimeout"/> = 1 minute
                <see cref="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxAutoRenewDuration"/> = 5 minutes
            </summary>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.ExceptionReceivedHandler">
            <summary>Occurs when an exception is received. Enables you to be notified of any errors encountered by the session pump.
            When errors are received calls will automatically be retried, so this is informational. </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxAutoRenewDuration">
            <summary>Gets or sets the duration for which the session lock will be renewed automatically.</summary>
            <value>The duration for which the session renew its state.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MessageWaitTimeout">
            <summary>Gets or sets the time to wait for receiving a message.</summary>
            <value>The time to wait for receiving the message.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.MaxConcurrentSessions">
            <summary>Gets or sets the maximum number of existing sessions that the User wants to handle concurrently.</summary>
            <value>The maximum number of sessions that the User wants to handle concurrently.</value>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SessionHandlerOptions.AutoComplete">
            <summary>Gets or sets whether the autocomplete option of the session handler is enabled.</summary>
            <value>true if the autocomplete option of the session handler is enabled; otherwise, false.</value>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SessionLockLostException">
            <summary>
            The exception that is thrown when the lock on the Session has expired.  Callers should receive the Session again.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.SubscriptionClient">
             <summary>
             SubscriptionClient can be used for all basic interactions with a Service Bus Subscription.
             </summary>
             <example>
             Create a new SubscriptionClient
             <code>
             ISubscriptionClient subscriptionClient = new SubscriptionClient(
                 namespaceConnectionString,
                 topicName,
                 subscriptionName,
                 ReceiveMode.PeekLock,
                 RetryExponential);
             </code>
             
             Register a message handler which will be invoked every time a message is received.
             <code>
             subscriptionClient.RegisterMessageHandler(
                    async (message, token) =&gt;
                    {
                        // Process the message
                        Console.WriteLine($"Received message: SequenceNumber:{message.SystemProperties.SequenceNumber} Body:{Encoding.UTF8.GetString(message.Body)}");
            
                        // Complete the message so that it is not received again.
                        // This can be done only if the subscriptionClient is opened in ReceiveMode.PeekLock mode.
                        await subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
                    },
                    async (exceptionEvent) =&gt;
                    {
                        // Process the exception
                        Console.WriteLine("Exception = " + exceptionEvent.Exception);
                        return Task.CompletedTask;
                    });
             </code>
             </example>
             <remarks>It uses AMQP protocol for communicating with servicebus. Use <see cref="T:Microsoft.Azure.ServiceBus.Core.MessageReceiver"/> for advanced set of functionality.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient"/> to perform operations on a subscription.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having namespace and topic information.</param>
            <param name="subscriptionName">Name of the subscription.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode"/>.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the subscription, which is opened during the first receive operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.#ctor(System.String,System.String,System.String,Microsoft.Azure.ServiceBus.ReceiveMode,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.SubscriptionClient"/> to perform operations on a subscription.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain topic or subscription information.</param>
            <param name="topicPath">Path to the topic.</param>
            <param name="subscriptionName">Name of the subscription.</param>
            <param name="receiveMode">Mode of receive of messages. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode"/>.PeekLock.</param>
            <param name="retryPolicy">Retry policy for subscription operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the subscription, which is opened during the first receive operation.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.TopicPath">
            <summary>
            Gets the path of the corresponding topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.Path">
            <summary>
            Gets the formatted path of the subscription client.
            </summary>
            <seealso cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatSubscriptionPath(System.String,System.String)"/>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.SubscriptionName">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode">
            <summary>
            Gets the <see cref="T:Microsoft.Azure.ServiceBus.ReceiveMode"/> for the SubscriptionClient.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.PrefetchCount">
            <summary>
            Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when and before the application asks for one using Receive.
            Setting a non-zero value prefetches PrefetchCount number of messages.
            Setting the value to zero turns prefetch off.
            Defaults to 0.
            </summary>
            <remarks> 
            <para>
            When Prefetch is enabled, the client will quietly acquire more messages, up to the PrefetchCount limit, than what the application 
            immediately asks for. The message pump will therefore acquire a message for immediate consumption 
            that will be returned as soon as available, and the client will proceed to acquire further messages to fill the prefetch buffer in the background. 
            </para>
            <para>
            While messages are available in the prefetch buffer, any subsequent ReceiveAsync calls will be immediately satisfied from the buffer, and the buffer is 
            replenished in the background as space becomes available.If there are no messages available for delivery, the receive operation will drain the 
            buffer and then wait or block as expected. 
            </para>
            <para>Updates to this value take effect on the next receive call to the service.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.OnClosingAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.CompleteAsync(System.String)">
            <summary>
            Completes a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using its lock token. This will delete the message from the subscription.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to complete.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>.
            </remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AbandonAsync(System.String)">
            <summary>
            Abandons a <see cref="T:Microsoft.Azure.ServiceBus.Message"/> using a lock token. This will make the message available again for processing.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to abandon.</param>
            <remarks>A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            Abandoning a message will increase the delivery count on the message.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.DeadLetterAsync(System.String)">
            <summary>
            Moves a message to the deadletter sub-queue.
            </summary>
            <param name="lockToken">The lock token of the corresponding message to deadletter.</param>
            <remarks>
            A lock token can be found in <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.LockToken"/>, 
            only when <see cref="P:Microsoft.Azure.ServiceBus.SubscriptionClient.ReceiveMode"/> is set to <see cref="F:Microsoft.Azure.ServiceBus.ReceiveMode.PeekLock"/>. 
            In order to receive a message from the deadletter sub-queue, you will need a new <see cref="T:Microsoft.Azure.ServiceBus.Core.IMessageReceiver"/> or <see cref="T:Microsoft.Azure.ServiceBus.IQueueClient"/>, with the corresponding path. 
            You can use <see cref="M:Microsoft.Azure.ServiceBus.EntityNameHelper.FormatDeadLetterPath(System.String)"/> to help with this.</remarks>
            <returns>The asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterMessageHandler(System.Func{Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.MessageHandlerOptions)">
            <summary>
            Receive messages continously from the entity. Registers a message handler and begins a new thread to receive messages.
            This handler(<see cref="T:System.Func`3"/>) is awaited on every time a new message is received by the receiver.
            </summary>
            <param name="handler">A <see cref="T:System.Func`3"/> that processes messages.</param>
            <param name="messageHandlerOptions">The <see cref="T:Microsoft.Azure.ServiceBus.MessageHandlerOptions"/> options used to configure the settings of the pump.</param>
            <remarks>Enable prefetch to speeden up the receive rate.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs,System.Threading.Tasks.Task})">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="exceptionReceivedHandler">A <see cref="T:System.Func`2"/> that is invoked during exceptions.
            <see cref="T:Microsoft.Azure.ServiceBus.ExceptionReceivedEventArgs"/> contains contextual information regarding the exception.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. 
            Use <see cref="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)"/> to configure the settings of the pump.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterSessionHandler(System.Func{Microsoft.Azure.ServiceBus.IMessageSession,Microsoft.Azure.ServiceBus.Message,System.Threading.CancellationToken,System.Threading.Tasks.Task},Microsoft.Azure.ServiceBus.SessionHandlerOptions)">
            <summary>
            Receive session messages continously from the queue. Registers a message handler and begins a new thread to receive session-messages.
            This handler(<see cref="T:System.Func`4"/>) is awaited on every time a new message is received by the subscription client.
            </summary>
            <param name="handler">A <see cref="T:System.Func`4"/> that processes messages. 
            <see cref="T:Microsoft.Azure.ServiceBus.IMessageSession"/> contains the session information, and must be used to perform Complete/Abandon/Deadletter or other such operations on the <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <param name="sessionHandlerOptions">Options used to configure the settings of the session pump.</param>
            <remarks>  Enable prefetch to speeden up the receive rate. </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AddRuleAsync(System.String,Microsoft.Azure.ServiceBus.Filter)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="ruleName">The name of the rule to add.</param>
            <param name="filter">The filter expression against which messages will be matched.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that decides which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName"/> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription. 
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            Max allowed length of rule name is 50 chars.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.AddRuleAsync(Microsoft.Azure.ServiceBus.RuleDescription)">
            <summary>
            Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.
            </summary>
            <param name="description">The rule description that provides the rule to add.</param>
            <returns>A task instance that represents the asynchronous add rule operation.</returns>
            <remarks>
            You can add rules to the subscription that decides which messages from the topic should reach the subscription.
            A default <see cref="T:Microsoft.Azure.ServiceBus.TrueFilter"/> rule named <see cref="F:Microsoft.Azure.ServiceBus.RuleDescription.DefaultRuleName"/> is always added while creation of the Subscription.
            You can add multiple rules with distinct names to the same subscription.
            Multiple filters combine with each other using logical OR condition. i.e., If any filter succeeds, the message is passed on to the subscription.
            </remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RemoveRuleAsync(System.String)">
            <summary>
            Removes the rule on the subscription identified by <paramref name="ruleName" />.
            </summary>
            <param name="ruleName">The name of the rule.</param>
            <returns>A task instance that represents the asynchronous remove rule operation.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.GetRulesAsync">
            <summary>
            Get all rules associated with the subscription.
            </summary>
            <returns>IEnumerable of rules</returns>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this SubscriptionClient.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used for receiving messages from Service Bus.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.SubscriptionClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
        <member name="T:Microsoft.Azure.ServiceBus.TopicClient">
            <summary>
            TopicClient can be used for all basic interactions with a Service Bus topic.
            </summary>
            <example>
            Create a new TopicClient
            <code>
            ITopicClient topicClient = new TopicClient(
                namespaceConnectionString,
                topicName,
                RetryExponential);
            </code>
            
            Send a message to the topic:
            <code>
            byte[] data = GetData();
            await topicClient.SendAsync(data);
            </code>
            </example>
            <remarks>It uses AMQP protocol for communicating with servicebus.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.TopicClient"/> to perform operations on a topic.
            </summary>
            <param name="connectionStringBuilder"><see cref="T:Microsoft.Azure.ServiceBus.ServiceBusConnectionStringBuilder"/> having namespace and topic information.</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the topic, which is opened during the first send operation.</remarks>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.#ctor(System.String,System.String,Microsoft.Azure.ServiceBus.RetryPolicy)">
            <summary>
            Instantiates a new <see cref="T:Microsoft.Azure.ServiceBus.TopicClient"/> to perform operations on a topic.
            </summary>
            <param name="connectionString">Namespace connection string. Must not contain topic information.</param>
            <param name="entityPath">Path to the topic</param>
            <param name="retryPolicy">Retry policy for topic operations. Defaults to <see cref="P:Microsoft.Azure.ServiceBus.RetryPolicy.Default"/></param>
            <remarks>Creates a new connection to the topic, which is opened during the first send operation.</remarks>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.TopicName">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.OperationTimeout">
            <summary>
            Duration after which individual operations will timeout.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.Path">
            <summary>
            Gets the name of the topic.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.OnClosingAsync">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.SendAsync(Microsoft.Azure.ServiceBus.Message)">
            <summary>
            Sends a message to Service Bus.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/></param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.SendAsync(System.Collections.Generic.IList{Microsoft.Azure.ServiceBus.Message})">
            <summary>
            Sends a list of messages to Service Bus.
            </summary>
            <param name="messageList">The list of messages</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.ScheduleMessageAsync(Microsoft.Azure.ServiceBus.Message,System.DateTimeOffset)">
            <summary>
            Schedules a message to appear on Service Bus at a later time.
            </summary>
            <param name="message">The <see cref="T:Microsoft.Azure.ServiceBus.Message"/> that needs to be scheduled.</param>
            <param name="scheduleEnqueueTimeUtc">The UTC time at which the message should be available for processing.</param>
            <returns>The sequence number of the message that was scheduled.</returns>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.CancelScheduledMessageAsync(System.Int64)">
            <summary>
            Cancels a message that was scheduled.
            </summary>
            <param name="sequenceNumber">The <see cref="P:Microsoft.Azure.ServiceBus.Message.SystemPropertiesCollection.SequenceNumber"/> of the message to be cancelled.</param>
            <returns>An asynchronous operation</returns>
        </member>
        <member name="P:Microsoft.Azure.ServiceBus.TopicClient.RegisteredPlugins">
            <summary>
            Gets a list of currently registered plugins for this TopicClient.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.RegisterPlugin(Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin)">
            <summary>
            Registers a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to be used with this topic client.
            </summary>
            <param name="serviceBusPlugin">The <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/> to register.</param>
        </member>
        <member name="M:Microsoft.Azure.ServiceBus.TopicClient.UnregisterPlugin(System.String)">
            <summary>
            Unregisters a <see cref="T:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin"/>.
            </summary>
            <param name="serviceBusPluginName">The name <see cref="P:Microsoft.Azure.ServiceBus.Core.ServiceBusPlugin.Name"/> to be unregistered</param>
        </member>
    </members>
</doc>
