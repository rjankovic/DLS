<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="urn:fluent-ribbon"                  
                    >

    <Style TargetType="Fluent:Button">
        <Setter Property="Margin" Value="5 7 5 0" />
        <Setter Property="Padding" Value="5 5 5 5" />
    </Style>
   
    <Style TargetType="GridSplitter">
        <Setter Property="Background" Value="#88888888"/>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Margin" Value="0 0 0 0" />
    </Style>
    <Style TargetType="DataGridRow">
        <Setter Property="Padding" Value="0,5,0,5" />
        <!--<Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="DeepSkyBlue" />
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="Padding" Value="5,3,5,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DataGrid">
        <Setter Property="GridLinesVisibility" Value="Vertical" />
        <Setter Property="HorizontalGridLinesBrush" Value="#AAAAAA" />
        <Setter Property="VerticalGridLinesBrush" Value="#AAAAAA" />
        <Setter Property="Background" Value="White" />
        <Setter Property="AlternatingRowBackground" Value="#DDDDDD"  />
    </Style>

    <Style x:Key="TabItemStyle1" TargetType="{x:Type Fluent:RibbonTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Border x:Name="Border" 
                        Padding="25,5,25,5" Margin="0,0,0,0" BorderBrush="Gainsboro">
                        <ContentPresenter x:Name="ContentSite" ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="#F18719"/>
                            <Setter TargetName="Border" Property="Background" Value="#71616C"/>
                            <Setter TargetName="Border" Property="BorderThickness" Value="0 0 0 5"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#F18719"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="ContentSite" Value="White"/>
                            <Setter TargetName="Border" Property="Background" Value="#71616C" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="DockPanel">
        <Setter Property="LastChildFill" Value="False" />
    </Style>

    <Style x:Key="DialogButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Ellipse Fill="{TemplateBinding Background}"
                             Stroke="{TemplateBinding BorderBrush}"/>
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="ButtonControlTemplate1" TargetType="{x:Type Fluent:Button}">
        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Height="Auto" VerticalAlignment="{TemplateBinding VerticalAlignment}">
            <StackPanel x:Name="stackPanel" Orientation="Vertical" Width="Auto">
                <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" Margin="0,2,0,0" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="32">
                    <ContentPresenter.Content>
                        <Binding Path="LargeIcon" RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <Fluent:ObjectToImageConverter/>
                            </Binding.Converter>
                        </Binding>
                    </ContentPresenter.Content>
                </ContentPresenter>
                <Fluent:TwoLineLabel x:Name="controlLabel" Focusable="False" HorizontalAlignment="Stretch" Margin="2,0" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" VerticalAlignment="Center"/>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                <Setter Property="Width" TargetName="iconImage" Value="16"/>
                <Setter Property="Height" TargetName="iconImage" Value="16"/>
                <Setter Property="Margin" TargetName="iconImage" Value="2,0"/>
                <Setter Property="Content" TargetName="iconImage">
                    <Setter.Value>
                        <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <Fluent:ObjectToImageConverter/>
                            </Binding.Converter>
                        </Binding>
                    </Setter.Value>
                </Setter>
                <Setter Property="Margin" TargetName="controlLabel" Value="2,0"/>
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                <Setter Property="Margin" TargetName="controlLabel" Value="2,0"/>
                <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                <Setter Property="Width" TargetName="iconImage" Value="16"/>
                <Setter Property="Height" TargetName="iconImage" Value="16"/>
                <Setter Property="Margin" TargetName="iconImage" Value="2,0"/>
                <Setter Property="Content" TargetName="iconImage">
                    <Setter.Value>
                        <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                            <Binding.Converter>
                                <Fluent:ObjectToImageConverter/>
                            </Binding.Converter>
                        </Binding>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
                    <Setter Property="Background" TargetName="border" Value="#FFFFFF"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5"/>
                <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="border" Value="#FFFFFF"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFFFFF"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--<Style TargetType="Expander">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Path=DataContext.EnumName,RelativeSource={RelativeSource AncestorType=ListViewItem}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>