/*
Deployment script for DLS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

--GO
--SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

--SET NUMERIC_ROUNDABORT OFF;


--GO
--:setvar DatabaseName "${{DbName}}"
--:setvar DefaultFilePrefix "DLS2"
--:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
--:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
--:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
--:setvar __IsSqlCmdEnabled "True"
--GO
--IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
--    BEGIN
--        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
--        SET NOEXEC ON;
--    END
--GO

USE master ;
GO

PRINT N'Enabling SQL Broker';
GO

ALTER DATABASE [$(DatabaseName)] SET ENABLE_BROKER WITH ROLLBACK IMMEDIATE;
GO

PRINT N'SQL Broker Enabled';
GO

GO

USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                ENABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Role [uploader]...';


GO
CREATE ROLE [uploader]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Adm]...';


GO
CREATE SCHEMA [Adm]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Analyst]...';


GO
CREATE SCHEMA [Analyst]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Annotate]...';


GO
CREATE SCHEMA [Annotate]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [BIDoc]...';


GO
CREATE SCHEMA [BIDoc]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Inspect]...';


GO
CREATE SCHEMA [Inspect]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Learning]...';


GO
CREATE SCHEMA [Learning]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Search]...';


GO
CREATE SCHEMA [Search]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Stg]...';


GO
CREATE SCHEMA [Stg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Full-text Catalog [fulltext_default]...';


GO
CREATE FULLTEXT CATALOG [fulltext_default]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_SsrsProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_SsrsProjectComponents] AS TABLE (
    [SsrsMode]                NVARCHAR (200) NOT NULL,
    [ServerName]              NVARCHAR (200) NULL,
    [SsrsServiceUrl]          NVARCHAR (MAX) NULL,
    [SsrsExecutionServiceUrl] NVARCHAR (MAX) NULL,
    [FolderPath]              NVARCHAR (MAX) NULL,
    [SharepointBaseUrl]       NVARCHAR (MAX) NULL,
    [SharepointFolder]        NVARCHAR (MAX) NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_SsisProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_SsisProjectComponents] AS TABLE (
    [ServerName]  NVARCHAR (200) NULL,
    [FolderName]  NVARCHAR (200) NULL,
    [ProjectName] NVARCHAR (200) NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_SsasDbProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_SsasDbProjectComponents] AS TABLE (
    [ServerName] NVARCHAR (200) NULL,
    [DbName]     NVARCHAR (200) NULL,
    [SSASType]   NVARCHAR (20)  NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_RequestMessages]...';


GO
CREATE TYPE [Adm].[UDTT_RequestMessages] AS TABLE (
    [MessageId]               UNIQUEIDENTIFIER   NOT NULL,
    [RequestId]               UNIQUEIDENTIFIER   NOT NULL,
    [Content]                 NVARCHAR (MAX)     NULL,
    [RequestForCoreType]      NVARCHAR (50)      NOT NULL,
    [RequestProcessingMethod] NVARCHAR (20)      NOT NULL,
    [MessageFromId]           UNIQUEIDENTIFIER   NOT NULL,
    [MessageOriginName]       NVARCHAR (200)     NULL,
    [MessageOriginId]         UNIQUEIDENTIFIER   NOT NULL,
    [MessageFromName]         NVARCHAR (200)     NULL,
    [MessageToObjectId]       UNIQUEIDENTIFIER   NOT NULL,
    [MessageToProjectId]      UNIQUEIDENTIFIER   NULL,
    [MessageToObjectName]     NVARCHAR (200)     NULL,
    [MessageType]             NVARCHAR (50)      NOT NULL,
    [CreatedDateTime]         DATETIMEOFFSET (7) NOT NULL,
    [Project_ProjectConfigId] UNIQUEIDENTIFIER   NULL,
    [CustomerCode]            NVARCHAR (200)     NOT NULL,
    [RequestFromUserId]       INT                NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_RequestMessageAttachments]...';


GO
CREATE TYPE [Adm].[UDTT_RequestMessageAttachments] AS TABLE (
    [AttachmentId]                     UNIQUEIDENTIFIER NOT NULL,
    [Type]                             NVARCHAR (50)    NOT NULL,
    [Name]                             NVARCHAR (200)   NULL,
    [Uri]                              NVARCHAR (800)   NULL,
    [MessageId]                        UNIQUEIDENTIFIER NOT NULL,
    [OriginalRequestMessage_MessageId] UNIQUEIDENTIFIER NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_MssqlDbProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_MssqlDbProjectComponents] AS TABLE (
    [ServerName] NVARCHAR (200) NULL,
    [DbName]     NVARCHAR (200) NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_MssqlAgentProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_MssqlAgentProjectComponents] AS TABLE (
    [ServerName] NVARCHAR (200) NULL,
    [JobName]    NVARCHAR (200) NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_GuidList]...';


GO
CREATE TYPE [Adm].[UDTT_GuidList] AS TABLE (
    [Id] UNIQUEIDENTIFIER NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_UserActionLog]...';


GO
CREATE TYPE [Adm].[UDTT_UserActionLog] AS TABLE (
    [CreatedDate]        DATETIMEOFFSET (7) NULL,
    [EventType]          NVARCHAR (MAX)     NOT NULL,
    [UserId]             INT                NULL,
    [ApplicationName]    NVARCHAR (MAX)     NULL,
    [FrameworkElement]   NVARCHAR (MAX)     NULL,
    [DataContext]        NVARCHAR (MAX)     NULL,
    [ExtendedProperties] NVARCHAR (MAX)     NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_Log]...';


GO
CREATE TYPE [Adm].[UDTT_Log] AS TABLE (
    [CreatedDate] DATETIMEOFFSET (7) NULL,
    [MessageType] NVARCHAR (100)     NOT NULL,
    [Message]     NVARCHAR (MAX)     NOT NULL,
    [StackTrace]  NVARCHAR (MAX)     NULL);


GO
PRINT N'Creating User-Defined Table Type [Adm].[UDTT_PowerBiProjectComponents]...';


GO
CREATE TYPE [Adm].[UDTT_PowerBiProjectComponents] AS TABLE (
    [RedirectUri]        NVARCHAR (200) NULL,
    [ApplicationID]      NVARCHAR (200) NULL,
    [WorkspaceID]        NVARCHAR (200) NULL,
    [ReportServerURL]    NVARCHAR (200) NULL,
    [ReportServerFolder] NVARCHAR (200) NULL,
    [DiskFolder]         NVARCHAR (MAX) NULL,
    [ConfigType]         NVARCHAR (50)  NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [Analyst].[UDTT_ModelElementTypeAttributes]...';


GO
CREATE TYPE [Analyst].[UDTT_ModelElementTypeAttributes] AS TABLE (
    [Name]                          NVARCHAR (255) NOT NULL,
    [ModelElementAttributeTypeCode] NVARCHAR (30)  NOT NULL,
    [ExtendedProperties]            NVARCHAR (MAX) NULL);


GO
PRINT N'Creating User-Defined Table Type [Annotate].[UDTT_FieldValues]...';


GO
CREATE TYPE [Annotate].[UDTT_FieldValues] AS TABLE (
    [ModelElementId] INT            NULL,
    [FieldId]        INT            NULL,
    [Value]          NVARCHAR (MAX) NULL);


GO
PRINT N'Creating User-Defined Table Type [Annotate].[UDTT_ElementLinks]...';


GO
CREATE TYPE [Annotate].[UDTT_ElementLinks] AS TABLE (
    [ModelElementFromId] INT NULL,
    [ModelElementToId]   INT NULL,
    [LinkTypeId]         INT NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_ModelLinks]...';


GO
CREATE TYPE [BIDoc].[UDTT_ModelLinks] AS TABLE (
    [ModelLinkId]        INT            NULL,
    [ElementFromId]      INT            NOT NULL,
    [ElementToId]        INT            NOT NULL,
    [Type]               NVARCHAR (255) NULL,
    [ExtendedProperties] NVARCHAR (MAX) NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_ModelElements]...';


GO
CREATE TYPE [BIDoc].[UDTT_ModelElements] AS TABLE (
    [ModelElementId]     INT            NULL,
    [ExtendedProperties] NVARCHAR (MAX) NULL,
    [RefPath]            NVARCHAR (MAX) NULL,
    [Definition]         NVARCHAR (MAX) NULL,
    [Caption]            NVARCHAR (MAX) NULL,
    [Type]               NVARCHAR (255) NULL,
    [RefPathSuffix]      NVARCHAR (300) NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_GraphDocuments]...';


GO
CREATE TYPE [BIDoc].[UDTT_GraphDocuments] AS TABLE (
    [Content]      NVARCHAR (MAX) NULL,
    [DocumentType] NVARCHAR (50)  NOT NULL,
    [GraphNode_Id] INT            NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_BasicGraphNodes]...';


GO
CREATE TYPE [BIDoc].[UDTT_BasicGraphNodes] AS TABLE (
    [BasicGraphNodeId] INT            NOT NULL,
    [Name]             NVARCHAR (MAX) NULL,
    [NodeType]         NVARCHAR (200) NULL,
    [Description]      NVARCHAR (MAX) NULL,
    [ParentId]         INT            NULL,
    [SourceElementId]  INT            NOT NULL,
    [TopologicalOrder] INT            NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_BasicGraphLinks]...';


GO
CREATE TYPE [BIDoc].[UDTT_BasicGraphLinks] AS TABLE (
    [BasicGraphLinkId] INT           NOT NULL,
    [LinkType]         NVARCHAR (50) NOT NULL,
    [NodeFromId]       INT           NOT NULL,
    [NodeToId]         INT           NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_IdList]...';


GO
CREATE TYPE [BIDoc].[UDTT_IdList] AS TABLE (
    [Id] INT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_StringList]...';


GO
CREATE TYPE [BIDoc].[UDTT_StringList] AS TABLE (
    [Value] NVARCHAR (MAX) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_OrderedIdList]...';


GO
CREATE TYPE [BIDoc].[UDTT_OrderedIdList] AS TABLE (
    [Id]    INT NOT NULL,
    [Order] INT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [BIDoc].[UDTT_IdMap]...';


GO
CREATE TYPE [BIDoc].[UDTT_IdMap] AS TABLE (
    [Id1] INT NOT NULL,
    [Id2] INT NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [Inspect].[UDTT_sp_GetDataFlowBetweenGroups]...';


GO
CREATE TYPE [Inspect].[UDTT_sp_GetDataFlowBetweenGroups] AS TABLE (
    [SourceNodeId]    INT            NOT NULL,
    [SourceNodeName]  NVARCHAR (MAX) NULL,
    [SourceNodePath]  NVARCHAR (MAX) NULL,
    [SourceElementId] INT            NOT NULL,
    [TargetNodeId]    INT            NOT NULL,
    [TargetNodeName]  NVARCHAR (MAX) NULL,
    [TargetNodePath]  NVARCHAR (MAX) NULL,
    [TargetElementId] INT            NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [Learning].[UDTT_OlapRules]...';


GO
CREATE TYPE [Learning].[UDTT_OlapRules] AS TABLE (
    [RuleCode]    NVARCHAR (30)  NULL,
    [Support]     REAL           NULL,
    [Confidence]  REAL           NULL,
    [Premises]    NVARCHAR (MAX) NULL,
    [Conclusions] NVARCHAR (MAX) NULL,
    [ServerName]  NVARCHAR (MAX) NULL,
    [DbName]      NVARCHAR (MAX) NULL,
    [CubeName]    NVARCHAR (MAX) NULL);


GO
PRINT N'Creating Table [Adm].[RequestMessageHistory]...';


GO
CREATE TABLE [Adm].[RequestMessageHistory] (
    [MessageHistoryId]          INT                IDENTITY (1, 1) NOT NULL,
    [RequestId]                 UNIQUEIDENTIFIER   NOT NULL,
    [CacheValid]                BIT                NOT NULL,
    [CacheValidUntil]           DATETIMEOFFSET (7) NOT NULL,
    [InitMessage_MessageId]     UNIQUEIDENTIFIER   NULL,
    [ResponseMessage_MessageId] UNIQUEIDENTIFIER   NULL,
    CONSTRAINT [PK_Adm_MessageHistory] PRIMARY KEY CLUSTERED ([MessageHistoryId] ASC)
);


GO
PRINT N'Creating Table [Adm].[RequestMessageAttachments]...';


GO
CREATE TABLE [Adm].[RequestMessageAttachments] (
    [AttachmentId]                     UNIQUEIDENTIFIER NOT NULL,
    [Type]                             NVARCHAR (50)    NOT NULL,
    [Name]                             NVARCHAR (200)   NULL,
    [Uri]                              NVARCHAR (800)   NULL,
    [MessageId]                        UNIQUEIDENTIFIER NOT NULL,
    [OriginalRequestMessage_MessageId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dbo.MessageAttachments] PRIMARY KEY CLUSTERED ([AttachmentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[RequestMessages]...';


GO
CREATE TABLE [Adm].[RequestMessages] (
    [MessageDbId]             INT                IDENTITY (1, 1) NOT NULL,
    [MessageId]               UNIQUEIDENTIFIER   NOT NULL,
    [RequestId]               UNIQUEIDENTIFIER   NOT NULL,
    [Content]                 NVARCHAR (MAX)     NULL,
    [RequestForCoreType]      NVARCHAR (50)      NOT NULL,
    [RequestProcessingMethod] NVARCHAR (20)      NOT NULL,
    [MessageFromId]           UNIQUEIDENTIFIER   NOT NULL,
    [MessageOriginName]       NVARCHAR (200)     NULL,
    [MessageOriginId]         UNIQUEIDENTIFIER   NOT NULL,
    [MessageFromName]         NVARCHAR (200)     NULL,
    [MessageToObjectId]       UNIQUEIDENTIFIER   NOT NULL,
    [MessageToProjectId]      UNIQUEIDENTIFIER   NULL,
    [MessageToObjectName]     NVARCHAR (200)     NULL,
    [MessageType]             NVARCHAR (50)      NOT NULL,
    [CreatedDateTime]         DATETIMEOFFSET (7) NOT NULL,
    [Project_ProjectConfigId] UNIQUEIDENTIFIER   NULL,
    [Received]                BIT                NOT NULL,
    [CustomerCode]            NVARCHAR (200)     NULL,
    [RequestFromUserId]       INT                NULL,
    PRIMARY KEY CLUSTERED ([MessageDbId] ASC)
);


GO
PRINT N'Creating Table [Adm].[SsrsProjectComponents]...';


GO
CREATE TABLE [Adm].[SsrsProjectComponents] (
    [SsrsProjectComponentId]        INT              IDENTITY (1, 1) NOT NULL,
    [SsrsMode]                      NVARCHAR (200)   NOT NULL,
    [ServerName]                    NVARCHAR (200)   NULL,
    [SsrsServiceUrl]                NVARCHAR (MAX)   NULL,
    [SsrsExecutionServiceUrl]       NVARCHAR (MAX)   NULL,
    [FolderPath]                    NVARCHAR (MAX)   NULL,
    [SharepointBaseUrl]             NVARCHAR (MAX)   NULL,
    [SharepointFolder]              NVARCHAR (MAX)   NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dbo.SsrsProjectComponents] PRIMARY KEY CLUSTERED ([SsrsProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[SsasDbProjectComponents]...';


GO
CREATE TABLE [Adm].[SsasDbProjectComponents] (
    [SsaslDbProjectComponentId]     INT              IDENTITY (1, 1) NOT NULL,
    [ServerName]                    NVARCHAR (200)   NULL,
    [DbName]                        NVARCHAR (200)   NULL,
    [SSASType]                      NVARCHAR (20)    NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dbo.SsasDbProjectComponents] PRIMARY KEY CLUSTERED ([SsaslDbProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[SsisProjectComponents]...';


GO
CREATE TABLE [Adm].[SsisProjectComponents] (
    [SsisProjectComponentId]        INT              IDENTITY (1, 1) NOT NULL,
    [ServerName]                    NVARCHAR (200)   NULL,
    [FolderName]                    NVARCHAR (200)   NULL,
    [ProjectName]                   NVARCHAR (200)   NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Adm_SsisProjectComponents] PRIMARY KEY CLUSTERED ([SsisProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[MssqlAgentProjectComponents]...';


GO
CREATE TABLE [Adm].[MssqlAgentProjectComponents] (
    [MssqlAgentProjectComponentId]  INT              IDENTITY (1, 1) NOT NULL,
    [ServerName]                    NVARCHAR (200)   NULL,
    [JobName]                       NVARCHAR (200)   NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dbo.MssqlAgentProjectComponents] PRIMARY KEY CLUSTERED ([MssqlAgentProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[MssqlDbProjectComponents]...';


GO
CREATE TABLE [Adm].[MssqlDbProjectComponents] (
    [MssqlDbProjectComponentId]     INT              IDENTITY (1, 1) NOT NULL,
    [ServerName]                    NVARCHAR (200)   NULL,
    [DbName]                        NVARCHAR (200)   NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Adm_MssqlDbProjectComponents] PRIMARY KEY CLUSTERED ([MssqlDbProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[ProjectConfigs]...';


GO
CREATE TABLE [Adm].[ProjectConfigs] (
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    [Name]            NVARCHAR (200)   NULL,
    CONSTRAINT [PK_Adm_ProjectConfigs] PRIMARY KEY CLUSTERED ([ProjectConfigId] ASC)
);


GO
PRINT N'Creating Table [Adm].[GlobalConfig]...';


GO
CREATE TABLE [Adm].[GlobalConfig] (
    [GlobalConfigId] INT            IDENTITY (1, 1) NOT NULL,
    [Key]            NVARCHAR (200) NOT NULL,
    [Value]          NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Adm_GlobalConfig] PRIMARY KEY CLUSTERED ([GlobalConfigId] ASC)
);


GO
PRINT N'Creating Index [Adm].[GlobalConfig].[IX_Adm_GlobalConfig_Project_Key]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Adm_GlobalConfig_Project_Key]
    ON [Adm].[GlobalConfig]([Key] ASC);


GO
PRINT N'Creating Table [Adm].[Log]...';


GO
CREATE TABLE [Adm].[Log] (
    [LogId]       INT                IDENTITY (1, 1) NOT NULL,
    [CreatedDate] DATETIMEOFFSET (7) NULL,
    [MessageType] NVARCHAR (100)     NOT NULL,
    [Message]     NVARCHAR (MAX)     NOT NULL,
    [StackTrace]  NVARCHAR (MAX)     NULL,
    CONSTRAINT [PK_Adm_Log] PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating Table [Adm].[Users]...';


GO
CREATE TABLE [Adm].[Users] (
    [UserId]      INT            IDENTITY (1, 1) NOT NULL,
    [Identity]    NVARCHAR (300) NOT NULL,
    [DisplayName] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Adm_Users] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UI_Adm_Users] UNIQUE NONCLUSTERED ([Identity] ASC)
);


GO
PRINT N'Creating Table [Adm].[RolePermissions]...';


GO
CREATE TABLE [Adm].[RolePermissions] (
    [RolePermissionId] INT IDENTITY (1, 1) NOT NULL,
    [RoleId]           INT NOT NULL,
    [PermissionId]     INT NOT NULL,
    CONSTRAINT [PK_Adm_RolePermissions] PRIMARY KEY CLUSTERED ([RolePermissionId] ASC)
);


GO
PRINT N'Creating Table [Adm].[UserRoles]...';


GO
CREATE TABLE [Adm].[UserRoles] (
    [UserRoleId] INT IDENTITY (1, 1) NOT NULL,
    [UserId]     INT NOT NULL,
    [RoleId]     INT NOT NULL,
    CONSTRAINT [PK_Adm_UserRoles] PRIMARY KEY CLUSTERED ([UserRoleId] ASC)
);


GO
PRINT N'Creating Table [Adm].[Permissions]...';


GO
CREATE TABLE [Adm].[Permissions] (
    [PermissionId]    INT            IDENTITY (1, 1) NOT NULL,
    [PermissionName]  NVARCHAR (300) NOT NULL,
    [PermissionScope] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Adm_Permissions] PRIMARY KEY CLUSTERED ([PermissionId] ASC)
);


GO
PRINT N'Creating Table [Adm].[Roles]...';


GO
CREATE TABLE [Adm].[Roles] (
    [RoleId]          INT              IDENTITY (1, 1) NOT NULL,
    [RoleName]        NVARCHAR (300)   NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_Adm_Roles] PRIMARY KEY CLUSTERED ([RoleId] ASC),
    CONSTRAINT [UI_Adm_Roles_RoleName_ProjectConfigId] UNIQUE NONCLUSTERED ([RoleName] ASC, [ProjectConfigId] ASC)
);


GO
PRINT N'Creating Table [Adm].[RequestsWaitFor]...';


GO
CREATE TABLE [Adm].[RequestsWaitFor] (
    [RequestsWiaitForItemId] INT              IDENTITY (1, 1) NOT NULL,
    [RequestId]              UNIQUEIDENTIFIER NOT NULL,
    [WaitForRequestId]       UNIQUEIDENTIFIER NOT NULL,
    [Active]                 BIT              NOT NULL,
    CONSTRAINT [PK_Adm_RequestsWaitFor] PRIMARY KEY CLUSTERED ([RequestsWiaitForItemId] ASC)
);


GO
PRINT N'Creating Index [Adm].[RequestsWaitFor].[IX_Adm_RequestsWaitFor_RequestId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Adm_RequestsWaitFor_RequestId]
    ON [Adm].[RequestsWaitFor]([RequestId] ASC) WHERE [Active] = 1;


GO
PRINT N'Creating Index [Adm].[RequestsWaitFor].[IX_Adm_RequestsWaitFor_WaitForRequestId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Adm_RequestsWaitFor_WaitForRequestId]
    ON [Adm].[RequestsWaitFor]([WaitForRequestId] ASC) WHERE [Active] = 1;


GO
PRINT N'Creating Table [Adm].[BroadcastMessages]...';


GO
CREATE TABLE [Adm].[BroadcastMessages] (
    [BroadcastMessageId]   UNIQUEIDENTIFIER NOT NULL,
    [BroadcastMessageType] NVARCHAR (200)   NOT NULL,
    [ProjectConfigId]      UNIQUEIDENTIFIER NULL,
    [Active]               BIT              NOT NULL,
    [Content]              NVARCHAR (MAX)   NOT NULL,
    [CreatedTime]          DATETIME         NULL,
    CONSTRAINT [PK_Adm_BroadcastMessages] PRIMARY KEY CLUSTERED ([BroadcastMessageId] ASC)
);


GO
PRINT N'Creating Table [Adm].[ProcedureExecutionQueue]...';


GO
CREATE TABLE [Adm].[ProcedureExecutionQueue] (
    [ProcedureExecutionQueueId] INT              IDENTITY (1, 1) NOT NULL,
    [ProcedureName]             NVARCHAR (MAX)   NULL,
    [ProjectConfigId]           UNIQUEIDENTIFIER NULL,
    [RequestId]                 UNIQUEIDENTIFIER NULL,
    PRIMARY KEY CLUSTERED ([ProcedureExecutionQueueId] ASC)
);


GO
PRINT N'Creating Table [Adm].[UserActionLog]...';


GO
CREATE TABLE [Adm].[UserActionLog] (
    [UserActionLogId]    INT                IDENTITY (1, 1) NOT NULL,
    [CreatedDate]        DATETIMEOFFSET (7) NULL,
    [EventType]          NVARCHAR (MAX)     NOT NULL,
    [UserId]             INT                NULL,
    [ApplicationName]    NVARCHAR (MAX)     NULL,
    [FrameworkElement]   NVARCHAR (MAX)     NULL,
    [DataContext]        NVARCHAR (MAX)     NULL,
    [ExtendedProperties] NVARCHAR (MAX)     NULL,
    CONSTRAINT [PK_Adm_UserActionLog] PRIMARY KEY CLUSTERED ([UserActionLogId] ASC)
);


GO
PRINT N'Creating Table [Adm].[PowerBiProjectComponents]...';


GO
CREATE TABLE [Adm].[PowerBiProjectComponents] (
    [PowerBiProjectComponentId]     INT              IDENTITY (1, 1) NOT NULL,
    [RedirectUri]                   NVARCHAR (200)   NULL,
    [ApplicationID]                 NVARCHAR (200)   NULL,
    [WorkspaceID]                   NVARCHAR (200)   NULL,
    [ReportServerURL]               NVARCHAR (200)   NULL,
    [ReportServerFolder]            NVARCHAR (200)   NULL,
    [DiskFolder]                    NVARCHAR (MAX)   NULL,
    [ConfigType]                    NVARCHAR (50)    NULL,
    [ProjectConfig_ProjectConfigId] UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_dbo.PowerBiProjectComponents] PRIMARY KEY CLUSTERED ([PowerBiProjectComponentId] ASC)
);


GO
PRINT N'Creating Table [Adm].[DatabaseVersions]...';


GO
CREATE TABLE [Adm].[DatabaseVersions] (
    [DatabaseVersionId] INT IDENTITY (1, 1) NOT NULL,
    [VersionNumber]     INT NOT NULL,
    CONSTRAINT [PK_Adm_DatabaseVersions] PRIMARY KEY CLUSTERED ([DatabaseVersionId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelElementAttributes]...';


GO
CREATE TABLE [Analyst].[ModelElementAttributes] (
    [ModelElementAttributeId]     INT            IDENTITY (1, 1) NOT NULL,
    [RefPath]                     NVARCHAR (MAX) NULL,
    [Value]                       NVARCHAR (MAX) NULL,
    [ModelElementId]              INT            NOT NULL,
    [ModelElementTypeAttributeId] INT            NOT NULL,
    [ObjectId]                    INT            NOT NULL,
    CONSTRAINT [PK_Analyst_ModelElementAttributes] PRIMARY KEY CLUSTERED ([ModelElementAttributeId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelElementTypeAttributes]...';


GO
CREATE TABLE [Analyst].[ModelElementTypeAttributes] (
    [ModelElementTypeAttributeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                        NVARCHAR (255) NOT NULL,
    [ModelElementTypeId]          INT            NOT NULL,
    [ModelElementAttributeTypeId] INT            NOT NULL,
    [ExtendedProperties]          NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Analyst_ModelElementTypeAttributes] PRIMARY KEY CLUSTERED ([ModelElementTypeAttributeId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelElementAttributeTypes]...';


GO
CREATE TABLE [Analyst].[ModelElementAttributeTypes] (
    [ModelElementAttributeTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]                        NVARCHAR (MAX) NOT NULL,
    [Code]                        NVARCHAR (30)  NOT NULL,
    CONSTRAINT [PK_Analyst_ModelElementAttributeTypes] PRIMARY KEY CLUSTERED ([ModelElementAttributeTypeId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[Objects]...';


GO
CREATE TABLE [Analyst].[Objects] (
    [ObjectId]                 INT                IDENTITY (1, 1) NOT NULL,
    [Created]                  DATETIMEOFFSET (7) NOT NULL,
    [ValidTo]                  DATETIMEOFFSET (7) NULL,
    [IsCurrent]                BIT                NOT NULL,
    [IsDeleted]                BIT                NOT NULL,
    [Author_UserId]            INT                NULL,
    [PreviousVersion_ObjectId] INT                NULL,
    CONSTRAINT [PK_Analyst_Objects] PRIMARY KEY CLUSTERED ([ObjectId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelLinkTypes]...';


GO
CREATE TABLE [Analyst].[ModelLinkTypes] (
    [ModelLinkTypeId] INT              IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (MAX)   NOT NULL,
    [Code]            NVARCHAR (30)    NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Analyst_ModelLinkTypes] PRIMARY KEY CLUSTERED ([ModelLinkTypeId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelElementTypes]...';


GO
CREATE TABLE [Analyst].[ModelElementTypes] (
    [ModelElementTypeId] INT              IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (MAX)   NOT NULL,
    [ProjectConfigId]    UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Analyst_ModelElementTypes] PRIMARY KEY CLUSTERED ([ModelElementTypeId] ASC)
);


GO
PRINT N'Creating Table [Analyst].[ModelLinks]...';


GO
CREATE TABLE [Analyst].[ModelLinks] (
    [ModelLinkId]                 INT IDENTITY (1, 1) NOT NULL,
    [ElementFromId]               INT NOT NULL,
    [ElementToId]                 INT NOT NULL,
    [ModelLinkTypeId]             INT NOT NULL,
    [ModelElementTypeAttributeId] INT NULL,
    [ObjectId]                    INT NOT NULL,
    CONSTRAINT [PK_Analyst_ModelLinks] PRIMARY KEY CLUSTERED ([ModelLinkId] ASC)
);


GO
PRINT N'Creating Index [Analyst].[ModelLinks].[IX_Analyst_ModelLinks_ElementFromId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Analyst_ModelLinks_ElementFromId]
    ON [Analyst].[ModelLinks]([ElementFromId] ASC, [ModelLinkTypeId] ASC);


GO
PRINT N'Creating Index [Analyst].[ModelLinks].[IX_Analyst_ModelLinks_ElementToId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Analyst_ModelLinks_ElementToId]
    ON [Analyst].[ModelLinks]([ElementToId] ASC, [ModelLinkTypeId] ASC);


GO
PRINT N'Creating Table [Analyst].[ModelElements]...';


GO
CREATE TABLE [Analyst].[ModelElements] (
    [ModelElementId]     INT              IDENTITY (1, 1) NOT NULL,
    [RefPath]            NVARCHAR (MAX)   NULL,
    [Name]               NVARCHAR (MAX)   NULL,
    [ModelElementTypeId] INT              NOT NULL,
    [ProjectConfigId]    UNIQUEIDENTIFIER NOT NULL,
    [ObjectId]           INT              NOT NULL,
    CONSTRAINT [PK_Analyst_ModelElements] PRIMARY KEY CLUSTERED ([ModelElementId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[AnnotationElements]...';


GO
CREATE TABLE [Annotate].[AnnotationElements] (
    [AnnotationElementId] INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]     UNIQUEIDENTIFIER NOT NULL,
    [ModelElementId]      INT              NULL,
    [RefPath]             NVARCHAR (MAX)   NULL,
    [Name]                NVARCHAR (MAX)   NULL,
    [CreatedBy]           INT              NOT NULL,
    [UpdatedBy]           INT              NOT NULL,
    [VersionNumber]       INT              NOT NULL,
    [IsCurrentVersion]    BIT              NOT NULL,
    [Date]                DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([AnnotationElementId] ASC)
);


GO
PRINT N'Creating Index [Annotate].[AnnotationElements].[IX_AnnotationElements_CurrentVersion]...';


GO
CREATE NONCLUSTERED INDEX [IX_AnnotationElements_CurrentVersion]
    ON [Annotate].[AnnotationElements]([ModelElementId] ASC)
    INCLUDE([AnnotationElementId]) WHERE [IsCurrentVersion] = 1;


GO
PRINT N'Creating Table [Annotate].[FieldValues]...';


GO
CREATE TABLE [Annotate].[FieldValues] (
    [FieldValueId]        INT            IDENTITY (1, 1) NOT NULL,
    [FieldId]             INT            NOT NULL,
    [AnnotationElementId] INT            NOT NULL,
    [Value]               NVARCHAR (MAX) NULL,
    [UpdatedVersion]      INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([FieldValueId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[AnnotationViewFields]...';


GO
CREATE TABLE [Annotate].[AnnotationViewFields] (
    [AnnotationViewFieldId] INT IDENTITY (1, 1) NOT NULL,
    [AnnotationViewId]      INT NOT NULL,
    [FieldId]               INT NOT NULL,
    [FieldOrder]            INT NOT NULL,
    PRIMARY KEY CLUSTERED ([AnnotationViewFieldId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[AnnotationViews]...';


GO
CREATE TABLE [Annotate].[AnnotationViews] (
    [AnnotationViewId] INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]  UNIQUEIDENTIFIER NOT NULL,
    [ViewName]         NVARCHAR (255)   NULL,
    PRIMARY KEY CLUSTERED ([AnnotationViewId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[Fields]...';


GO
CREATE TABLE [Annotate].[Fields] (
    [FieldId]         INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    [FieldName]       NVARCHAR (255)   NULL,
    [Deleted]         BIT              NULL,
    PRIMARY KEY CLUSTERED ([FieldId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[ElementLinks]...';


GO
CREATE TABLE [Annotate].[ElementLinks] (
    [ElementLinkId]           INT IDENTITY (1, 1) NOT NULL,
    [LinkTypeId]              INT NOT NULL,
    [AnnotationElementFromId] INT NOT NULL,
    [AnnotationElementToId]   INT NOT NULL,
    [UpdatedVersion]          INT NOT NULL,
    PRIMARY KEY CLUSTERED ([ElementLinkId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[LinkTypes]...';


GO
CREATE TABLE [Annotate].[LinkTypes] (
    [LinkTypeId]      INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    [LinkTypeName]    NVARCHAR (255)   NULL,
    [Deleted]         BIT              NULL,
    PRIMARY KEY CLUSTERED ([LinkTypeId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[AnnotationElementDescriptivePaths]...';


GO
CREATE TABLE [Annotate].[AnnotationElementDescriptivePaths] (
    [AnnotationElementId] INT            NOT NULL,
    [DescriptivePath]     NVARCHAR (MAX) NULL,
    [DescriptiveRootPath] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_Annotate_AnnotationElementDescriptivePaths] PRIMARY KEY CLUSTERED ([AnnotationElementId] ASC)
);


GO
PRINT N'Creating Table [Annotate].[AnnotationElementTypeDescriptions]...';


GO
CREATE TABLE [Annotate].[AnnotationElementTypeDescriptions] (
    [AnnotationElementTypeDescriptionsId] INT            IDENTITY (1, 1) NOT NULL,
    [ElementType]                         NVARCHAR (255) NULL,
    [TypeDescription]                     NVARCHAR (255) NULL,
    CONSTRAINT [PK_Annotate.AnnotationElementTypeDescriptions] PRIMARY KEY CLUSTERED ([AnnotationElementTypeDescriptionsId] ASC)
);


GO
PRINT N'Creating Index [Annotate].[AnnotationElementTypeDescriptions].[IX_AnnotationElementTypeDescriptions_ElementType]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AnnotationElementTypeDescriptions_ElementType]
    ON [Annotate].[AnnotationElementTypeDescriptions]([ElementType] ASC)
    INCLUDE([TypeDescription]);


GO
PRINT N'Creating Table [BIDoc].[GraphDocuments]...';


GO
CREATE TABLE [BIDoc].[GraphDocuments] (
    [GraphDocumentId] INT            IDENTITY (1, 1) NOT NULL,
    [Content]         NVARCHAR (MAX) NULL,
    [DocumentType]    NVARCHAR (50)  NOT NULL,
    [GraphNode_Id]    INT            NULL,
    CONSTRAINT [PK_dbo.GraphDocuments] PRIMARY KEY CLUSTERED ([GraphDocumentId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[BasicGraphLinks]...';


GO
CREATE TABLE [BIDoc].[BasicGraphLinks] (
    [BasicGraphLinkId]   INT            IDENTITY (1, 1) NOT NULL,
    [LinkType]           NVARCHAR (50)  NOT NULL,
    [NodeFromId]         INT            NOT NULL,
    [NodeToId]           INT            NOT NULL,
    [ExtendedProperties] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.BasicGraphLinks] PRIMARY KEY CLUSTERED ([BasicGraphLinkId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphLinks].[IX_BIDoc_BasicGraphLinks_NodeFromId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphLinks_NodeFromId]
    ON [BIDoc].[BasicGraphLinks]([NodeFromId] ASC, [LinkType] ASC);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphLinks].[IX_BIDoc_BasicGraphLinks_NodeToId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphLinks_NodeToId]
    ON [BIDoc].[BasicGraphLinks]([NodeToId] ASC, [LinkType] ASC);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphLinks].[IX_BIDoc_BasicGraphLinks_LinkType]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphLinks_LinkType]
    ON [BIDoc].[BasicGraphLinks]([LinkType] ASC)
    INCLUDE([NodeFromId], [NodeToId]);


GO
PRINT N'Creating Table [BIDoc].[BasicGraphNodes]...';


GO
CREATE TABLE [BIDoc].[BasicGraphNodes] (
    [BasicGraphNodeId]     INT              IDENTITY (1, 1) NOT NULL,
    [Name]                 NVARCHAR (MAX)   NULL,
    [NodeType]             NVARCHAR (200)   NULL,
    [Description]          NVARCHAR (MAX)   NULL,
    [ParentId]             INT              NULL,
    [GraphKind]            NVARCHAR (50)    NOT NULL,
    [ProjectConfigId]      UNIQUEIDENTIFIER NOT NULL,
    [SourceElementId]      INT              NOT NULL,
    [TopologicalOrder]     INT              NULL,
    [RefPathIntervalStart] INT              NOT NULL,
    [RefPathIntervalEnd]   INT              NOT NULL,
    CONSTRAINT [PK_Adm_BasicGraphNodes] PRIMARY KEY CLUSTERED ([BasicGraphNodeId] ASC)
);


GO
PRINT N'Creating Index [BIdoc].[BasicGraphNodes].[IX_BIDoc_BasicGraphNodes_GraphKind_SourceElement]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphNodes_GraphKind_SourceElement]
    ON [BIDoc].[BasicGraphNodes]([GraphKind] ASC, [SourceElementId] ASC);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphNodes].[IX_BIDoc_BasicGraphNodes_GrphKind_NodeType_ProjectConfigId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphNodes_GrphKind_NodeType_ProjectConfigId]
    ON [BIDoc].[BasicGraphNodes]([GraphKind] ASC, [ProjectConfigId] ASC, [NodeType] ASC)
    INCLUDE([BasicGraphNodeId], [SourceElementId]);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphNodes].[IX_BIDoc_BasicGraphNodes_GrphKind_ProjectConfigId_RefPathIntervalStart]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphNodes_GrphKind_ProjectConfigId_RefPathIntervalStart]
    ON [BIDoc].[BasicGraphNodes]([GraphKind] ASC, [ProjectConfigId] ASC, [RefPathIntervalStart] ASC)
    INCLUDE([BasicGraphNodeId], [SourceElementId], [Name], [Description], [ParentId], [NodeType]);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphNodes].[IX_BIDoc_BasicGraphNodes_GrphKind_ProjectConfigId_NodeType_RefPathIntervalStart]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphNodes_GrphKind_ProjectConfigId_NodeType_RefPathIntervalStart]
    ON [BIDoc].[BasicGraphNodes]([GraphKind] ASC, [ProjectConfigId] ASC, [NodeType] ASC, [RefPathIntervalStart] ASC)
    INCLUDE([BasicGraphNodeId], [SourceElementId], [Name], [Description], [ParentId]);


GO
PRINT N'Creating Index [BIDoc].[BasicGraphNodes].[IX_BIDoc_BasicGraphNodes_ParentId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_BasicGraphNodes_ParentId]
    ON [BIDoc].[BasicGraphNodes]([ParentId] ASC);


GO
PRINT N'Creating Table [BIDoc].[ModelElements]...';


GO
CREATE TABLE [BIDoc].[ModelElements] (
    [ModelElementId]       INT              IDENTITY (1, 1) NOT NULL,
    [ExtendedProperties]   NVARCHAR (MAX)   NULL,
    [RefPath]              NVARCHAR (MAX)   NULL,
    [Definition]           NVARCHAR (MAX)   NULL,
    [Caption]              NVARCHAR (MAX)   NULL,
    [Type]                 NVARCHAR (255)   NULL,
    [ProjectConfigId]      UNIQUEIDENTIFIER NOT NULL,
    [RefPathPrefix]        NVARCHAR (300)   NULL,
    [RefPathIntervalStart] INT              NOT NULL,
    [RefPathIntervalEnd]   INT              NOT NULL,
    [RefPathSuffix]        NVARCHAR (300)   NULL,
    [SubtreeContent]       NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_dbo.BIDocModelElements] PRIMARY KEY CLUSTERED ([ModelElementId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[ModelElements].[IX_ModelElements_ProjectConfigId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ModelElements_ProjectConfigId]
    ON [BIDoc].[ModelElements]([ProjectConfigId] ASC, [RefPathPrefix] ASC)
    INCLUDE([RefPath], [Type]);


GO
PRINT N'Creating Index [BIDoc].[ModelElements].[IX_ModelElements_Project_Type]...';


GO
CREATE NONCLUSTERED INDEX [IX_ModelElements_Project_Type]
    ON [BIDoc].[ModelElements]([ProjectConfigId] ASC, [Type] ASC)
    INCLUDE([ModelElementId]);


GO
PRINT N'Creating Index [BIDoc].[ModelElements].[ModelElements_RefPath]...';


GO
CREATE NONCLUSTERED INDEX [ModelElements_RefPath]
    ON [BIDoc].[ModelElements]([ProjectConfigId] ASC)
    INCLUDE([RefPath]);


GO
PRINT N'Creating Index [BIDoc].[ModelElements].[IX_BIDoc_ModelElements_ProjectConfigId_RefPathIntervalStart]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_ModelElements_ProjectConfigId_RefPathIntervalStart]
    ON [BIDoc].[ModelElements]([ProjectConfigId] ASC, [RefPathIntervalStart] ASC)
    INCLUDE([ExtendedProperties], [RefPath], [Caption], [Type]);


GO
PRINT N'Creating Index [BIDoc].[ModelElements].[IX_BIDoc_ModelElements_ModelElementId_Type]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_ModelElements_ModelElementId_Type]
    ON [BIDoc].[ModelElements]([ModelElementId] ASC, [Type] ASC)
    INCLUDE([ExtendedProperties], [RefPath], [Caption]);


GO
PRINT N'Creating Table [BIDoc].[ModelElementTypeDescriptions]...';


GO
CREATE TABLE [BIDoc].[ModelElementTypeDescriptions] (
    [ModelElementTypeDescriptionsId] INT            IDENTITY (1, 1) NOT NULL,
    [ElementType]                    NVARCHAR (255) NULL,
    [TypeDescription]                NVARCHAR (255) NULL,
    CONSTRAINT [PK_BIDoc.ModelElementTypeDescriptions] PRIMARY KEY CLUSTERED ([ModelElementTypeDescriptionsId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[ModelElementTypeDescriptions].[IX_ModelElementTypeDescriptions_ElementType]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ModelElementTypeDescriptions_ElementType]
    ON [BIDoc].[ModelElementTypeDescriptions]([ElementType] ASC)
    INCLUDE([TypeDescription]);


GO
PRINT N'Creating Table [BIDoc].[DataMessages]...';


GO
CREATE TABLE [BIDoc].[DataMessages] (
    [MessageId]          INT            IDENTITY (1, 1) NOT NULL,
    [SourceElementId]    INT            NULL,
    [TargetElementId]    INT            NULL,
    [Message]            NVARCHAR (MAX) NOT NULL,
    [DataMessagesTypeId] INT            NOT NULL,
    CONSTRAINT [PK_BIDoc_DataMessages] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[DataTypes]...';


GO
CREATE TABLE [BIDoc].[DataTypes] (
    [DataTypesId]  INT           IDENTITY (1, 1) NOT NULL,
    [DataTypeName] NVARCHAR (30) NOT NULL,
    CONSTRAINT [PK_BIDoc_BIDocDataTypes] PRIMARY KEY CLUSTERED ([DataTypesId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[SourceDataTypes]...';


GO
CREATE TABLE [BIDoc].[SourceDataTypes] (
    [SourceDataTypesId]  INT           IDENTITY (1, 1) NOT NULL,
    [SourceName]         NVARCHAR (30) NOT NULL,
    [SourceDataTypeName] NVARCHAR (30) NOT NULL,
    [DataTypeId]         INT           NOT NULL,
    CONSTRAINT [PK_BIDoc_BIDocSourceDataTypes] PRIMARY KEY CLUSTERED ([SourceDataTypesId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[ModelElementDescriptivePaths]...';


GO
CREATE TABLE [BIDoc].[ModelElementDescriptivePaths] (
    [ModelElementId]      INT            NOT NULL,
    [DescriptivePath]     NVARCHAR (MAX) NULL,
    [DescriptiveRootPath] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_BIDoc_ModelElementDescriptivePaths] PRIMARY KEY CLUSTERED ([ModelElementId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[ModelElementTypeClasses]...';


GO
CREATE TABLE [BIDoc].[ModelElementTypeClasses] (
    [ModelElementTypeClassId] INT            IDENTITY (1, 1) NOT NULL,
    [ElementType]             NVARCHAR (255) NULL,
    [ClassCode]               NVARCHAR (50)  NOT NULL,
    CONSTRAINT [PK_BIDoc.ModelElementTypeClasses] PRIMARY KEY CLUSTERED ([ModelElementTypeClassId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[ModelElementTypeClasses].[IX_ModelElementTypeClasses_ElementType_ClassCode]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ModelElementTypeClasses_ElementType_ClassCode]
    ON [BIDoc].[ModelElementTypeClasses]([ElementType] ASC)
    INCLUDE([ClassCode]);


GO
PRINT N'Creating Table [BIDoc].[ModelElementTypeDetailLevels]...';


GO
CREATE TABLE [BIDoc].[ModelElementTypeDetailLevels] (
    [ModelElementTypeDetailLevelId] INT            IDENTITY (1, 1) NOT NULL,
    [ElementType]                   NVARCHAR (255) NULL,
    [DetailLevel]                   INT            NOT NULL,
    CONSTRAINT [PK_BIDoc.ModelElementTypeDetailLevels] PRIMARY KEY CLUSTERED ([ModelElementTypeDetailLevelId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[ModelElementTypeDetailLevels].[IX_ModelElementTypeDetailLevels_ElementType]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_ModelElementTypeDetailLevels_ElementType]
    ON [BIDoc].[ModelElementTypeDetailLevels]([ElementType] ASC)
    INCLUDE([DetailLevel]);


GO
PRINT N'Creating Table [BIDoc].[HigherLevelElementAncestors]...';


GO
CREATE TABLE [BIDoc].[HigherLevelElementAncestors] (
    [HigherLevelElementAncestorsId] INT IDENTITY (1, 1) NOT NULL,
    [SouceElementId]                INT NOT NULL,
    [AncestorElementId]             INT NOT NULL,
    [SouceDfNodeId]                 INT NOT NULL,
    [AncestorDfNodeId]              INT NOT NULL,
    [DetailLevel]                   INT NOT NULL,
    CONSTRAINT [PK_HigherLevelElementAncestors] PRIMARY KEY CLUSTERED ([HigherLevelElementAncestorsId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[HigherLevelElementAncestors].[IX_HigherLevelElementAncestors_SouceModelElementId_DetailLevel]...';


GO
CREATE NONCLUSTERED INDEX [IX_HigherLevelElementAncestors_SouceModelElementId_DetailLevel]
    ON [BIDoc].[HigherLevelElementAncestors]([SouceElementId] ASC, [DetailLevel] ASC)
    INCLUDE([AncestorElementId]);


GO
PRINT N'Creating Index [BIDoc].[HigherLevelElementAncestors].[IX_HigherLevelElementAncestors_AncestorElementId]...';


GO
CREATE NONCLUSTERED INDEX [IX_HigherLevelElementAncestors_AncestorElementId]
    ON [BIDoc].[HigherLevelElementAncestors]([AncestorElementId] ASC);


GO
PRINT N'Creating Table [BIDoc].[DataMessagesType]...';


GO
CREATE TABLE [BIDoc].[DataMessagesType] (
    [DataMessagesTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [DataMessageType]    NVARCHAR (100) NOT NULL,
    [DataMessageCode]    NVARCHAR (10)  NOT NULL,
    CONSTRAINT [PK_BIDoc_DataMessagesType] PRIMARY KEY CLUSTERED ([DataMessagesTypeId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[ModelLinks]...';


GO
CREATE TABLE [BIDoc].[ModelLinks] (
    [ModelLinkId]        INT            IDENTITY (1, 1) NOT NULL,
    [ElementFromId]      INT            NOT NULL,
    [ElementToId]        INT            NOT NULL,
    [Type]               NVARCHAR (255) NULL,
    [ExtendedProperties] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_BIDoc_BIDocModelLinks] PRIMARY KEY CLUSTERED ([ModelLinkId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[ModelLinks].[IX_BIDoc_ModelLinks_ElementFromId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_ModelLinks_ElementFromId]
    ON [BIDoc].[ModelLinks]([ElementFromId] ASC, [Type] ASC);


GO
PRINT N'Creating Index [BIDoc].[ModelLinks].[IX_BIDoc_ModelLinks_ElementToId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_ModelLinks_ElementToId]
    ON [BIDoc].[ModelLinks]([ElementToId] ASC, [Type] ASC);


GO
PRINT N'Creating Table [BIDoc].[SequenceEndpointTypes]...';


GO
CREATE TABLE [BIDoc].[SequenceEndpointTypes] (
    [SequenceEndpointTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [TypeName]               NVARCHAR (255) NULL,
    CONSTRAINT [PK_BIDoc_SequenceEndpointTypes] PRIMARY KEY CLUSTERED ([SequenceEndpointTypeId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[HighLevelTypeDescendants]...';


GO
CREATE TABLE [BIDoc].[HighLevelTypeDescendants] (
    [HighLevelTypeDescendantId] INT            IDENTITY (1, 1) NOT NULL,
    [ParentType]                NVARCHAR (300) NOT NULL,
    [DescendantType]            NVARCHAR (300) NOT NULL,
    [NodeType]                  NVARCHAR (300) NOT NULL,
    PRIMARY KEY CLUSTERED ([HighLevelTypeDescendantId] ASC)
);


GO
PRINT N'Creating Table [BIDoc].[LineageGridHistory]...';


GO
CREATE TABLE [BIDoc].[LineageGridHistory] (
    [LineageGridHistoryId]  INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]       UNIQUEIDENTIFIER NOT NULL,
    [SourceRootElementPath] NVARCHAR (MAX)   NOT NULL,
    [TargetRootElementPath] NVARCHAR (MAX)   NOT NULL,
    [SourceElementType]     NVARCHAR (MAX)   NOT NULL,
    [TargetElementType]     NVARCHAR (MAX)   NOT NULL,
    [SourceRootElementId]   INT              NULL,
    [TargetRootElementId]   INT              NULL,
    [CreatedDateTime]       DATETIME         NOT NULL,
    [UserId]                INT              NOT NULL,
    CONSTRAINT [PK_BIDoc_LineageGridHistory] PRIMARY KEY CLUSTERED ([LineageGridHistoryId] ASC)
);


GO
PRINT N'Creating Index [BIDoc].[LineageGridHistory].[IX_BIDoc_LineageGridHistory_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BIDoc_LineageGridHistory_UserId]
    ON [BIDoc].[LineageGridHistory]([UserId] ASC);


GO
PRINT N'Creating Table [Inspect].[HighLevelSolutionTrees]...';


GO
CREATE TABLE [Inspect].[HighLevelSolutionTrees] (
    [HighLevelSolutionTreeId] INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]         UNIQUEIDENTIFIER NOT NULL,
    [ModelElementId]          INT              NULL,
    [Caption]                 NVARCHAR (MAX)   NULL,
    [Type]                    NVARCHAR (MAX)   NULL,
    [TypeDescription]         NVARCHAR (MAX)   NULL,
    [MaxParentLevel]          INT              NULL,
    [ParentElementId]         INT              NULL,
    [RefPath]                 NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Inspect_HighLevelSolutionTrees] PRIMARY KEY CLUSTERED ([HighLevelSolutionTreeId] ASC)
);


GO
PRINT N'Creating Index [Inspect].[HighLevelSolutionTrees].[IX_HighLevelSolutionTrees_ProjectConfigId]...';


GO
CREATE NONCLUSTERED INDEX [IX_HighLevelSolutionTrees_ProjectConfigId]
    ON [Inspect].[HighLevelSolutionTrees]([ProjectConfigId] ASC);


GO
PRINT N'Creating Table [Learning].[OlapRuleConclusions]...';


GO
CREATE TABLE [Learning].[OlapRuleConclusions] (
    [OlapRuleConclusionId] INT IDENTITY (1, 1) NOT NULL,
    [OlapRuleId]           INT NULL,
    [OlapFieldId]          INT NULL,
    CONSTRAINT [PK_Learning_OlapRuleConclusions] PRIMARY KEY CLUSTERED ([OlapRuleConclusionId] ASC)
);


GO
PRINT N'Creating Table [Learning].[OlapRulePremises]...';


GO
CREATE TABLE [Learning].[OlapRulePremises] (
    [OlapRulePremiseId] INT IDENTITY (1, 1) NOT NULL,
    [OlapRuleId]        INT NULL,
    [OlapFieldId]       INT NULL,
    CONSTRAINT [PK_Learning_OlapRulePremises] PRIMARY KEY CLUSTERED ([OlapRulePremiseId] ASC)
);


GO
PRINT N'Creating Table [Learning].[OlapRules]...';


GO
CREATE TABLE [Learning].[OlapRules] (
    [OlapRuleId]      INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    [RuleCode]        NVARCHAR (30)    NOT NULL,
    [Confidence]      REAL             NOT NULL,
    [Support]         REAL             NOT NULL,
    [ServerName]      NVARCHAR (MAX)   NULL,
    [DbName]          NVARCHAR (MAX)   NULL,
    [CubeName]        NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Learning_OlapRules] PRIMARY KEY CLUSTERED ([OlapRuleId] ASC)
);


GO
PRINT N'Creating Table [Learning].[OlapQueryFields]...';


GO
CREATE TABLE [Learning].[OlapQueryFields] (
    [OlapQueryFieldId] INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]  UNIQUEIDENTIFIER NULL,
    [QueryElementId]   INT              NULL,
    [OlapFieldId]      INT              NULL,
    CONSTRAINT [PK_Learning_OlapQueryFields] PRIMARY KEY CLUSTERED ([OlapQueryFieldId] ASC)
);


GO
PRINT N'Creating Table [Learning].[OlapFields]...';


GO
CREATE TABLE [Learning].[OlapFields] (
    [OlapFieldId]     INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NULL,
    [FieldElementId]  INT              NULL,
    [FieldType]       NVARCHAR (30)    NULL,
    [FieldReference]  NVARCHAR (MAX)   NULL,
    [FieldName]       NVARCHAR (MAX)   NULL,
    [ServerName]      NVARCHAR (MAX)   NULL,
    [DbName]          NVARCHAR (MAX)   NULL,
    [CubeName]        NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Learning_OlapFields] PRIMARY KEY CLUSTERED ([OlapFieldId] ASC)
);


GO
PRINT N'Creating Table [Learning].[OlapFieldReferences]...';


GO
CREATE TABLE [Learning].[OlapFieldReferences] (
    [OlapFieldReferenceId]    INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId]         UNIQUEIDENTIFIER NULL,
    [QueryElementId]          INT              NULL,
    [FieldElementId]          INT              NULL,
    [ReferenceElementId]      INT              NULL,
    [FieldType]               NVARCHAR (30)    NULL,
    [FieldReference]          NVARCHAR (MAX)   NULL,
    [FieldName]               NVARCHAR (MAX)   NULL,
    [QueryElementRefPath]     NVARCHAR (MAX)   NULL,
    [ReferenceElementRefPath] NVARCHAR (MAX)   NULL,
    [ServerName]              NVARCHAR (MAX)   NULL,
    [DbName]                  NVARCHAR (MAX)   NULL,
    [CubeName]                NVARCHAR (MAX)   NULL,
    CONSTRAINT [PK_Learning_OlapFieldReferences] PRIMARY KEY CLUSTERED ([OlapFieldReferenceId] ASC)
);


GO
PRINT N'Creating Table [Search].[FulltextSearch]...';


GO
CREATE TABLE [Search].[FulltextSearch] (
    [FulltextSearchId]    INT              IDENTITY (1, 1) NOT NULL,
    [ModelElementId]      INT              NULL,
    [ElementName]         NVARCHAR (MAX)   NOT NULL,
    [ElementNameSplit]    NVARCHAR (MAX)   NOT NULL,
    [BusinessFields]      NVARCHAR (MAX)   NULL,
    [SearchPriority]      INT              NOT NULL,
    [TypeDescription]     NVARCHAR (MAX)   NULL,
    [DescriptiveRootPath] NVARCHAR (MAX)   NULL,
    [ElementType]         NVARCHAR (255)   NULL,
    [ProjectConfigId]     UNIQUEIDENTIFIER NOT NULL,
    [RefPath]             NVARCHAR (MAX)   NOT NULL,
    CONSTRAINT [PK_FullTextSearch] PRIMARY KEY CLUSTERED ([FulltextSearchId] ASC)
);


GO
PRINT N'Creating Index [Search].[FulltextSearch].[IX_Search_FulltextSearch_ProjectConfigId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Search_FulltextSearch_ProjectConfigId]
    ON [Search].[FulltextSearch]([ProjectConfigId] ASC);


GO
PRINT N'Creating Table [Search].[TypeChildTypes]...';


GO
CREATE TABLE [Search].[TypeChildTypes] (
    [TypeChildTypesId] INT            IDENTITY (1, 1) NOT NULL,
    [ParentType]       NVARCHAR (300) NULL,
    [ChildType]        NVARCHAR (300) NOT NULL,
    PRIMARY KEY CLUSTERED ([TypeChildTypesId] ASC)
);


GO
PRINT N'Creating Table [Search].[RootElements]...';


GO
CREATE TABLE [Search].[RootElements] (
    [RootElementId]   INT              IDENTITY (1, 1) NOT NULL,
    [ProjectConfigId] UNIQUEIDENTIFIER NOT NULL,
    [ModelElementId]  INT              NOT NULL,
    [Caption]         NVARCHAR (255)   NOT NULL,
    PRIMARY KEY CLUSTERED ([RootElementId] ASC)
);


GO
PRINT N'Creating Table [Search].[BusinessDictionarySupportedTypes]...';


GO
CREATE TABLE [Search].[BusinessDictionarySupportedTypes] (
    [TypeName] NVARCHAR (MAX) NOT NULL
);


GO
PRINT N'Creating Table [Stg].[ExtractItems]...';


GO
CREATE TABLE [Stg].[ExtractItems] (
    [ExtractItemId] INT              IDENTITY (1, 1) NOT NULL,
    [ExtractId]     UNIQUEIDENTIFIER NOT NULL,
    [ComponentId]   INT              NOT NULL,
    [ObjectType]    NVARCHAR (200)   NOT NULL,
    [ObjectName]    NVARCHAR (MAX)   NOT NULL,
    [Content]       NVARCHAR (MAX)   NULL,
    PRIMARY KEY CLUSTERED ([ExtractItemId] ASC)
);


GO
PRINT N'Creating Index [Stg].[ExtractItems].[IX_Stg_Extracts]...';


GO
CREATE NONCLUSTERED INDEX [IX_Stg_Extracts]
    ON [Stg].[ExtractItems]([ExtractId] ASC, [ComponentId] ASC, [ObjectType] ASC);


GO
PRINT N'Creating Table [Stg].[Extracts]...';


GO
CREATE TABLE [Stg].[Extracts] (
    [ExtractId]        UNIQUEIDENTIFIER NOT NULL,
    [ProjectConfigId]  UNIQUEIDENTIFIER NOT NULL,
    [ExtractedBy]      NVARCHAR (MAX)   NOT NULL,
    [ExtractStartTime] DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([ExtractId] ASC)
);


GO
PRINT N'Creating Default Constraint [Adm].[DF_Adm_RequestMessages_Received]...';


GO
ALTER TABLE [Adm].[RequestMessages]
    ADD CONSTRAINT [DF_Adm_RequestMessages_Received] DEFAULT 0 FOR [Received];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Adm].[SsrsProjectComponents]...';


GO
ALTER TABLE [Adm].[SsrsProjectComponents]
    ADD DEFAULT N'Native' FOR [SsrsMode];


GO
PRINT N'Creating Default Constraint [Adm].[DF_Adm_Log_CreatedDate]...';


GO
ALTER TABLE [Adm].[Log]
    ADD CONSTRAINT [DF_Adm_Log_CreatedDate] DEFAULT GETDATE() FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Adm].[DF_RequestsWaitFor_Active]...';


GO
ALTER TABLE [Adm].[RequestsWaitFor]
    ADD CONSTRAINT [DF_RequestsWaitFor_Active] DEFAULT (1) FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Adm].[BroadcastMessages]...';


GO
ALTER TABLE [Adm].[BroadcastMessages]
    ADD DEFAULT (GETDATE()) FOR [CreatedTime];


GO
PRINT N'Creating Default Constraint [Adm].[DF_Adm_UserActionLog_CreatedDate]...';


GO
ALTER TABLE [Adm].[UserActionLog]
    ADD CONSTRAINT [DF_Adm_UserActionLog_CreatedDate] DEFAULT GETDATE() FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [Analyst].[DF_Analyst_Objects_Created]...';


GO
ALTER TABLE [Analyst].[Objects]
    ADD CONSTRAINT [DF_Analyst_Objects_Created] DEFAULT GETDATE() FOR [Created];


GO
PRINT N'Creating Default Constraint [Analyst].[DF_Analyst_Objects_IsCurrent]...';


GO
ALTER TABLE [Analyst].[Objects]
    ADD CONSTRAINT [DF_Analyst_Objects_IsCurrent] DEFAULT 1 FOR [IsCurrent];


GO
PRINT N'Creating Default Constraint [Analyst].[DF_Analyst_Objects_IsDeleted]...';


GO
ALTER TABLE [Analyst].[Objects]
    ADD CONSTRAINT [DF_Analyst_Objects_IsDeleted] DEFAULT 0 FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint [Annotate].[DF_AnnotationViewFields_FieldOrder]...';


GO
ALTER TABLE [Annotate].[AnnotationViewFields]
    ADD CONSTRAINT [DF_AnnotationViewFields_FieldOrder] DEFAULT 0 FOR [FieldOrder];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Annotate].[Fields]...';


GO
ALTER TABLE [Annotate].[Fields]
    ADD DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Annotate].[LinkTypes]...';


GO
ALTER TABLE [Annotate].[LinkTypes]
    ADD DEFAULT 0 FOR [Deleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [BIDoc].[BasicGraphNodes]...';


GO
ALTER TABLE [BIDoc].[BasicGraphNodes]
    ADD DEFAULT 0 FOR [RefPathIntervalStart];


GO
PRINT N'Creating Default Constraint unnamed constraint on [BIDoc].[BasicGraphNodes]...';


GO
ALTER TABLE [BIDoc].[BasicGraphNodes]
    ADD DEFAULT 0 FOR [RefPathIntervalEnd];


GO
PRINT N'Creating Default Constraint unnamed constraint on [BIDoc].[ModelElements]...';


GO
ALTER TABLE [BIDoc].[ModelElements]
    ADD DEFAULT 0 FOR [RefPathIntervalStart];


GO
PRINT N'Creating Default Constraint unnamed constraint on [BIDoc].[ModelElements]...';


GO
ALTER TABLE [BIDoc].[ModelElements]
    ADD DEFAULT 0 FOR [RefPathIntervalEnd];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Search].[FulltextSearch]...';


GO
ALTER TABLE [Search].[FulltextSearch]
    ADD DEFAULT (1) FOR [SearchPriority];


GO
PRINT N'Creating Sequence [BIDoc].[ModelLinksSequence]...';


GO
CREATE SEQUENCE [BIDoc].[ModelLinksSequence]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    CACHE 10;


GO
PRINT N'Creating Sequence [BIDoc].[ModelElementsSequence]...';


GO
CREATE SEQUENCE [BIDoc].[ModelElementsSequence]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    CACHE 10;


GO
PRINT N'Creating Sequence [BIDoc].[BasicGraphNodesSequence]...';


GO
CREATE SEQUENCE [BIDoc].[BasicGraphNodesSequence]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    CACHE 10;


GO
PRINT N'Creating Sequence [BIDoc].[BasicGraphLinksSequence]...';


GO
CREATE SEQUENCE [BIDoc].[BasicGraphLinksSequence]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    CACHE 10;


GO
PRINT N'Creating Full-text Index Full-text Index on [Search].[FulltextSearch]...';


GO
CREATE FULLTEXT INDEX ON [Search].[FulltextSearch]
    ([ElementName] LANGUAGE 1033, [ElementNameSplit] LANGUAGE 1033, [BusinessFields] LANGUAGE 1033)
    KEY INDEX [PK_FullTextSearch]
    ON [fulltext_default];


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_RequestMessages_Adm_ProjectConfigs_Project_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[RequestMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_RequestMessages_Adm_ProjectConfigs_Project_ProjectConfigId] FOREIGN KEY ([Project_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_SsrsProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[SsrsProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_SsrsProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_SsasDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[SsasDbProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_SsasDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_SsisProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[SsisProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_SsisProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_MssqlAgentProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[MssqlAgentProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_MssqlAgentProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_MssqlDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[MssqlDbProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_MssqlDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_RolePermissions_Permission]...';


GO
ALTER TABLE [Adm].[RolePermissions] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_RolePermissions_Permission] FOREIGN KEY ([PermissionId]) REFERENCES [Adm].[Permissions] ([PermissionId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_UserPermissions_Role]...';


GO
ALTER TABLE [Adm].[RolePermissions] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_UserPermissions_Role] FOREIGN KEY ([RoleId]) REFERENCES [Adm].[Roles] ([RoleId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_UserRoles_User]...';


GO
ALTER TABLE [Adm].[UserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_UserRoles_User] FOREIGN KEY ([UserId]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_UserRoles_Role]...';


GO
ALTER TABLE [Adm].[UserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_UserRoles_Role] FOREIGN KEY ([RoleId]) REFERENCES [Adm].[Roles] ([RoleId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_BroadcastMessages_Adm_ProjectConfigs_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[BroadcastMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_BroadcastMessages_Adm_ProjectConfigs_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_UserActionLog_UserId]...';


GO
ALTER TABLE [Adm].[UserActionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_UserActionLog_UserId] FOREIGN KEY ([UserId]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key [Adm].[FK_Adm_PowerBiProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId]...';


GO
ALTER TABLE [Adm].[PowerBiProjectComponents] WITH NOCHECK
    ADD CONSTRAINT [FK_Adm_PowerBiProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId] FOREIGN KEY ([ProjectConfig_ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementAttributess_ModelElementId]...';


GO
ALTER TABLE [Analyst].[ModelElementAttributes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementAttributess_ModelElementId] FOREIGN KEY ([ModelElementId]) REFERENCES [Analyst].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementAttributes_ModelElementTypeAttributeId]...';


GO
ALTER TABLE [Analyst].[ModelElementAttributes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementAttributes_ModelElementTypeAttributeId] FOREIGN KEY ([ModelElementTypeAttributeId]) REFERENCES [Analyst].[ModelElementTypeAttributes] ([ModelElementTypeAttributeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementAttributes_ObjectId]...';


GO
ALTER TABLE [Analyst].[ModelElementAttributes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementAttributes_ObjectId] FOREIGN KEY ([ObjectId]) REFERENCES [Analyst].[Objects] ([ObjectId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementTypeAttributes_ModelElementTypeId]...';


GO
ALTER TABLE [Analyst].[ModelElementTypeAttributes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementTypeAttributes_ModelElementTypeId] FOREIGN KEY ([ModelElementTypeId]) REFERENCES [Analyst].[ModelElementTypes] ([ModelElementTypeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementTypeAttributes_ModelElementAttributeTypeId]...';


GO
ALTER TABLE [Analyst].[ModelElementTypeAttributes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementTypeAttributes_ModelElementAttributeTypeId] FOREIGN KEY ([ModelElementAttributeTypeId]) REFERENCES [Analyst].[ModelElementAttributeTypes] ([ModelElementAttributeTypeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_Object_Author]...';


GO
ALTER TABLE [Analyst].[Objects] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_Object_Author] FOREIGN KEY ([Author_UserId]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_Object_PreviousVersion]...';


GO
ALTER TABLE [Analyst].[Objects] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_Object_PreviousVersion] FOREIGN KEY ([PreviousVersion_ObjectId]) REFERENCES [Analyst].[Objects] ([ObjectId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinkTypes_ProjectConfigId]...';


GO
ALTER TABLE [Analyst].[ModelLinkTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinkTypes_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElementTypes_ProjectConfigId]...';


GO
ALTER TABLE [Analyst].[ModelElementTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElementTypes_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinks_ElementFromId]...';


GO
ALTER TABLE [Analyst].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinks_ElementFromId] FOREIGN KEY ([ElementFromId]) REFERENCES [Analyst].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinks_ElementToId]...';


GO
ALTER TABLE [Analyst].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinks_ElementToId] FOREIGN KEY ([ElementToId]) REFERENCES [Analyst].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinks_ModelLinkTypeId]...';


GO
ALTER TABLE [Analyst].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinks_ModelLinkTypeId] FOREIGN KEY ([ModelLinkTypeId]) REFERENCES [Analyst].[ModelLinkTypes] ([ModelLinkTypeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinks_ModelElementTypeAttributeId]...';


GO
ALTER TABLE [Analyst].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinks_ModelElementTypeAttributeId] FOREIGN KEY ([ModelElementTypeAttributeId]) REFERENCES [Analyst].[ModelElementTypeAttributes] ([ModelElementTypeAttributeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelLinks_ObjectId]...';


GO
ALTER TABLE [Analyst].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelLinks_ObjectId] FOREIGN KEY ([ObjectId]) REFERENCES [Analyst].[Objects] ([ObjectId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElements_ProjectConfigId]...';


GO
ALTER TABLE [Analyst].[ModelElements] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElements_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElements_ModelElementTypeId]...';


GO
ALTER TABLE [Analyst].[ModelElements] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElements_ModelElementTypeId] FOREIGN KEY ([ModelElementTypeId]) REFERENCES [Analyst].[ModelElementTypes] ([ModelElementTypeId]);


GO
PRINT N'Creating Foreign Key [Analyst].[FK_Analyst_ModelElements_ObjectId]...';


GO
ALTER TABLE [Analyst].[ModelElements] WITH NOCHECK
    ADD CONSTRAINT [FK_Analyst_ModelElements_ObjectId] FOREIGN KEY ([ObjectId]) REFERENCES [Analyst].[Objects] ([ObjectId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationElements]...';


GO
ALTER TABLE [Annotate].[AnnotationElements] WITH NOCHECK
    ADD FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationElements]...';


GO
ALTER TABLE [Annotate].[AnnotationElements] WITH NOCHECK
    ADD FOREIGN KEY ([ModelElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationElements]...';


GO
ALTER TABLE [Annotate].[AnnotationElements] WITH NOCHECK
    ADD FOREIGN KEY ([CreatedBy]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationElements]...';


GO
ALTER TABLE [Annotate].[AnnotationElements] WITH NOCHECK
    ADD FOREIGN KEY ([UpdatedBy]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[FieldValues]...';


GO
ALTER TABLE [Annotate].[FieldValues] WITH NOCHECK
    ADD FOREIGN KEY ([FieldId]) REFERENCES [Annotate].[Fields] ([FieldId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[FieldValues]...';


GO
ALTER TABLE [Annotate].[FieldValues] WITH NOCHECK
    ADD FOREIGN KEY ([AnnotationElementId]) REFERENCES [Annotate].[AnnotationElements] ([AnnotationElementId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationViewFields]...';


GO
ALTER TABLE [Annotate].[AnnotationViewFields] WITH NOCHECK
    ADD FOREIGN KEY ([AnnotationViewId]) REFERENCES [Annotate].[AnnotationViews] ([AnnotationViewId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationViewFields]...';


GO
ALTER TABLE [Annotate].[AnnotationViewFields] WITH NOCHECK
    ADD FOREIGN KEY ([FieldId]) REFERENCES [Annotate].[Fields] ([FieldId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[AnnotationViews]...';


GO
ALTER TABLE [Annotate].[AnnotationViews] WITH NOCHECK
    ADD FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[Fields]...';


GO
ALTER TABLE [Annotate].[Fields] WITH NOCHECK
    ADD FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[ElementLinks]...';


GO
ALTER TABLE [Annotate].[ElementLinks] WITH NOCHECK
    ADD FOREIGN KEY ([LinkTypeId]) REFERENCES [Annotate].[LinkTypes] ([LinkTypeId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[ElementLinks]...';


GO
ALTER TABLE [Annotate].[ElementLinks] WITH NOCHECK
    ADD FOREIGN KEY ([AnnotationElementFromId]) REFERENCES [Annotate].[AnnotationElements] ([AnnotationElementId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[ElementLinks]...';


GO
ALTER TABLE [Annotate].[ElementLinks] WITH NOCHECK
    ADD FOREIGN KEY ([AnnotationElementToId]) REFERENCES [Annotate].[AnnotationElements] ([AnnotationElementId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Annotate].[LinkTypes]...';


GO
ALTER TABLE [Annotate].[LinkTypes] WITH NOCHECK
    ADD FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_GraphDocuments_BIDoc_BasicGraphInfoNodes_GraphNode_Id]...';


GO
ALTER TABLE [BIDoc].[GraphDocuments] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_GraphDocuments_BIDoc_BasicGraphInfoNodes_GraphNode_Id] FOREIGN KEY ([GraphNode_Id]) REFERENCES [BIDoc].[BasicGraphNodes] ([BasicGraphNodeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_BasciGraphLinks_NodeFromId]...';


GO
ALTER TABLE [BIDoc].[BasicGraphLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_BasciGraphLinks_NodeFromId] FOREIGN KEY ([NodeFromId]) REFERENCES [BIDoc].[BasicGraphNodes] ([BasicGraphNodeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_BasciGraphLinks_NodeToId]...';


GO
ALTER TABLE [BIDoc].[BasicGraphLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_BasciGraphLinks_NodeToId] FOREIGN KEY ([NodeToId]) REFERENCES [BIDoc].[BasicGraphNodes] ([BasicGraphNodeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_BasciGraphNodes_SourceElement]...';


GO
ALTER TABLE [BIDoc].[BasicGraphNodes] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_BasciGraphNodes_SourceElement] FOREIGN KEY ([SourceElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_BasciGraphNodes_ProjectConfig]...';


GO
ALTER TABLE [BIDoc].[BasicGraphNodes] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_BasciGraphNodes_ProjectConfig] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_ModelElements_ProjectConfigId]...';


GO
ALTER TABLE [BIDoc].[ModelElements] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_ModelElements_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_DataMessages_SourceId]...';


GO
ALTER TABLE [BIDoc].[DataMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_DataMessages_SourceId] FOREIGN KEY ([SourceElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_DataMessages_TargetId]...';


GO
ALTER TABLE [BIDoc].[DataMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_DataMessages_TargetId] FOREIGN KEY ([TargetElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_DataMessages_DataMessagesTypeId]...';


GO
ALTER TABLE [BIDoc].[DataMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_DataMessages_DataMessagesTypeId] FOREIGN KEY ([DataMessagesTypeId]) REFERENCES [BIDoc].[DataMessagesType] ([DataMessagesTypeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_SourceDataTypes_DataTypeId]...';


GO
ALTER TABLE [BIDoc].[SourceDataTypes] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_SourceDataTypes_DataTypeId] FOREIGN KEY ([DataTypeId]) REFERENCES [BIDoc].[DataTypes] ([DataTypesId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_HigherLevelElementAncestors_SourceElement]...';


GO
ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH NOCHECK
    ADD CONSTRAINT [FK_HigherLevelElementAncestors_SourceElement] FOREIGN KEY ([SouceElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_HigherLevelElementAncestors_AncestorElement]...';


GO
ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH NOCHECK
    ADD CONSTRAINT [FK_HigherLevelElementAncestors_AncestorElement] FOREIGN KEY ([AncestorElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_HigherLevelElementAncestors_SourceNode]...';


GO
ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH NOCHECK
    ADD CONSTRAINT [FK_HigherLevelElementAncestors_SourceNode] FOREIGN KEY ([SouceDfNodeId]) REFERENCES [BIDoc].[BasicGraphNodes] ([BasicGraphNodeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_HigherLevelElementAncestors_AncestorNode]...';


GO
ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH NOCHECK
    ADD CONSTRAINT [FK_HigherLevelElementAncestors_AncestorNode] FOREIGN KEY ([AncestorDfNodeId]) REFERENCES [BIDoc].[BasicGraphNodes] ([BasicGraphNodeId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_ModelLinks_ElementFromId]...';


GO
ALTER TABLE [BIDoc].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_ModelLinks_ElementFromId] FOREIGN KEY ([ElementFromId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_ModelLinks_ElementToId]...';


GO
ALTER TABLE [BIDoc].[ModelLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_ModelLinks_ElementToId] FOREIGN KEY ([ElementToId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_LineageGridHistory_ProjectConfigId]...';


GO
ALTER TABLE [BIDoc].[LineageGridHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_LineageGridHistory_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_LineageGridHistory_UserId]...';


GO
ALTER TABLE [BIDoc].[LineageGridHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_LineageGridHistory_UserId] FOREIGN KEY ([UserId]) REFERENCES [Adm].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_LineageGridHistory_SourceElementId]...';


GO
ALTER TABLE [BIDoc].[LineageGridHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_LineageGridHistory_SourceElementId] FOREIGN KEY ([SourceRootElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [BIDoc].[FK_BIDoc_LineageGridHistory_TargetElementId]...';


GO
ALTER TABLE [BIDoc].[LineageGridHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_BIDoc_LineageGridHistory_TargetElementId] FOREIGN KEY ([TargetRootElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [Inspect].[FK_Inspect_HighLevelSolutionTrees_ProjectConfigId]...';


GO
ALTER TABLE [Inspect].[HighLevelSolutionTrees] WITH NOCHECK
    ADD CONSTRAINT [FK_Inspect_HighLevelSolutionTrees_ProjectConfigId] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Learning].[OlapRuleConclusions]...';


GO
ALTER TABLE [Learning].[OlapRuleConclusions] WITH NOCHECK
    ADD FOREIGN KEY ([OlapRuleId]) REFERENCES [Learning].[OlapRules] ([OlapRuleId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Learning].[OlapRuleConclusions]...';


GO
ALTER TABLE [Learning].[OlapRuleConclusions] WITH NOCHECK
    ADD FOREIGN KEY ([OlapFieldId]) REFERENCES [Learning].[OlapFields] ([OlapFieldId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Learning].[OlapRulePremises]...';


GO
ALTER TABLE [Learning].[OlapRulePremises] WITH NOCHECK
    ADD FOREIGN KEY ([OlapRuleId]) REFERENCES [Learning].[OlapRules] ([OlapRuleId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Learning].[OlapRulePremises]...';


GO
ALTER TABLE [Learning].[OlapRulePremises] WITH NOCHECK
    ADD FOREIGN KEY ([OlapFieldId]) REFERENCES [Learning].[OlapFields] ([OlapFieldId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [Learning].[OlapQueryFields]...';


GO
ALTER TABLE [Learning].[OlapQueryFields] WITH NOCHECK
    ADD FOREIGN KEY ([OlapFieldId]) REFERENCES [Learning].[OlapFields] ([OlapFieldId]);


GO
PRINT N'Creating Foreign Key [Search].[FK_FullTextSearch_ModelElements]...';


GO
ALTER TABLE [Search].[FulltextSearch] WITH NOCHECK
    ADD CONSTRAINT [FK_FullTextSearch_ModelElements] FOREIGN KEY ([ModelElementId]) REFERENCES [BIDoc].[ModelElements] ([ModelElementId]);


GO
PRINT N'Creating Foreign Key [Stg].[FK_ExtractItems_Extract]...';


GO
ALTER TABLE [Stg].[ExtractItems] WITH NOCHECK
    ADD CONSTRAINT [FK_ExtractItems_Extract] FOREIGN KEY ([ExtractId]) REFERENCES [Stg].[Extracts] ([ExtractId]);


GO
PRINT N'Creating Foreign Key [Stg].[FK_Extracts_ProjectConfig]...';


GO
ALTER TABLE [Stg].[Extracts] WITH NOCHECK
    ADD CONSTRAINT [FK_Extracts_ProjectConfig] FOREIGN KEY ([ProjectConfigId]) REFERENCES [Adm].[ProjectConfigs] ([ProjectConfigId]);


GO
PRINT N'Creating View [Adm].[vw_ServiceUsage]...';


GO
CREATE VIEW [Adm].[vw_ServiceUsage]
	AS
SELECT
r.RequestId, 
r.CreatedDateTime,
REPLACE(REPLACE(JSON_VALUE(r.Content, '$."$type"'), N'CD.DLS.API.', N''), N', CD.DLS.API', N'') RequestType,
u.UserId UserId,
u.DisplayName UserName
FROM adm.RequestMessages r
INNER JOIN adm.Users u ON r.RequestFromUserId = u.UserId
WHERE r.MessageType = N'RequestCreated' AND RequestFromUserId <> 0
GO
PRINT N'Creating View [Search].[vw_TypeChildTypes]...';


GO
CREATE VIEW [Search].[vw_TypeChildTypes]
	AS 
SELECT tct.ParentType, tct.ChildType, td.TypeDescription ChildTypeDescription FROM Search.TypeChildTypes tct
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = tct.ChildType
WHERE ParentType IS NOT NULL
GO
PRINT N'Creating Function [Adm].[f_EscapeForLike]...';


GO
CREATE FUNCTION [Adm].[f_EscapeForLike]
(
	@val nvarchar(MAX)
)
RETURNS nvarchar(MAX)
AS
BEGIN
	RETURN REPLACE(REPLACE(REPLACE(REPLACE(@val, '[', '[[]'), ']', '[]]'), '_', '[_]'), '%', '[%]')
END
GO
PRINT N'Creating Function [adm].[f_SplitCamelCase]...';


GO
CREATE FUNCTION [adm].[f_SplitCamelCase](@Temp NVARCHAR(MAX))
Returns NVARCHAR(MAX)
AS
Begin

    Declare @KeepValues as varchar(50)
    Set @KeepValues = '%[^ ][A-Z][a-z]%'
    While PatIndex(@KeepValues collate Latin1_General_Bin, @Temp) > 0
        Set @Temp = Stuff(@Temp, PatIndex(@KeepValues collate Latin1_General_Bin, @Temp) + 1, 0, ' ')

    Return @Temp
End
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementDescriptivePath]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementDescriptivePath]
(
	@modelElementId int
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	RETURN (SELECT DescriptivePath FROM BIDoc.ModelElementDescriptivePaths WHERE ModelElementId = @modelElementId)
END
GO
PRINT N'Creating Function [Inspect].[f_GetElementTypeDetailLevel]...';


GO
CREATE FUNCTION [Inspect].[f_GetElementTypeDetailLevel]
(
	@elementType NVARCHAR(255)
)
RETURNS INT
AS
BEGIN
	
	RETURN (SELECT DetailLevel FROM BIDoc.ModelElementTypeDetailLevels WHERE ElementType = @elementType)

END
GO
PRINT N'Creating Function [Adm].[f_GetMssqlAgentProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetMssqlAgentProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
	SELECT
	[MssqlAgentProjectComponentId]
    ,[ServerName]
	,[JobName]
	,[ProjectConfig_ProjectConfigId] 
	FROM adm.MssqlAgentProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetSsasDbProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetSsasDbProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [SsaslDbProjectComponentId]
      ,[ServerName]
      ,[DbName]
	  ,[SSASType]
      ,[ProjectConfig_ProjectConfigId]
FROM adm.SsasDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetMssqlDbProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetMssqlDbProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [MssqlDbProjectComponentId]
      ,[ServerName]
      ,[DbName]
      ,[ProjectConfig_ProjectConfigId]
	  FROM adm.MssqlDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetMessageByRequestAndType]...';


GO
CREATE FUNCTION [Adm].[f_GetMessageByRequestAndType]
(
@requestid UNIQUEIDENTIFIER,
@messagetype NVARCHAR(50)
)
RETURNS TABLE
AS RETURN
(
SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[CustomerCode]
	  ,RequestFromUserId
  FROM [Adm].[RequestMessages]
  WHERE RequestId = @requestid AND MessageType = @messagetype
)
GO
PRINT N'Creating Function [Adm].[f_GetMessageById]...';


GO
CREATE FUNCTION [Adm].[f_GetMessageById]
(
@messageid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[CustomerCode]
	  ,RequestFromUserId
  FROM [Adm].[RequestMessages]
  WHERE MessageId = @messageid
)
GO
PRINT N'Creating Function [Adm].[f_GetPotentialCacheMatches]...';


GO
CREATE FUNCTION [Adm].[f_GetPotentialCacheMatches]
(
@projectconfigid UNIQUEIDENTIFIER,
@coretype NVARCHAR(50)
)
RETURNS TABLE
AS RETURN
(
SELECT m.[MessageId]
      ,m.[RequestId]
      ,m.[Content]
      ,m.[RequestForCoreType]
      ,m.[RequestProcessingMethod]
      ,m.[MessageFromId]
      ,m.[MessageOriginName]
      ,m.[MessageOriginId]
      ,m.[MessageFromName]
      ,m.[MessageToObjectId]
      ,m.[MessageToProjectId]
      ,m.[MessageToObjectName]
      ,m.[MessageType]
      ,m.[CreatedDateTime]
      --,m.[TypeName]
      ,m.[Project_ProjectConfigId]
  FROM [Adm].[RequestMessageHistory] h
  INNER JOIN [Adm].RequestMessages m ON h.InitMessage_MessageId = m.MessageId
  WHERE m.MessageToProjectId = @projectconfigid AND h.CacheValid = 1 AND h.CacheValidUntil >= GETDATE()
)
GO
PRINT N'Creating Function [Adm].[f_GetProjectConfigName]...';


GO
CREATE FUNCTION [Adm].[f_GetProjectConfigName]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT [Name] FROM Adm.ProjectConfigs WHERE ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetSsrsProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetSsrsProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [SsrsProjectComponentId]
		,[SsrsMode]
      ,[ServerName]
      ,[SsrsServiceUrl]
      ,[SsrsExecutionServiceUrl]
      ,[FolderPath]
	  ,[SharepointBaseUrl]
	  ,[SharepointFolder]
      ,[ProjectConfig_ProjectConfigId]
FROM adm.SsrsProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetSsisProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetSsisProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [SsisProjectComponentId]
      ,[ServerName]
      ,[FolderName]
      ,[ProjectName]
      ,[ProjectConfig_ProjectConfigId]
FROM adm.SsisProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Adm].[f_GetRequestMessageAttachments]...';


GO
CREATE FUNCTION [Adm].[f_GetRequestMessageAttachments](
	@messageid UNIQUEIDENTIFIER
	)
RETURNS TABLE
AS RETURN(
SELECT 		[AttachmentId]
           ,[Type]
           ,[Name]
           ,[Uri]
           ,[MessageId]
           ,[OriginalRequestMessage_MessageId]
FROM [Adm].[RequestMessageAttachments] WHERE @messageid = MessageId    
)
GO
PRINT N'Creating Function [Adm].[f_GetResponseForCachedMessage]...';


GO
CREATE FUNCTION [Adm].[f_GetResponseForCachedMessage]
(
@initMessageId UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT m.[MessageId]
      ,m.[RequestId]
      ,m.[Content]
      ,m.[RequestForCoreType]
      ,m.[RequestProcessingMethod]
      ,m.[MessageFromId]
      ,m.[MessageOriginName]
      ,m.[MessageOriginId]
      ,m.[MessageFromName]
      ,m.[MessageToObjectId]
      ,m.[MessageToProjectId]
      ,m.[MessageToObjectName]
      ,m.[MessageType]
      ,m.[CreatedDateTime]
      --,m.[TypeName]
      ,m.[Project_ProjectConfigId]
	  ,m.CustomerCode
	  ,m.RequestFromUserId
  FROM [Adm].[RequestMessageHistory] h
  INNER JOIN [Adm].RequestMessages m ON h.ResponseMessage_MessageId = m.MessageId
  WHERE h.InitMessage_MessageId = @initMessageId AND h.CacheValid = 1 AND h.CacheValidUntil >= GETDATE()
)
GO
PRINT N'Creating Function [Adm].[f_GetRespoonseForRequest]...';


GO
CREATE FUNCTION [Adm].[f_GetRespoonseForRequest]
(
@requestId UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[customerCode]
	  ,[RequestFromUserId]
  FROM [Adm].[RequestMessages]
  WHERE RequestId = @requestId AND MessageType NOT IN (N'RequestAcknowledged', N'RequestCreated', /*N'Progress',*/ N'DbOperationFinished')
)
GO
PRINT N'Creating Function [Adm].[f_GetUserDataByIdentity]...';


GO
CREATE FUNCTION [Adm].[f_GetUserDataByIdentity]
(
@userIdentity NVARCHAR(300)
)
RETURNS TABLE
AS RETURN
(
SELECT [UserId],
	   [Identity],
	   [DisplayName]
  FROM [Adm].[Users]
  WHERE [Identity] = @userIdentity
)
GO
PRINT N'Creating Function [Adm].[f_GetProgressForRequest]...';


GO
CREATE FUNCTION [Adm].[f_GetProgressForRequest]
(
@requestId UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[customerCode]
	  ,[RequestFromUserId]
  FROM [Adm].[RequestMessages]
  WHERE RequestId = @requestId AND MessageType = N'Progress'
)
GO
PRINT N'Creating Function [Adm].[f_GetCreationForRequest]...';


GO
CREATE FUNCTION [Adm].[f_GetCreationForRequest]
(
@requestId UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[customerCode]
	  ,[RequestFromUserId]
  FROM [Adm].[RequestMessages]
  WHERE RequestId = @requestId AND MessageType = N'RequestCreated'
)
GO
PRINT N'Creating Function [Adm].[f_GetPowerBiProjectComponents]...';


GO
CREATE FUNCTION [Adm].[f_GetPowerBiProjectComponents]
(
@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE
AS RETURN
(
	SELECT
	[PowerBiProjectComponentId]
    ,[RedirectUri]
	,[ApplicationID]
	,[WorkspaceID]
	,[ReportServerURL]
	,[ReportServerFolder]
	,[DiskFolder]
	,[ConfigType]
	,[ProjectConfig_ProjectConfigId] 
	FROM adm.PowerBiProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Annotate].[f_GetViewFieldValues]...';


GO
CREATE FUNCTION Annotate.f_GetViewFieldValues
(@viewId INT, @modelElementId INT = NULL)
RETURNS TABLE
AS RETURN
SELECT vals.FieldValueId, vals.AnnotationElementId, vals.FieldId, e.ModelElementId, vals.Value
FROM Annotate.AnnotationViewFields vf
INNER JOIN Annotate.FieldValues vals ON vals.FieldId = vf.FieldId
INNER JOIN Annotate.AnnotationElements e ON e.AnnotationElementId = vals.AnnotationElementId
WHERE vf.AnnotationViewId = @viewId AND ISNULL(@modelElementId, e.ModelElementId) = e.ModelElementId
AND e.IsCurrentVersion = 1
GO
PRINT N'Creating Function [Annotate].[f_ListViewFields]...';


GO
CREATE FUNCTION Annotate.f_ListViewFields
(@viewId INT)
RETURNS TABLE
AS RETURN
SELECT vf.AnnotationViewId, f.FieldId, f.FieldName, vf.FieldOrder 
FROM Annotate.Fields f 
INNER JOIN Annotate.AnnotationViewFields vf ON f.FieldId = vf.FieldId
--LEFT JOIN BIDoc.ModelElementTypeDescriptions dsc ON N'Type_' + dsc.ElementType = 
WHERE vf.AnnotationViewId = @viewId
GO
PRINT N'Creating Function [Annotate].[f_ListProjectViews]...';


GO
CREATE FUNCTION Annotate.f_ListProjectViews
(@projectConfigId UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT AnnotationViewId, ViewName, dsc.ElementType, dsc.TypeDescription
FROM Annotate.AnnotationViews vw
LEFT JOIN BIDoc.ModelElementTypeDescriptions dsc ON N'Type_' + dsc.ElementType = vw.ViewName
WHERE vw.ProjectConfigId = @projectConfigId
GO
PRINT N'Creating Function [Annotate].[f_GetViewFieldValuesUnderPath]...';


GO
CREATE FUNCTION Annotate.f_GetViewFieldValuesUnderPath
(@viewId INT, @path NVARCHAR(MAX), @type NVARCHAR(200))
RETURNS TABLE
AS RETURN
SELECT vals.FieldValueId, vals.AnnotationElementId, vals.FieldId, e.ModelElementId, vals.Value
FROM Annotate.AnnotationViewFields vf
INNER JOIN Annotate.FieldValues vals ON vals.FieldId = vf.FieldId
INNER JOIN Annotate.AnnotationElements e ON e.AnnotationElementId = vals.AnnotationElementId
INNER JOIN BIDoc.ModelElements me ON me.ModelElementId = e.ModelElementId
WHERE vf.AnnotationViewId = @viewId
AND e.IsCurrentVersion = 1

AND
  me.RefPathPrefix >= LEFT(@path, 300) AND me.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  me.RefPath >= @path AND me.RefPath <= @path + N'~'
  AND me.[Type] = @type
GO
PRINT N'Creating Function [Annotate].[f_GetBusinessDescriptionByMEId]...';


GO
CREATE FUNCTION [Annotate].[f_GetBusinessDescriptionByMEId]
(
	@elementid INT,
	@projectConfigId UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT f.FieldName
	  ,fv.Value	
  FROM [Annotate].[AnnotationElements] ae
  INNER JOIN [Annotate].[AnnotationViews] av ON av.ProjectConfigId = ae.ProjectConfigId
  INNER JOIN [Annotate].[AnnotationViewFields] avf ON avf.AnnotationViewId = av.AnnotationViewId
  INNER JOIN [Annotate].[Fields] f ON f.FieldId = avf.FieldId
  INNER JOIN [Annotate].[FieldValues] fv ON fv.FieldId = f.FieldId
  WHERE ae.ModelElementId = @elementid AND ae.ProjectConfigId = @projectConfigId
)
GO
PRINT N'Creating Function [Annotate].[f_GetListLinksTo]...';


GO
CREATE FUNCTION Annotate.f_GetListLinksTo
(@projectConfigId UNIQUEIDENTIFIER, @modelElementId INT)
RETURNS TABLE
AS RETURN
SELECT l.ElementLinkId ,lt.LinkTypeName, fe.Name AS ElementFromCaption, fed.DescriptivePath AS ElementFromDescriptivePath, lt.LinkTypeId, fe.ModelElementId AS  ModelElementFromId, te.ModelElementId AS ModelElementToId,  UpdatedVersion
FROM Annotate.ElementLinks l
INNER JOIN Annotate.AnnotationElements te ON l.AnnotationElementToId = te.AnnotationElementId
INNER JOIN Annotate.AnnotationElements fe ON l.AnnotationElementFromId = fe.AnnotationElementId
INNER JOIN BIDoc.ModelElementDescriptivePaths fed ON fe.ModelElementId = fed.ModelElementId
INNER JOIN Annotate.LinkTypes lt ON l.LinkTypeId = lt.LinkTypeId
WHERE lt.ProjectConfigId = @projectConfigId AND te.ModelElementId = @modelElementId AND te.IsCurrentVersion = 1 AND fe.IsCurrentVersion = 1
GO
PRINT N'Creating Function [Annotate].[f_GetListLinksFrom]...';


GO
CREATE FUNCTION Annotate.f_GetListLinksFrom
(@projectConfigId UNIQUEIDENTIFIER, @modelElementId INT)
RETURNS TABLE
AS RETURN
SELECT l.ElementLinkId ,lt.LinkTypeName, te.Name AS ElementToCaption, ted.DescriptivePath AS ElementToDescriptivePath, lt.LinkTypeId, te.ModelElementId AS ModelElementToId, fe.ModelElementId AS ModelElementFromId, UpdatedVersion
FROM Annotate.ElementLinks l
INNER JOIN Annotate.AnnotationElements fe ON l.AnnotationElementFromId = fe.AnnotationElementId
INNER JOIN Annotate.AnnotationElements te ON l.AnnotationElementToId = te.AnnotationElementId
INNER JOIN BIDoc.ModelElementDescriptivePaths ted ON te.ModelElementId = ted.ModelElementId
INNER JOIN Annotate.LinkTypes lt ON l.LinkTypeId = lt.LinkTypeId
WHERE lt.ProjectConfigId = @projectConfigId AND fe.ModelElementId = @modelElementId AND te.IsCurrentVersion = 1 AND fe.IsCurrentVersion = 1
GO
PRINT N'Creating Function [Annotate].[f_ListLinkTypes]...';


GO
CREATE FUNCTION Annotate.f_ListLinkTypes
(@projectConfigId UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT l.Deleted, l.LinkTypeId, l.LinkTypeName, IIF((EXISTS (SELECT TOP 1 1 FROM Annotate.ElementLinks el WHERE el.LinkTypeId = l.LinkTypeId)), 1, 0) UsedInLinks
FROM Annotate.LinkTypes l
WHERE l.ProjectConfigId = @projectConfigId
AND DELETED = 0
GO
PRINT N'Creating Function [Annotate].[f_ListFields]...';


GO
CREATE FUNCTION Annotate.f_ListFields
(@projectConfigId UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT f.Deleted, f.FieldId, f.FieldName, IIF((EXISTS (SELECT TOP 1 1 FROM Annotate.AnnotationViewFields vf WHERE vf.FieldId = f.FieldId)), 1, 0) UsedInViews
FROM Annotate.Fields f 
WHERE f.ProjectConfigId = @projectConfigId
AND Deleted = 0
GO
PRINT N'Creating Function [Annotate].[f_GetListLinks]...';


GO
CREATE FUNCTION Annotate.f_GetListLinks
(@projectConfigId UNIQUEIDENTIFIER, @elementType NVARCHAR(MAX),@refPath NVARCHAR(MAX))
RETURNS TABLE
AS RETURN
SELECT l.ElementLinkId ,lt.LinkTypeName, lt.LinkTypeId, ef.ModelElementId AS ModelElementFromId, et.ModelElementId AS ModelElementToId, et.Name AS ElementToCaption,
met.RefPath AS ElementToDescriptivePath, UpdatedVersion
FROM Annotate.ElementLinks l
INNER JOIN Annotate.AnnotationElements et ON l.AnnotationElementToId = et.AnnotationElementId
INNER JOIN BIDoc.ModelElements met ON met.ModelElementId = et.ModelElementId
INNER JOIN Annotate.AnnotationElements ef ON l.AnnotationElementFromId = ef.AnnotationElementId
INNER JOIN BIDoc.ModelElements mef ON mef.ModelElementId = ef.ModelElementId
INNER JOIN Annotate.LinkTypes lt ON l.LinkTypeId = lt.LinkTypeId
WHERE lt.ProjectConfigId = @projectConfigId AND et.IsCurrentVersion = 1 AND ef.IsCurrentVersion = 1 AND mef.Type = @elementType
AND (mef.RefPathIntervalStart >= (SELECT RefPathIntervalStart FROM BIDoc.ModelElements WHERE RefPath = @refPath AND ProjectConfigId = @projectConfigId) AND mef.RefPathIntervalStart <= (SELECT RefPathIntervalEnd FROM BIDoc.ModelElements WHERE RefPath = @refPath AND ProjectConfigId = @projectConfigId))
GO
PRINT N'Creating Function [Annotate].[f_ProjectDictionaryValues]...';


GO
CREATE FUNCTION Annotate.f_ProjectDictionaryValues
(@projectconfigid UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT ae.AnnotationElementId 
      ,ae.ModelElementId
	  ,f.FieldName
	  ,f.FieldId
	  ,fv.Value
	  ,fv.FieldValueId
  FROM [Annotate].[AnnotationElements] ae
  INNER JOIN [Annotate].[FieldValues] fv ON fv.AnnotationElementId = ae.AnnotationElementId
  INNER JOIN [Annotate].[Fields] f ON f.FieldId = fv.FieldId
  WHERE ae.ProjectConfigId = @projectconfigid AND ae.IsCurrentVersion = 1 AND ae.ModelElementId IS NOT NULL
GO
PRINT N'Creating Function [Annotate].[f_ProjectDictionaryFieldsMapping]...';


GO
CREATE FUNCTION Annotate.f_ProjectDictionaryFieldsMapping
(@projectconfigid UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT f.FieldId, f.FieldName, vf.FieldOrder, REPLACE(v.ViewName, N'Type_', N'') ElementType, v.AnnotationViewId
FROM Annotate.Fields f 
INNER JOIN Annotate.AnnotationViewFields vf ON f.FieldId = vf.FieldId
INNER JOIN Annotate.AnnotationViews v ON vf.AnnotationViewId = v.AnnotationViewId
WHERE v.ProjectConfigId = @projectconfigid AND f.Deleted = 0
GO
PRINT N'Creating Function [Annotate].[f_ProjectOlapMeasuresLookupTable]...';


GO
CREATE FUNCTION Annotate.f_ProjectOlapMeasuresLookupTable
(@projectconfigid UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT
e.RefPath, e.ModelElementId MeasureElementId, e.Caption MeasureName, e.Type ElementType
FROM BIDoc.ModelElements e
WHERE e.ProjectConfigId = @projectconfigid
AND e.Type IN (N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement')
AND e.RefPath NOT LIKE 'SSRS%'
GO
PRINT N'Creating Function [Annotate].[f_ProjectOlapAttributesLookupTable]...';


GO
CREATE FUNCTION Annotate.f_ProjectOlapAttributesLookupTable
(@projectconfigid UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT DISTINCT

e.RefPath, e.ModelElementId CubeAttributeElementId, da.ModelElementId DimensionAttributeElementId,
	e.Caption AttributeName, cde.Caption CubeDimensionName, dde.Caption DatabaseDimensionName, dhe.Caption HierarchyName, hle.Caption HierarchyLevelName, da.Type ElementType

FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks dal ON dal.ElementFromId = e.ModelElementId AND dal.Type = N'DatabaseDimensionAttribute'
INNER JOIN BIDoc.ModelElements da ON da.ModelElementId = dal.ElementToId
INNER JOIN BIDoc.ModelLinks cdl ON cdl.ElementFromId = e.ModelElementId AND cdl.Type = N'parent'
INNER JOIN BIDoc.ModelElements cde ON cde.ModelElementId = cdl.ElementToId
INNER JOIN BIDoc.ModelLinks ddl ON ddl.ElementFromId = cde.ModelElementId AND ddl.Type = N'DatabaseDimension'
INNER JOIN BIDoc.ModelElements dde ON ddl.ElementToId = dde.ModelElementId
-- hierarchies
LEFT JOIN BIDoc.ModelLinks dhl ON dhl.ElementToId = dde.ModelElementId AND dhl.Type = N'parent'
LEFT JOIN BIDoc.ModelElements dhe ON dhe.ModelElementId = dhl.ElementFromId AND dhe.Type = N'CD.DLS.Model.Mssql.Ssas.HierarchyElement'
-- hierarchy levels
LEFT JOIN BIDoc.ModelLinks hll ON hll.ElementToId = dhe.ModelElementId AND hll.Type = N'parent'
LEFT JOIN BIDoc.ModelElements hle ON hle.ModelElementId = hll.ElementFromId
-- level attributes
LEFT JOIN BIDoc.ModelLinks hlal ON hlal.ElementFromId = hle.ModelElementId AND hlal.Type = N'Attribute'

WHERE e.ProjectConfigId = @projectconfigid
AND e.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement')
AND ISNULL(hlal.ElementToId, da.ModelElementId) = da.ModelElementId
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphDocuments]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphDocuments]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@documenttype NVARCHAR(50) = NULL
)
RETURNS TABLE AS RETURN
(
SELECT [GraphDocumentId]
      ,[Content]
      ,[DocumentType]
      ,[GraphNode_Id]
  FROM [BIDoc].[GraphDocuments] d
INNER JOIN BasicGraphNodes n ON d.GraphNode_Id = n.BasicGraphNodeId
WHERE n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid AND ISNULL(@documenttype, d.DocumentType) = d.DocumentType
)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphLinks]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphLinks]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@linktype NVARCHAR(50) = NULL
)
RETURNS TABLE AS RETURN
(
SELECT BasicGraphLinkId,LinkType,NodeFromId ,NodeToId,ExtendedProperties 
FROM   
(
SELECT *,Row_number() OVER(PARTITION BY nodeFromId,NodeToID ORDER BY nodeFromId,NodeToID) rn 
FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN BIDoc.BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
where n.GraphKind = @graphkind and n.ProjectConfigId = @projectconfigid  AND ISNULL(@linktype, l.LinkType) = l.LinkType
) t 
WHERE  rn = 1 

)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphNodes]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphNodes]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50)
)
RETURNS TABLE AS RETURN
(
SELECT [BasicGraphNodeId]
      ,[Name]
      ,[NodeType]
      ,[Description]
      ,[ParentId]
      ,[GraphKind]
      ,[ProjectConfigId]
      ,[SourceElementId]
      ,[TopologicalOrder]
FROM BIDoc.BasicGraphNodes 
WHERE GraphKind = @graphkind AND ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelLinks]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelLinks]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN [BIDoc].ModelElements e ON l.ElementFromId = e.ModelElementId
  WHERE e.ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElements]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElements]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] WHERE ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphNodeIdByElementId]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphNodeIdByElementId]
(
	@elementid INT,
	@graphkind NVARCHAR(50)
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId 
WHERE GraphKind = @graphkind AND e.ModelElementId = @elementid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementById]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementById]
(
	@elementid INT
)
RETURNS TABLE AS RETURN
(
SELECT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] WHERE ModelElementId = @elementid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementIdByRefPath]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementIdByRefPath]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX)
)
RETURNS TABLE AS RETURN
(
SELECT [ModelElementId]
FROM [BIDoc].[ModelElements] WHERE ProjectConfigId = @projectconfigid AND RefPathPrefix = CONVERT(NVARCHAR(300), LEFT(@path, 300))
	AND RefPath = @path
)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphDocumentsForNode]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphDocumentsForNode]
(
	@nodeid INT,
	@documenttype NVARCHAR(50) = NULL
)
RETURNS TABLE AS RETURN
(
SELECT [GraphDocumentId]
      ,[Content]
      ,[DocumentType]
      ,[GraphNode_Id]
  FROM [BIDoc].[GraphDocuments] d
  --INNER JOIN [BIDoc].f_GetModelElements e ON d.NodeRefPath = e.RefPath 
  WHERE ISNULL(@documenttype, d.DocumentType) = d.DocumentType AND d.GraphNode_Id = @nodeid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphNodeIdByRefPath]...';


GO
CREATE FUNCTION [BIDoc].[f_GetGraphNodeIdByRefPath]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@refpath NVARCHAR(MAX)
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId 
WHERE GraphKind = @graphkind AND e.ProjectConfigId = @projectconfigid AND e.RefPathPrefix = CONVERT(NVARCHAR(300), LEFT(@refpath, 300)) AND e.RefPath = @refPath
)
GO
PRINT N'Creating Function [BIDoc].[f_GetGraphLinksUnderPath]...';


GO
/*
Includes only links originating under the path
*/
CREATE FUNCTION [BIDoc].[f_GetGraphLinksUnderPath]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@path NVARCHAR(MAX),
	@linktype NVARCHAR(50) = NULL
)
RETURNS TABLE AS RETURN
(
SELECT [BasicGraphLinkId]
      ,[LinkType]
      ,[NodeFromId]
      ,[NodeToId]
	  ,l.ExtendedProperties
FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
INNER JOIN ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE 
e.RefPathPrefix >= LEFT(@path, 300) AND e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND
n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid AND ISNULL(@linktype, l.LinkType) = l.LinkType
AND e.RefPath >= @path AND e.RefPath <= @path + N'~'

--LEFT(e.RefPath, LEN(@path)) = @path -- e.RefPath LIKE Adm.f_EscapeForLike(@path) + '%'  ESCAPE '\'
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelLinksFromElementIds]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelLinksFromElementIds]
(
	@idList [BIDoc].[UDTT_IdList] READONLY
)
RETURNS TABLE AS RETURN
(
SELECT l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN @idList lst ON l.ElementFromId = lst.Id
  WHERE l.Type <> N'parent'
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementsByIds]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementsByIds]
(
	@idList [BIDoc].[UDTT_IdList] READONLY
)
RETURNS TABLE AS RETURN
(
SELECT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e
  INNER JOIN @idList l ON e.ModelElementId = l.Id

  UNION ALL

SELECT DISTINCT
		e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,e.[Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM @idList l
  INNER JOIN BIDoc.ModelLinks lnk ON lnk.ElementFromId = l.Id
  INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = lnk.ElementToId
  LEFT JOIN @idList ld ON ld.Id = e.ModelElementId
  WHERE lnk.Type <> N'parent' AND ld.Id IS NULL
  
)
GO
PRINT N'Creating Function [BIDoc].[f_GetMessages]...';


GO
CREATE FUNCTION [BIDoc].[f_GetMessages]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT 
se.[Caption] AS 'SourceName'
,sed.[DescriptiveRootPath] AS 'SourcePath'
,te.[Caption]	AS'TargetName'
,ted.[DescriptiveRootPath] AS 'TargetPath'
,dmt.[DataMessageType]
,dm.[Message]
FROM BIDoc.DataMessages dm
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = dm.SourceElementId
INNER JOIN BIDoc.ModelElements te ON te.ModelElementId = dm.TargetElementId
INNER JOIN BIDoc.DataMessagesType dmt ON dmt.DataMessagesTypeId = dm.DataMessagesTypeId
INNER JOIN BIDoc.ModelElementDescriptivePaths sed ON sed.ModelElementId = dm.SourceElementId
INNER JOIN BIDoc.ModelElementDescriptivePaths ted ON Ted.ModelElementId = dm.TargetElementId
WHERE se.ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementsNoDef]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementsNoDef]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
SELECT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,NULL [Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] WHERE ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementType]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementType]
(	
	@modelElementId INT 
)
RETURNS TABLE AS RETURN
(
	SELECT Type FROM BIDoc.ModelElements WHERE ModelElementId = @modelElementId
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelLinksSecondLevelAncestors]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelLinksSecondLevelAncestors]
(
	@rootId INT
)
RETURNS TABLE AS RETURN
(
SELECT DISTINCT l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN [BIDoc].ModelElements ef ON l.ElementFromId = ef.ModelElementId
  INNER JOIN [BIDoc].ModelElements et ON l.ElementToId = et.ModelElementId
  INNER JOIN BIDoc.HigherLevelElementAncestors afrom ON afrom.AncestorElementId = @rootId AND afrom.DetailLevel = 2 AND afrom.SouceElementId = ef.ModelElementId
  INNER JOIN BIDoc.HigherLevelElementAncestors ato ON ato.AncestorElementId = @rootId AND ato.DetailLevel = 2 AND ato.SouceElementId = et.ModelElementId
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementsSecondLevelAncestor]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementsSecondLevelAncestor]
(
	@rootId INT
)
RETURNS TABLE AS RETURN
(
SELECT DISTINCT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e 
  INNER JOIN BIDoc.HigherLevelElementAncestors a ON a.AncestorElementId = @rootId AND a.DetailLevel = 2 AND a.SouceElementId = e.ModelElementId
)
GO
PRINT N'Creating Function [BIDoc].[f_GetModelElementByNodeId]...';


GO
CREATE FUNCTION [BIDoc].[f_GetModelElementByNodeId]
(
	@nodeId INT
)
RETURNS TABLE AS RETURN
(
SELECT e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,e.[Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e
  INNER JOIN BIDoc.BasicGraphNodes n ON n.SourceElementId = e.ModelElementId 
  WHERE n.BasicGraphNodeId = @nodeId
)
GO
PRINT N'Creating Function [Inspect].[f_GetHighLevelLineageDestinations]...';


GO
CREATE FUNCTION [Inspect].[f_GetHighLevelLineageDestinations]
(
  @elementId INT
)
RETURNS TABLE
AS RETURN
(
 
 WITH descendants AS
(
SELECT n.BasicGraphNodeId 
FROM BIDoc.BasicGraphNodes n
WHERE n.SourceElementId = @elementId AND n.GraphKind = N'DataFlowTransitive'

UNION ALL

SELECT n.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes n
INNER JOIN descendants d ON d.BasicGraphNodeId = n.ParentId
)
,targetLeaves AS(
SELECT --*
src.BasicGraphNodeId, src.TopologicalOrder, src.SourceElementId, src.ParentId
FROM descendants d
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = d.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes src ON src.BasicGraphNodeId = l.NodeToId
WHERE l.LinkType = N'DataFlow'
--ORDER BY src.TopologicalOrder DESC
)
--SELECT * FROM sourceLeaves WHERE 
,ancestors AS
(
SELECT 
sl.BasicGraphNodeId, 
sl.TopologicalOrder, 
sl.BasicGraphNodeId AncestorNodeId, 
sl.ParentId AncestorParentId
FROM targetLeaves sl
INNER JOIN BIDoc.BasicGraphNodes a ON a.BasicGraphNodeId = sl.ParentId

UNION ALL

SELECT
sl.BasicGraphNodeId, 
sl.TopologicalOrder, 
a.BasicGraphNodeId AncestorNodeId, 
a.ParentId AncestorParentId
FROM ancestors sl
INNER JOIN BIDoc.BasicGraphNodes a ON a.BasicGraphNodeId = sl.AncestorParentId
)
--SELECT * FROM ancestors a WHERE a.AncestorNodeId = 21235622
,baseLevelAncestors AS
(
SELECT 
a.TopologicalOrder, n.Name, n.BasicGraphNodeId, n.NodeType, n.SourceElementId, n.[Description],
ROW_NUMBER() OVER(PARTITION BY n.BasicGraphNodeId ORDER BY a.TopologicalOrder DESC) RN
FROM ancestors a
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = a.AncestorNodeId
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE n.NodeType IN (
N'ViewElement',
N'PhysicalMeasureElement',
N'ReportElement',
N'SchemaTableElement',
N'ProcedureElement',
N'PackageElement',
N'CalculatedMeasureElement'
)
)
SELECT 
n.BasicGraphNodeId
,n.Name
,n.GraphKind
,n.[Description]
,n.NodeType
,n.ProjectConfigId
,n.SourceElementId
,ROW_NUMBER() OVER(ORDER BY
IIF(a.NodeType IN (N'ReportCalculatedMeasureElement', N'CubeCalculatedMeasureElement'), 1, 0),
a.TopologicalOrder) TopologicalOrder
,n.ParentId
,e.RefPath
,td.TypeDescription
,e.Type ElementType
FROM baseLevelAncestors a 
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = a.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
WHERE a.RN = 1
)
GO
PRINT N'Creating Function [Inspect].[f_ListModelReports]...';


GO
CREATE FUNCTION [Inspect].[f_ListModelReports]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(

WITH srvs AS
(
SELECT ModelElementId FROM BIDoc.ModelElements e WHERE e.Type = N'CD.DLS.Model.Mssql.Ssrs.ServerElement'
AND e.ProjectConfigId = @projectconfigid
)
,folders AS
(
SELECT f.Caption ItemPath, f.ModelElementId FROM srvs
INNER JOIN BIDoc.ModelLinks l ON l.Type = 'parent' AND l.ElementToId = srvs.ModelElementId
INNER JOIN BIDoc.ModelElements f ON f.ModelElementId = l.ElementFromId
WHERE f.Type = N'CD.DLS.Model.Mssql.Ssrs.FolderElement'

UNION ALL

SELECT IIF(folders.ItemPath = N'/', folders.ItemPath, folders.ItemPath + N'/') + subf.Caption, subf.ModelElementId 
FROM folders
INNER JOIN BIDoc.ModelLinks l ON l.ElementToId = folders.ModelElementId AND l.Type = 'parent'
INNER JOIN BIDoc.ModelElements subf ON subf.ModelElementId = l.ElementFromId
WHERE subf.Type = N'CD.DLS.Model.Mssql.Ssrs.FolderElement'
)
SELECT IIF(folders.ItemPath = N'/', folders.ItemPath, folders.ItemPath + N'/') + re.Caption ItemPath, re.Caption, re.ModelElementId, re.RefPath 
FROM folders
INNER JOIN BIDoc.ModelLinks l ON l.ElementToId = folders.ModelElementId AND l.Type = 'parent'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementFromId
WHERE re.Type = N'CD.DLS.Model.Mssql.Ssrs.ReportElement'

)
GO
PRINT N'Creating Function [Inspect].[f_GetGraphNodeChildrenExtended]...';


GO
CREATE FUNCTION [Inspect].[f_GetGraphNodeChildrenExtended]
(
	@parentId INT
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.[Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
	  ,dp.DescriptivePath
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
LEFT JOIN BIDoc.ModelElementDescriptivePaths dp ON dp.ModelElementId = e.ModelElementId
WHERE ParentId = @parentId
)
GO
PRINT N'Creating Function [Inspect].[f_GraphNodeLineageOriginOneLevel]...';


GO
CREATE FUNCTION [Inspect].[f_GraphNodeLineageOriginOneLevel]
(
  @nodeId INT
)
RETURNS TABLE
AS RETURN
(
  -- the selected node and all descendants
  WITH descendants AS
  (
	SELECT e.BasicGraphNodeId, e.Name, e.Description 
	FROM BIDoc.BasicGraphNodes e WHERE e.BasicGraphNodeId = @nodeId
	
	UNION ALL

	SELECT e.BasicGraphNodeId, e.Name, e.Description
	FROM descendants d
	INNER JOIN BIDoc.BasicGraphNodes e ON e.ParentId = d.BasicGraphNodeId
  )
  SELECT DISTINCT
		n.[BasicGraphNodeId]
		,n.[Name]
		,n.[NodeType]
		,n.[Description]
		,n.[ParentId]
		,n.[GraphKind]
		,n.[ProjectConfigId]
		,n.[SourceElementId]
		,n.[TopologicalOrder]
		,e.[RefPath]
		FROM BIDoc.BasicGraphLinks lnk
		INNER JOIN descendants l ON l.BasicGraphNodeId = lnk.NodeToId
		INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = lnk.NodeFromId
		INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
		LEFT JOIN descendants cycle ON cycle.BasicGraphNodeId = n.BasicGraphNodeId
		WHERE cycle.BasicGraphNodeId IS NULL AND lnk.LinkType IN ('DataFlow')
)
GO
PRINT N'Creating Function [Inspect].[f_GetGraphNodeExtended]...';


GO
CREATE FUNCTION [Inspect].[f_GetGraphNodeExtended]
(
	@nodeId INT
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,e.Definition [Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
	  ,e.Type ElementType
	  ,dp.DescriptivePath
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
LEFT JOIN BIDoc.ModelElementDescriptivePaths dp ON dp.ModelElementId = e.ModelElementId
WHERE BasicGraphNodeId = @nodeId
)
GO
PRINT N'Creating Function [Inspect].[f_GetHighLevelSolutionTree]...';


GO
CREATE FUNCTION Inspect.f_GetHighLevelSolutionTree
(@projectConfigId UNIQUEIDENTIFIER)
RETURNS TABLE
AS RETURN
SELECT
	[ModelElementId],
	[Caption],
	[Type], 
	[TypeDescription], 
	[MaxParentLevel], 
	[ParentElementId], 
	[RefPath]
FROM Inspect.HighLevelSolutionTrees 
WHERE ProjectConfigId = @projectConfigId

/*
WITH elemTree AS(
	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, 0 ParentLevel
	FROM BIDoc.ModelElements e 
	WHERE e.ProjectConfigId = @projectConfigId AND e.Type IN (
	N'CD.DLS.Model.Mssql.Ssrs.ReportElement',
	N'CD.DLS.Model.Mssql.Ssis.PackageElement',
	N'CD.DLS.Model.Mssql.Ssas.CubeElement',
	N'CD.DLS.Model.Mssql.Ssas.DimensionElement',
	N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',
	N'CD.DLS.Model.Mssql.Db.ViewElement',
	N'CD.DLS.Model.Mssql.Db.SchemaTableElement',
	N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',
	N'CD.DLS.Model.Mssql.Db.ProcedureElement',
	N'CD.DLS.Model.Mssql.Tabular.ParsedTabularTableColumn'
	)

	UNION ALL

	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, ParentLevel + 1
	FROM elemTree t
	INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = t.ModelElementId AND l.Type = N'parent'
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
)
,x AS(

SELECT ModelElementId, Caption, elemTree.[Type], td.TypeDescription, MAX(ParentLevel) MaxParentLevel, RefPath
FROM elemTree
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON [Type] = td.ElementType
GROUP BY ModelElementId, Caption, elemTree.[Type], td.TypeDescription, RefPath
)
SELECT ModelElementId, Caption, x.[Type], TypeDescription, MaxParentLevel, l.ElementToId ParentElementId, RefPath
FROM x
LEFT JOIN BIDoc.ModelLinks l ON l.ElementFromId = ModelElementId AND l.Type = N'parent'
*/
GO
PRINT N'Creating Function [Inspect].[f_GetHighLevelLineageSources]...';


GO
CREATE FUNCTION [Inspect].[f_GetHighLevelLineageSources]
(
  @elementId INT
)
RETURNS TABLE
AS RETURN
(

WITH descendants AS
(
SELECT n.BasicGraphNodeId 
FROM BIDoc.BasicGraphNodes n
WHERE n.SourceElementId = @elementId AND n.GraphKind = N'DataFlowTransitive'

UNION ALL

SELECT n.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes n
INNER JOIN descendants d ON d.BasicGraphNodeId = n.ParentId
)
,sourceLeaves AS(
SELECT --*
src.BasicGraphNodeId, src.TopologicalOrder, src.SourceElementId, src.ParentId
FROM descendants d
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = d.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes src ON src.BasicGraphNodeId = l.NodeFromId
WHERE l.LinkType = N'DataFlow'
--ORDER BY src.TopologicalOrder DESC
)
--SELECT * FROM sourceLeaves WHERE 
,ancestors AS
(
SELECT 
sl.BasicGraphNodeId, 
sl.TopologicalOrder, 
sl.BasicGraphNodeId AncestorNodeId, 
sl.ParentId AncestorParentId
FROM sourceLeaves sl
INNER JOIN BIDoc.BasicGraphNodes a ON a.BasicGraphNodeId = sl.ParentId

UNION ALL

SELECT
sl.BasicGraphNodeId, 
sl.TopologicalOrder, 
a.BasicGraphNodeId AncestorNodeId, 
a.ParentId AncestorParentId
FROM ancestors sl
INNER JOIN BIDoc.BasicGraphNodes a ON a.BasicGraphNodeId = sl.AncestorParentId
)
--SELECT * FROM ancestors a WHERE a.AncestorNodeId = 21235622
,baseLevelAncestors AS
(
SELECT 
a.TopologicalOrder, n.Name, n.BasicGraphNodeId, n.NodeType, n.SourceElementId, n.[Description],
ROW_NUMBER() OVER(PARTITION BY n.BasicGraphNodeId ORDER BY a.TopologicalOrder DESC) RN
FROM ancestors a
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = a.AncestorNodeId
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE n.NodeType IN (
N'ViewElement',
N'PhysicalMeasureElement',
N'ReportElement',
N'SchemaTableElement',
N'ProcedureElement',
N'PackageElement',
N'CalculatedMeasureElement'
)
)
SELECT 
n.BasicGraphNodeId
,n.Name
,n.GraphKind
,n.[Description]
,n.NodeType
,n.ProjectConfigId
,n.SourceElementId
,ROW_NUMBER() OVER(ORDER BY
IIF(a.NodeType IN (N'ReportCalculatedMeasureElement', N'CubeCalculatedMeasureElement'), 1, 0) DESC,
a.TopologicalOrder DESC) TopologicalOrder
,n.ParentId
,e.RefPath
,td.TypeDescription
,e.Type ElementType
FROM baseLevelAncestors a 
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = a.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
WHERE a.RN = 1
)
GO
PRINT N'Creating Function [Inspect].[f_ListExternalDfSources]...';


GO
CREATE FUNCTION [Inspect].[f_ListExternalDfSources]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(

SELECT 
se.ModelElementId, 
/**/ISNULL(JSON_VALUE(se.ExtendedProperties, '$.Command'), JSON_VALUE(se.ExtendedProperties, '$.OpenRowset'))/**/ /*N''*/ Command,
se.RefPath,
se.Caption,
mngre.Caption ManagerCaption,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.SourceType')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'SourceType')*/ SourceType,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.ConnectionString')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'ConnectionString')*/ ConnectionString,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.LocaleID')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'LocaleID')*/ LocaleID,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.CodePage')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'CodePage')*/ CodePage,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.Format')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'Format')*/ FileFormat
,pkge.ModelElementId PackageElementId
,pkge.RefPath PackageRefPath
,pkge.Caption PackageCaption
FROM BIDoc.ModelElements se
INNER JOIN BIDoc.ModelLinks mngrl ON se.ModelElementId = mngrl.ElementFromId AND mngrl.Type = N'SourceConnection'
INNER JOIN BIDoc.ModelElements mngre ON mngre.ModelElementId = mngrl.ElementToId
INNER JOIN BIDoc.ModelElements pkge ON LEFT(se.RefPath, LEN(pkge.RefPath)) = pkge.RefPath
WHERE se.Type = N'CD.DLS.Model.Mssql.Ssis.DfSourceElement' 
--AND adm.f_SimpleJsonValue(se.ExtendedProperties, N'IsExternalSource') = N'true' 
AND JSON_VALUE(se.ExtendedProperties, '$.IsExternalSource') = N'true' 
AND se.ProjectConfigId = @projectconfigid
AND pkge.Type = N'CD.DLS.Model.Mssql.Ssis.PackageElement' AND pkge.ProjectConfigId = @projectconfigid

)
GO
PRINT N'Creating Function [Inspect].[f_GetHighLevelTypesUnderElement]...';


GO
CREATE FUNCTION Inspect.f_GetHighLevelTypesUnderElement
(@projectConfigId UNIQUEIDENTIFIER
,@rootElementId INT
)
RETURNS TABLE
AS RETURN

SELECT de.DescendantType AS ElementType, td.TypeDescription ,de.NodeType 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.HighLevelTypeDescendants de ON de.ParentType = e.Type
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON de.DescendantType = td.ElementType
INNER JOIN BIDoc.BasicGraphNodes n ON n.SourceElementId = e.ModelElementId
WHERE e.ModelElementId = @rootElementId AND n.GraphKind = N'DataFlow'

/*SELECT DISTINCT td.ElementType, td.TypeDescription, n.NodeType 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelElements se ON /*e.RefPath = N'Solution' OR*/ LEFT(se.RefPath, LEN(e.RefPathPrefix)) = e.RefPathPrefix
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON se.[Type] = td.ElementType
INNER JOIN BIDoc.BasicGraphNodes n ON n.SourceElementId = se.ModelElementId
WHERE e.ModelElementId = @rootElementId AND n.GraphKind = N'DataFlow'
AND se.Type IN (
	N'CD.DLS.Model.Mssql.Ssrs.ReportElement',
	N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement',
	N'CD.DLS.Model.Mssql.Ssis.PackageElement',
	N'CD.DLS.Model.Mssql.Ssas.CubeElement',
	N'CD.DLS.Model.Mssql.Ssas.DimensionElement',
	N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',
	N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',
	N'CD.DLS.Model.Mssql.Db.DatabaseElement',
	N'CD.DLS.Model.Mssql.Db.ViewElement',
	N'CD.DLS.Model.Mssql.Db.SchemaTableElement',
	N'CD.DLS.Model.Mssql.Db.ColumnElement',
	N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',
	N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',
	N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement'
	/*
	,
	N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement'
	*/
	)*/
GO
PRINT N'Creating Function [Inspect].[f_GetGraphNodesExtended]...';


GO
CREATE FUNCTION [Inspect].[f_GetGraphNodesExtended]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50)
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.[Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
	  ,e.Type ElementType
	  ,dp.DescriptivePath
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
LEFT JOIN BIDoc.ModelElementDescriptivePaths dp ON dp.ModelElementId = e.ModelElementId
WHERE GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Inspect].[f_ListExternalDfSourceColumns]...';


GO
CREATE FUNCTION [Inspect].[f_ListExternalDfSourceColumns]
(
	@projectconfigid UNIQUEIDENTIFIER
)
RETURNS TABLE AS
RETURN
(

WITH externalDfSources AS(
SELECT 
se.ModelElementId, 
/**/ISNULL(JSON_VALUE(se.ExtendedProperties, '$.Command'), JSON_VALUE(se.ExtendedProperties, '$.OpenRowset')) /**/ /*N''*/ Command,
se.RefPath,
se.Caption,
mngre.Caption ManagerCaption,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.SourceType')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'SourceType')*/ SourceType,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.ConnectionString')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'ConnectionString')*/ ConnectionString,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.LocaleID')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'LocaleID')*/ LocaleID,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.CodePage')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'CodePage')*/ CodePage,
/**/JSON_VALUE(mngre.ExtendedProperties, N'$.Format')/**/ /*adm.f_SimpleJsonValue(mngre.ExtendedProperties, N'Format')*/ FileFormat
,pkge.ModelElementId PackageElementId
,pkge.RefPath PackageRefPath
,pkge.Caption PackageCaption
FROM BIDoc.ModelElements se
INNER JOIN BIDoc.ModelLinks mngrl ON se.ModelElementId = mngrl.ElementFromId AND mngrl.Type = N'SourceConnection'
INNER JOIN BIDoc.ModelElements mngre ON mngre.ModelElementId = mngrl.ElementToId
INNER JOIN BIDoc.ModelElements pkge ON LEFT(se.RefPath, LEN(pkge.RefPath)) = pkge.RefPath
WHERE se.Type = N'CD.DLS.Model.Mssql.Ssis.DfSourceElement' 
--AND adm.f_SimpleJsonValue(se.ExtendedProperties, N'IsExternalSource') = N'true' 
AND JSON_VALUE(se.ExtendedProperties, '$.IsExternalSource') = N'true' 
AND se.ProjectConfigId = @projectconfigid
AND pkge.Type = N'CD.DLS.Model.Mssql.Ssis.PackageElement' AND pkge.ProjectConfigId = @projectconfigid
)
SELECT se.ModelElementId SourceElementId, ce.ModelElementId, ce.Caption ColumnName
,/**/JSON_VALUE(ce.ExtendedProperties, '$.DtsDataType') /**/ /*adm.f_SimpleJsonValue(ce.ExtendedProperties, N'DtsDataType')*/ DataType
,/**/JSON_VALUE(ce.ExtendedProperties, '$.Length') /**/ /*adm.f_SimpleJsonValue(ce.ExtendedProperties, N'Length')*/ Length
,/**/JSON_VALUE(ce.ExtendedProperties, '$.Precision') /**/ /*adm.f_SimpleJsonValue(ce.ExtendedProperties, N'Precision')*/ Precision
,/**/JSON_VALUE(ce.ExtendedProperties, '$.Scale') /**/ /*adm.f_SimpleJsonValue(ce.ExtendedProperties, N'Scale')*/ Scale
,ce.RefPath

FROM externalDfSources se
INNER JOIN BIDoc.BasicGraphNodes n ON n.SourceElementId = se.ModelElementId AND n.GraphKind = N'DataFlow'
INNER JOIN BIDoc.BasicGraphNodes c1 ON c1.ParentId = n.BasicGraphNodeId AND c1.NodeType = N'DfOutputElement'
INNER JOIN BIDoc.ModelElements oe ON oe.ModelElementId = c1.SourceElementId
INNER JOIN BIDoc.BasicGraphNodes c2 ON c2.ParentId = c1.BasicGraphNodeId
INNER JOIN BIDoc.ModelElements ce ON ce.ModelElementId = c2.SourceElementId

WHERE oe.Type = N'CD.DLS.Model.Mssql.Ssis.DfOutputElement' 
AND JSON_VALUE(oe.ExtendedProperties, '$.OutputType') = N'0' 
AND ce.Type = N'CD.DLS.Model.Mssql.Ssis.DfColumnElement'


)
GO
PRINT N'Creating Function [Inspect].[f_GetGraphNodesByIdExtended]...';


GO
CREATE FUNCTION [Inspect].[f_GetGraphNodesByIdExtended]
(
	@nodeIds [BIDoc].[UDTT_IdList] READONLY
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.[Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
	  ,e.Type ElementType
	  ,dp.DescriptivePath
FROM @nodeIds ni
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = ni.Id
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
LEFT JOIN BIDoc.ModelElementDescriptivePaths dp ON dp.ModelElementId = e.ModelElementId
)
GO
PRINT N'Creating Function [Inspect].[f_GetBusinessTree]...';


GO
CREATE FUNCTION Inspect.f_GetBusinessTree
(
@projectConfigId UNIQUEIDENTIFIER--,
--@userIdentity NVARCHAR(255)
)
RETURNS TABLE
AS RETURN

WITH elemTree AS(
	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, 0 ParentLevel
	FROM BIDoc.ModelElements e 
	WHERE e.ProjectConfigId = @projectConfigId AND e.Type IN (
	N'CD.DLS.Model.Business.Organization.BusinessFolderElement',
	N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement'
	)
	--AND (e.RefPath LIKE N'Business/SharedFolder%' OR e.RefPath LIKE N'%Name=''' + @userIdentity + N'''%')

	UNION ALL

	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, ParentLevel + 1
	FROM elemTree t
	INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = t.ModelElementId AND l.Type = N'parent'
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
	WHERE e.Type = N'CD.DLS.Model.Business.Organization.BusinessFolderElement'
)
,x AS(

SELECT ModelElementId, Caption, elemTree.[Type], td.TypeDescription, MAX(ParentLevel) MaxParentLevel, RefPath
FROM elemTree
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON [Type] = td.ElementType
GROUP BY ModelElementId, Caption, elemTree.[Type], td.TypeDescription, RefPath
)
SELECT ModelElementId, Caption, x.[Type], TypeDescription, MaxParentLevel, l.ElementToId ParentElementId, RefPath
FROM x
LEFT JOIN BIDoc.ModelLinks l ON l.ElementFromId = ModelElementId AND l.Type = N'parent'
GO
PRINT N'Creating Function [Inspect].[f_GetGraphNodesExtended_ForceSeek]...';


GO
CREATE FUNCTION [Inspect].[f_GetGraphNodesExtended_ForceSeek]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50)
)
RETURNS TABLE AS RETURN
(
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.[Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
	  ,e.Type ElementType
	  ,dp.DescriptivePath
FROM BIDoc.BasicGraphNodes n WITH (INDEX(IX_BIDoc_BasicGraphNodes_GrphKind_ProjectConfigId_RefPathIntervalStart))
INNER JOIN BIDoc.ModelElements e WITH (FORCESEEK) ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
LEFT JOIN BIDoc.ModelElementDescriptivePaths dp ON dp.ModelElementId = e.ModelElementId
WHERE GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid
)
GO
PRINT N'Creating Function [Search].[f_GetRootElements]...';


GO
CREATE FUNCTION [Search].[f_GetRootElements]
(
	@projectConfigId UNIQUEIDENTIFIER
)
RETURNS TABLE AS RETURN
(
	SELECT e.ModelElementId, r.Caption, e.Type ElementType, e.RefPathPrefix
	FROM Search.RootElements r
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = r.ModelElementId
	WHERE r.ProjectConfigId = @projectConfigId
)
GO
PRINT N'Creating Function [Stg].[f_GetExtractItems]...';


GO
CREATE FUNCTION [Stg].[f_GetExtractItems]
(
	@ExtractId	UNIQUEIDENTIFIER,
	@ComponentId INT,
	@ObjectType NVARCHAR(200)
)
RETURNS TABLE AS RETURN
(
SELECT
	[ExtractItemId],	
	[ComponentId],
	[ObjectType],
	[ObjectName],
	[Content]
FROM Stg.ExtractItems
WHERE ExtractId = @ExtractId AND ComponentId = @ComponentId AND ObjectType = @ObjectType
)
GO
PRINT N'Creating Function [Stg].[f_GetExtractItemsNoDef]...';


GO
CREATE FUNCTION [Stg].[f_GetExtractItemsNoDef]
(
	@ExtractId	UNIQUEIDENTIFIER,
	@ComponentId INT,
	@ObjectType NVARCHAR(200)
)
RETURNS TABLE AS RETURN
(
SELECT
	[ExtractItemId],	
	[ComponentId],
	[ObjectType],
	[ObjectName],
	NULL [Content]
FROM Stg.ExtractItems
WHERE ExtractId = @ExtractId AND ComponentId = @ComponentId AND ObjectType = @ObjectType
)
GO
PRINT N'Creating Function [Stg].[f_GetExtractItem]...';


GO
CREATE FUNCTION [Stg].[f_GetExtractItem]
(
	@ExtractItemId	INT
)
RETURNS TABLE AS RETURN
(
SELECT
	[ExtractItemId],	
	[ComponentId],
	[ObjectType],
	[ObjectName],
	[Content]
FROM Stg.ExtractItems
WHERE ExtractItemId = @ExtractItemId
)
GO
PRINT N'Creating Function [Adm].[f_splitstring]...';


GO
CREATE FUNCTION [Adm].[f_splitstring]
(	
	@vInputList nvarchar(max),
	@vDelimiter nvarchar(10) = ';'
)
RETURNS @List TABLE (item varchar(max),rwn int) 
AS
begin

 declare @Item varchar(8000);
 declare @i int = 1;

 while CHARINDEX(@vDelimiter,@vInputList,0)<>0
   begin
    Select
     @Item = rtrim(ltrim(substring(@vInputList,1,CHARINDEX(@vDelimiter,@vInputList,0)-1))),
	 @vInputList = ltrim(rtrim(substring(@vInputList,CHARINDEX(@vDelimiter,@vInputList,0)+Len(@vDelimiter),Len(@vInputList))));

	 if len(@Item)>0
	   insert into @List select @Item,@i;
     
	 set @i = @i + 1;

   end

 if len(@vInputList)>0
  insert into @List select @vInputList,@i;

 return;
 
end
GO
PRINT N'Creating Function [Adm].[f_SimpleJsonValue]...';


GO
CREATE FUNCTION [Adm].[f_SimpleJsonValue]
(
	@json nvarchar(MAX),
	@key nvarchar(MAX)
)
RETURNS nvarchar(MAX)
AS
BEGIN

IF LEN(@json) < 3
RETURN NULL

DECLARE @trim NVARCHAR(MAX) = REVERSE(LEFT(REVERSE(LEFT(@json, LEN(@json)-1)), LEN(@json)-3))
DECLARE @res NVARCHAR(MAX)

SELECT @res /*key_item ItemNumber, [1] [Key],*/  = [2] -- [Value]
FROM  
(
SELECT spl.rwn key_item, pt.item, pt.rwn FROM adm.f_splitstring(@trim, N',"') spl
OUTER APPLY adm.f_splitstring(spl.item, N'":') pt
) AS src
PIVOT  
(  
MAX(item)  
FOR rwn IN ([1], [2])  
) AS PivotTable  
WHERE [1] = @key

RETURN (REPLACE(@res,'"',''))

END
GO
PRINT N'Creating Procedure [Adm].[sp_ClearProjectGraphs]...';


GO
CREATE PROCEDURE [Adm].[sp_ClearProjectGraphs]
  @projectConfigId UNIQUEIDENTIFIER
  AS
  BEGIN

  --DELETE dfn FROM DataFlowGraphInfoNodes dfn
  --INNER JOIN BasicGraphInfoNodes n ON n.BasicGraphInfoNodeId = dfn.BasicGraphInfoNodeId
  --WHERE n.ProjectConfigId = @projectConfigId

  DELETE FROM BasicGraphInfoNodes WHERE ProjectConfigId = @projectConfigId

  DELETE FROM BasicGraphInfoLinks WHERE ProjectConfigId = @projectConfigId

  END
GO
PRINT N'Creating Procedure [Adm].[sp_CreateProjectConfig]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateProjectConfig]
	@projectconfigid UNIQUEIDENTIFIER,
	@name NVARCHAR(200)
AS
INSERT INTO Adm.ProjectConfigs(ProjectConfigId, Name) VALUES(@projectconfigid, @name)



INSERT INTO BIDoc.ModelElements(ExtendedProperties, RefPath, Definition, Caption, Type, RefPathPrefix, RefPathIntervalStart, RefPathIntervalEnd, ProjectConfigId)
VALUES(N'{}', N'', NULL, N'', N'CD.DLS.Model.SolutionModelElement', N'', 0, 0, @projectconfigid)

DECLARE @solutionElementId INT = (SELECT ModelElementId FROM BIDoc.ModelElements WHERE RefPath = N'' AND ProjectConfigId = @projectconfigid)

INSERT INTO BIDoc.ModelElements(ExtendedProperties, RefPath, Definition, Caption, Type, RefPathPrefix, RefPathIntervalStart, RefPathIntervalEnd, ProjectConfigId)
VALUES(N'{}', N'Business', NULL, N'Business Objects', N'CD.DLS.Model.Business.Organization.BusinessRootElement', N'Business', 0, 0, @projectconfigid)

DECLARE @businessElementId INT = (SELECT ModelElementId FROM BIDoc.ModelElements WHERE RefPath = N'Business' AND ProjectConfigId = @projectconfigid)

INSERT INTO BIDoc.ModelLinks(ElementFromId, ElementToId, [Type], ExtendedProperties)
VALUES (@businessElementId, @solutionElementId, N'parent', N'{}')

INSERT INTO BIDoc.ModelElements(ExtendedProperties, RefPath, Definition, Caption, Type, RefPathPrefix, RefPathIntervalStart, RefPathIntervalEnd, ProjectConfigId)
VALUES(N'{}', N'Business/SharedFolder', NULL, N'Shared Artefacts', N'CD.DLS.Model.Business.Organization.BusinessFolderElement', N'Business/SharedFolder', 0, 0, @projectconfigid)

DECLARE @sharedFolderId INT = (SELECT ModelElementId FROM BIDoc.ModelElements WHERE RefPath = N'Business/SharedFolder' AND ProjectConfigId = @projectconfigid)

INSERT INTO BIDoc.ModelLinks(ElementFromId, ElementToId, [Type], ExtendedProperties)
VALUES (@sharedFolderId, @businessElementId, N'parent', N'{}')
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectSsrsComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectSsrsComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_SsrsProjectComponents READONLY
AS
DELETE FROM Adm.SsrsProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.SsrsProjectComponents(
			[SsrsMode]
			,[ServerName]
			,[FolderPath]
			,[SsrsServiceUrl]
			,[SsrsExecutionServiceUrl]
			,[SharepointBaseUrl]
			,[SharepointFolder]
			,[ProjectConfig_ProjectConfigId]
		   )
		   SELECT
		   SsrsMode
		   ,ServerName
		   ,FolderPath
		   ,SsrsServiceUrl
		   ,SsrsExecutionServiceUrl
		   ,SharepointBaseUrl
		   ,SharepointFolder
		   ,@projectconfigid
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectSsisComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectSsisComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_SsisProjectComponents READONLY
AS
DELETE FROM Adm.SsisProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.SsisProjectComponents(
			[ServerName]
           ,[FolderName]
		   ,[ProjectName]
		   ,[ProjectConfig_ProjectConfigId]
		   )
		   SELECT
		   ServerName
		   ,FolderName
		   ,ProjectName
		   ,@projectconfigid
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectSsasDbComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectSsasDbComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_SsasDbProjectComponents READONLY
AS
DELETE FROM Adm.SsasDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.SsasDbProjectComponents(
			[ServerName]
           ,[DbName]
		   ,[SSASType]
		   ,[ProjectConfig_ProjectConfigId]
		   )
		   SELECT
		   ServerName
		   ,DbName
		   ,SSASType
		   ,@projectconfigid
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectMssqlAgentComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectMssqlAgentComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_MssqlAgentProjectComponents READONLY
AS
DELETE FROM Adm.MssqlAgentProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.MssqlAgentProjectComponents(
			[ServerName]
           ,[JobName]
		   ,[ProjectConfig_ProjectConfigId]
		   )
		   SELECT
		   ServerName
		   ,JobName
		   ,@projectconfigid
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectMssqlDbComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectMssqlDbComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_MssqlDbProjectComponents READONLY
AS
DELETE FROM Adm.MssqlDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.MssqlDbProjectComponents(
			[ServerName]
           ,[DbName]
		   ,[ProjectConfig_ProjectConfigId]
		   )
		   SELECT
		   ServerName
		   ,DbName
		   ,@projectconfigid
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_InvalidateRequestCache]...';


GO
CREATE PROCEDURE [Adm].[sp_InvalidateRequestCache]
	@projectconfigid UNIQUEIDENTIFIER, 
	@coretype NVARCHAR(50) = NULL
AS
UPDATE h SET h.CacheValidUntil = GETDATE(), h.CacheValid = 0 
FROM adm.RequestMessageHistory h
INNER JOIN adm.RequestMessages m ON h.InitMessage_MessageId = m.MessageId
WHERE m.RequestForCoreType = ISNULL(@coreType, m.RequestForCoreType) AND m.MessageToProjectId = @projectconfigid
GO
PRINT N'Creating Procedure [Adm].[sp_SaveRequestMessageHistory]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveRequestMessageHistory]
	@requestmessages [Adm].[UDTT_RequestMessages] READONLY,
	@cachevaliduntil [datetimeoffset](7)
AS
INSERT INTO [Adm].[RequestMessageHistory]
(
	   [RequestId]
      ,[CacheValid]
      ,[CacheValidUntil]
      ,[InitMessage_MessageId]
      ,[ResponseMessage_MessageId]
)
SELECT
	   m.[RequestId]
      ,IIF(@cachevaliduntil > GETDATE(), 1, 0)
      ,@cachevaliduntil
      ,iniRequest.MessageId [InitMessage_MessageId]
      ,m.MessageId [ResponseMessage_MessageId]
FROM @requestmessages m
INNER JOIN [Adm].[RequestMessages] iniRequest ON iniRequest.MessageType = N'RequestCreated' AND iniRequest.RequestId = m.RequestId
GO
PRINT N'Creating Procedure [Adm].[sp_SaveRequestMessages]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveRequestMessages]
	@requestmessages [Adm].[UDTT_RequestMessages] READONLY,
	@attachments [Adm].[UDTT_RequestMessageAttachments] READONLY
AS
DECLARE @rc INT

INSERT INTO [Adm].[RequestMessages]
(
	   [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[CustomerCode]
	  ,[RequestFromUserId]
)
SELECT
	   a.[MessageId]
      ,a.[RequestId]
      ,a.[Content]
      ,a.[RequestForCoreType]
      ,a.[RequestProcessingMethod]
      ,a.[MessageFromId]
      ,a.[MessageOriginName]
      ,a.[MessageOriginId]
      ,a.[MessageFromName]
      ,a.[MessageToObjectId]
      ,a.[MessageToProjectId]
      ,a.[MessageToObjectName]
      ,a.[MessageType]
      ,a.[CreatedDateTime]
      --,a.[TypeName]
      ,a.[Project_ProjectConfigId]
	  ,a.CustomerCode
	  ,a.RequestFromUserId
FROM @requestmessages a
LEFT JOIN adm.RequestMessages rm ON a.RequestId = rm.RequestId AND a.MessageType = rm.MessageType
WHERE rm.MessageId IS NULL

SELECT @@ROWCOUNT

--INSERT INTO [Adm].[RequestMessageAttachments]
--(
--		   [AttachmentId]
--           ,[Type]
--           ,[Name]
--           ,[Uri]
--           ,[MessageId]
--           ,[OriginalRequestMessage_MessageId]
--)
--SELECT 		[AttachmentId]
--           ,[Type]
--           ,[Name]
--           ,[Uri]
--           ,[MessageId]
--           ,[OriginalRequestMessage_MessageId]
--FROM @attachments   

--RETURN @rc
GO
PRINT N'Creating Procedure [Adm].[sp_SetGlobalConfigValue]...';


GO
CREATE PROCEDURE [Adm].[sp_SetGlobalConfigValue]
	@key NVARCHAR(200),
	@value NVARCHAR(MAX)
AS
IF(EXISTS (SELECT 1 FROM adm.GlobalConfig WHERE [Key] = @key))
	UPDATE adm.GlobalConfig SET [Value] = @value WHERE [Key] = @key
ELSE
	INSERT INTO adm.GlobalConfig([Key], [Value])
	VALUES(@key, @value)
GO
PRINT N'Creating Procedure [Adm].[sp_GetGlobalConfigValue]...';


GO
CREATE PROCEDURE [Adm].[sp_GetGlobalConfigValue]
	@key NVARCHAR(200)
AS
SELECT [Value] FROM adm.GlobalConfig WHERE [Key] = @key
GO
PRINT N'Creating Procedure [Adm].[sp_WriteLog]...';


GO
CREATE PROCEDURE [Adm].[sp_WriteLog]
	@messageType NVARCHAR(100),
	@message NVARCHAR(MAX),
	@stackTrace NVARCHAR(MAX) = NULL
AS
INSERT INTO Adm.Log(MessageType, [Message], StackTrace)
VALUES(@messageType, @message, @stackTrace)
GO
PRINT N'Creating Procedure [Adm].[sp_GetNewMessagesToObject]...';


GO
CREATE PROCEDURE [Adm].[sp_GetNewMessagesToObject]
(
@objectId UNIQUEIDENTIFIER
)
AS 
BEGIN TRAN


SELECT [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      --,[TypeName]
      ,[Project_ProjectConfigId]
	  ,[CustomerCode]
	  ,RequestFromUserId
  FROM [Adm].[RequestMessages]
  WHERE MessageToObjectId = @objectId 
  AND Received = 0

  UPDATE [Adm].RequestMessages SET Received = 1 
	WHERE MessageToObjectId = @objectId
	AND Received = 0

  COMMIT
GO
PRINT N'Creating Procedure [Adm].[sp_GetLogSinceId]...';


GO
CREATE PROCEDURE [Adm].[sp_GetLogSinceId](@lastSeenLogId INT)
AS
SELECT LogId, CreatedDate, MessageType, Message, StackTrace FROM adm.Log WHERE LogId > @lastSeenLogId
GO
PRINT N'Creating Procedure [Adm].[sp_SetMessageReceived]...';


GO
CREATE PROCEDURE [Adm].[sp_SetMessageReceived]
	@messageId UNIQUEIDENTIFIER
AS
	UPDATE [Adm].RequestMessages SET Received = 1 
	WHERE MessageId = @messageId
GO
PRINT N'Creating Procedure [Adm].[sp_CreateProjectViews]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateProjectViews]
AS

DECLARE @CreateSQL NVARCHAR(MAX)
DECLARE @CreateSQL1 NVARCHAR(MAX)

IF NOT EXISTS (SELECT TOP 1 1 FROM sys.views vw INNER JOIN sys.schemas s ON vw.schema_id = s.schema_id WHERE s.name = N'BIDoc' AND vw.name = N'DataFlowSequences')
	BEGIN
		SET @CreateSQL = 'CREATE VIEW [BIDoc].[DataFlowSequences] 
						  AS '
	END
ELSE
	BEGIN
		SET @CreateSQL = 'ALTER VIEW [BIDoc].[DataFlowSequences] 
						  AS '
	END

IF NOT EXISTS (SELECT TOP 1 1 FROM sys.views vw INNER JOIN sys.schemas s ON vw.schema_id = s.schema_id WHERE s.name = N'BIDoc' AND vw.name = N'DataFlowSequenceSteps')
	BEGIN
		SET @CreateSQL1 = 'CREATE VIEW [BIDoc].[DataFlowSequenceSteps] 
						  AS '
	END
ELSE
	BEGIN
		SET @CreateSQL1 = 'ALTER VIEW [BIDoc].[DataFlowSequenceSteps] 
						  AS '
	END

DECLARE @Enumerator CURSOR

SET @Enumerator = CURSOR LOCAL FAST_FORWARD FOR
SELECT REPLACE(CAST(ProjectConfigId AS NVARCHAR(100)),'-','')
FROM Adm.ProjectConfigs

OPEN @Enumerator

DECLARE @id NVARCHAR(100)

WHILE (1=1)
BEGIN
  FETCH NEXT FROM @Enumerator INTO @id
  IF (@@FETCH_STATUS <> 0) BREAK

  SET @CreateSQL = @CreateSQL + 'SELECT [SequenceId], [SourceNode], [TargetNode], [DetailLevel], [ProjectConfigid] FROM ['+ @id +'].[DataFlowSequences]
					  UNION ALL '

  SET @CreateSQL1 = @CreateSQL1 + 'SELECT [Id], [SourceNodeId], [TargetNodeId], [SequenceId], [StepNumber] FROM ['+ @id +'].[DataFlowSequenceSteps]
					  UNION ALL '
END

SET @CreateSQL = LEFT( @CreateSQL,LEN( @CreateSQL)-10)
SET @CreateSQL1 = LEFT( @CreateSQL1,LEN( @CreateSQL1)-10)


EXEC sp_executesql @CreateSQL
EXEC sp_executesql @CreateSQL1
GO
PRINT N'Creating Procedure [Adm].[sp_CreateNewProjectSchemaAndTables]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateNewProjectSchemaAndTables]
	@projectconfigid UNIQUEIDENTIFIER
AS
 DECLARE @id NVARCHAR(100)
 DECLARE @CreateSQL NVARCHAR(MAX)
 DECLARE @CreateSQL1 NVARCHAR(MAX)
 DECLARE @CreateSQL2 NVARCHAR(MAX)
 DECLARE @CreateSQL3 NVARCHAR(MAX)
 DECLARE @CreateSQL4 NVARCHAR(MAX)
 DECLARE @CreateSQL5 NVARCHAR(MAX)
 DECLARE @CreateSQL6 NVARCHAR(MAX)
 DECLARE @CreateSQL7 NVARCHAR(MAX)
 DECLARE @CreateSQL8 NVARCHAR(MAX)
 DECLARE @CreateSQL8_1 NVARCHAR(MAX)
 DECLARE @CreateSQL9 NVARCHAR(MAX)
 DECLARE @CreateSQL10 NVARCHAR(MAX)

 SET @id = REPLACE(CAST(@projectconfigid AS NVARCHAR(100)),'-','')

  /*Create Project Schema*/
 SET @CreateSQL = 
   'CREATE SCHEMA [' + @id  +']'

   /* Creata DataFlowSequences*/
 SET @CreateSQL1 = 	  
	'CREATE TABLE [' + @id + '].[DataFlowSequences]
    (
    	[SequenceId] INT NOT NULL PRIMARY KEY, --IDENTITY(1,1),
    	[SourceNode] INT NOT NULL,
    	[TargetNode] INT NOT NULL,
    	[DetailLevel] INT NOT NULL,
    	[ProjectConfigid] UNIQUEIDENTIFIER NOT NULL
    )'

 SET @CreateSQL2 = 
    'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequences_TargetNode]
    ON ['+ @id +'].[DataFlowSequences] ([TargetNode])
    INCLUDE ([SourceNode])'

 SET @CreateSQL3 = 
    'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequences_SourceNode_TargetNode]
    ON ['+ @id +'].[DataFlowSequences] ([SourceNode],[TargetNode])'

	/* Creata DataFlowSequenceSteps*/
 SET @CreateSQL4 = 
	'CREATE TABLE ['+ @id +'].[DataFlowSequenceSteps]
	 (
	 	[Id] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	 	[SourceNodeId] INT NOT NULL,
	 	[TargetNodeId] INT NOT NULL,
	 	[SequenceId] INT NOT NULL,
	 	[StepNumber] INT NOT NULL
	 )'
	
 SET @CreateSQL5 =  
	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId]
	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId]) INCLUDE([Id])'
 
 SET @CreateSQL6 = 	 
	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId_SourceNodeId]
	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId], [SourceNodeId]) INCLUDE([Id], [TargetNodeId])'
 
 SET @CreateSQL7 = 	 
	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId_TargetNodeId]
	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId], [TargetNodeId]) INCLUDE([Id], [SourceNodeId])'


    SET @CreateSQL8 = 	  
 	'CREATE TABLE [' + @id + '].[DataFlowSequences_Heap]
     (
     	[SequenceId] INT NOT NULL IDENTITY(1,1),
     	[SourceNode] INT NOT NULL,
     	[TargetNode] INT NOT NULL,
     	[DetailLevel] INT NOT NULL,
     	[ProjectConfigid] UNIQUEIDENTIFIER NOT NULL
     )'

 SET @CreateSQL8_1 = 
 	'CREATE NONCLUSTERED INDEX [IX_Sequences_Heap_Soource_Target_' + @id + ']
ON [' + @id + '].[DataFlowSequences_Heap] ([SourceNode],[TargetNode])
INCLUDE ([SequenceId])'
 
 
 
 SET @CreateSQL9 = 
 	'CREATE TABLE ['+ @id +'].[DataFlowSequenceSteps_Heap]
 	 (
 	 	[Id] INT NOT NULL IDENTITY(1,1),
 	 	[SourceNodeId] INT NOT NULL,
 	 	[TargetNodeId] INT NOT NULL,
 	 	[SequenceId] INT NOT NULL,
 	 	[StepNumber] INT NOT NULL
 	 )'

 SET @CreateSQL10 = 
 	'CREATE NONCLUSTERED INDEX [IX_SequenceSteps_Heap_SequenceId_' + @id + ']
ON [' + @id + '].[DataFlowSequenceSteps_Heap] ([SequenceId]) INCLUDE([StepNumber], [SourceNodeId], [TargetNodeId], [Id])'
 
 

 EXEC sp_executesql @CreateSQL
 EXEC sp_executesql @CreateSQL1
 EXEC sp_executesql @CreateSQL2
 EXEC sp_executesql @CreateSQL3
 EXEC sp_executesql @CreateSQL4
 EXEC sp_executesql @CreateSQL5
 EXEC sp_executesql @CreateSQL6
 EXEC sp_executesql @CreateSQL7
 EXEC sp_executesql @CreateSQL8
 EXEC sp_executesql @CreateSQL8_1
 EXEC sp_executesql @CreateSQL9
 EXEC sp_executesql @CreateSQL10
GO
PRINT N'Creating Procedure [Adm].[sp_AddUser]...';


GO
CREATE PROCEDURE [Adm].[sp_AddUser]
	@userIdentity NVARCHAR(300),
	@displayName NVARCHAR(MAX)
AS
IF NOT EXISTS(SELECT TOP 1 1 FROM adm.Users WHERE [Identity] = @userIdentity)
BEGIN
	INSERT INTO [Adm].[Users] ([Identity]) VALUES(@userIdentity);
END
UPDATE adm.Users SET DisplayName = @displayName WHERE [Identity] = @userIdentity

INSERT INTO adm.UserRoles (UserId, RoleId)
SELECT u.UserId, r.RoleId FROM 
adm.Users u
CROSS JOIN adm.Roles r
LEFT JOIN adm.UserRoles ur ON u.UserId = ur.UserId AND r.RoleId = ur.RoleId
WHERE u.[Identity] = @userIdentity AND r.RoleName = N'CustomerUser' AND ur.UserRoleId IS NULL
GO
PRINT N'Creating Procedure [Adm].[sp_WriteLogInfo]...';


GO
CREATE PROCEDURE [Adm].[sp_WriteLogInfo]
	@message NVARCHAR(MAX)
AS
INSERT INTO Adm.Log(MessageType, [Message], StackTrace)
VALUES(N'0', @message, NULL)
GO
PRINT N'Creating Procedure [Adm].[spRemovedUserFromRole]...';


GO
CREATE PROCEDURE [Adm].[spRemovedUserFromRole]
@userId INT,
@roleName NVARCHAR(300),
@projectconfigid UNIQUEIDENTIFIER
AS

DELETE ur FROM adm.UserRoles ur
INNER JOIN Adm.Roles r ON r.RoleId = ur.RoleId
WHERE ISNULL(r.ProjectConfigId, N'00000000-0000-0000-0000-000000000000') = ISNULL(@projectconfigid, N'00000000-0000-0000-0000-000000000000')
AND ur.UserId = @userId
GO
PRINT N'Creating Procedure [Adm].[sp_AddUserToRole]...';


GO
CREATE PROCEDURE [Adm].[sp_AddUserToRole]
@userId INT,
@roleName NVARCHAR(300),
@projectconfigid UNIQUEIDENTIFIER
AS

INSERT INTO adm.UserRoles (UserId, RoleId)
SELECT @userId, r.RoleId
FROM Adm.Roles r
LEFT JOIN adm.UserRoles ex ON ex.RoleId = r.RoleId AND ex.UserId = @userId
WHERE ISNULL(r.ProjectConfigId, N'00000000-0000-0000-0000-000000000000') = ISNULL(@projectconfigid, N'00000000-0000-0000-0000-000000000000')
AND ex.UserRoleId IS NULL
GO
PRINT N'Creating Procedure [Adm].[sp_CreateProjectRoles]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateProjectRoles]
@projectconfigid UNIQUEIDENTIFIER
AS

INSERT INTO [Adm].[Roles]([RoleName], [ProjectConfigId])
SELECT N'ProjectAdmin', @projectconfigid


INSERT INTO [Adm].[RolePermissions]([RoleId], [PermissionId])
SELECT r.RoleId, p.PermissionId FROM

(VALUES
	(N'ProjectAdmin', N'ManageProject'),
	(N'ProjectAdmin', N'ViewLineage'),
	(N'ProjectAdmin', N'UpdateLineage'),
	(N'ProjectAdmin', N'ViewAnnotations'),
	(N'ProjectAdmin', N'EditAnnotations')
	) perms(RoleName, PermissionName)
INNER JOIN adm.Roles r ON r.RoleName = perms.RoleName
INNER JOIN adm.Permissions p ON p.PermissionName = perms.PermissionName
WHERE r.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Adm].[sp_SaveRequestWaitForsInactive]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveRequestWaitForsInactive]
	@requestId UNIQUEIDENTIFIER,
	@waitForRequests [Adm].[UDTT_GuidList] READONLY
AS
INSERT INTO [Adm].[RequestsWaitFor]
(
	   [RequestId]
      ,[WaitForRequestId]
	  ,Active
)
SELECT
	@requestId
	,w.Id
	,0
FROM @waitForRequests w
GO
PRINT N'Creating Procedure [Adm].[sp_GetCompletedComplexRequests]...';


GO
CREATE PROCEDURE [Adm].[sp_GetCompletedComplexRequests]
AS
BEGIN

;WITH candidates AS
(
SELECT wf.RequestId, wf.WaitForRequestId, fd.MessageId FROM adm.RequestsWaitFor wf
-- have progress responses (are complex)
INNER JOIN adm.RequestMessages prog ON wf.RequestId = prog.RequestId AND prog.MessageType = N'Progress'
-- are not completed
LEFT JOIN adm.RequestMessages progf ON wf.RequestId = progf.RequestId AND progf.MessageType = N'RequestProcessed'
-- find finished dependencies (if any)
LEFT JOIN adm.RequestMessages fd ON fd.RequestId = wf.WaitForRequestId AND fd.MessageType = N'RequestProcessed'
WHERE progf.MessageId IS NULL
)
-- requests where all dependencies are finished
SELECT DISTINCT RequestId FROM candidates c
WHERE NOT EXISTS(SELECT TOP 1 1 FROM candidates unf WHERE c.RequestId = unf.RequestId AND unf.MessageId IS NULL)

END
GO
PRINT N'Creating Procedure [Adm].[sp_SaveDbOperationFinishedMessage]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveDbOperationFinishedMessage]
	@requestId UNIQUEIDENTIFIER
AS

DECLARE @messageId UNIQUEIDENTIFIER = NEWID()

INSERT INTO [Adm].[RequestMessages]
(
	   [MessageId]
      ,[RequestId]
      ,[Content]
      ,[RequestForCoreType]
      ,[RequestProcessingMethod]
      ,[MessageFromId]
      ,[MessageOriginName]
      ,[MessageOriginId]
      ,[MessageFromName]
      ,[MessageToObjectId]
      ,[MessageToProjectId]
      ,[MessageToObjectName]
      ,[MessageType]
      ,[CreatedDateTime]
      ,[Project_ProjectConfigId]
	  ,[CustomerCode]
	  ,RequestFromUserId
)
SELECT
	   @messageId
      ,rm.RequestId
      ,N'' [Content]
      ,rm.[RequestForCoreType]
      ,rm.[RequestProcessingMethod]
      ,rm.[MessageFromId]
      ,rm.[MessageOriginName]
      ,rm.[MessageOriginId]
      ,rm.[MessageFromName]
      ,rm.[MessageToObjectId]
      ,rm.[MessageToProjectId]
      ,rm.[MessageToObjectName]
      ,N'DbOperationFinished' [MessageType]
      ,GETDATE() [CreatedDateTime]
      ,rm.[Project_ProjectConfigId]
	  ,rm.[CustomerCode]
	  ,rm.RequestFromUserId
FROM adm.RequestMessages rm WHERE rm.MessageType = N'RequestCreated' AND rm.RequestId = @requestId
GO
PRINT N'Creating Procedure [Adm].[sp_GetRequestsFinishedWaiting]...';


GO
CREATE PROCEDURE [Adm].[sp_GetRequestsFinishedWaiting]
AS
BEGIN
BEGIN TRAN

-- those that are waited for but have RequestProcessed will no longer be waited for
DECLARE @finishedRequests Adm.UDTT_GuidList

INSERT INTO @finishedRequests(Id)
SELECT DISTINCT WaitForRequestId
FROM adm.RequestsWaitFor wf
INNER JOIN adm.RequestMessages m ON m.RequestId = wf.WaitForRequestId
WHERE Active = 1 AND m.MessageType = N'RequestProcessed'

UPDATE wf SET Active = 0 
FROM adm.RequestsWaitFor wf
INNER JOIN @finishedRequests f ON f.Id = wf.WaitForRequestId

-- those that were dependent on the newly finished requests and are not dependent on other active requests are done waiting
SELECT DISTINCT wf.RequestId 
FROM adm.RequestsWaitFor wf
INNER JOIN @finishedRequests f ON f.Id = wf.WaitForRequestId
LEFT JOIN RequestsWaitFor others ON others.RequestId = wf.RequestId AND others.Active = 1
WHERE others.RequestsWiaitForItemId IS NULL

COMMIT
END
GO
PRINT N'Creating Procedure [Adm].[sp_SaveRequestWaitFors]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveRequestWaitFors]
	@requestId UNIQUEIDENTIFIER,
	@waitForRequests [Adm].[UDTT_GuidList] READONLY
AS
INSERT INTO [Adm].[RequestsWaitFor]
(
	   [RequestId]
      ,[WaitForRequestId]
)
SELECT
	@requestId
	,w.Id
FROM @waitForRequests w
GO
PRINT N'Creating Procedure [Adm].[sp_DeleteRolePermission]...';


GO
CREATE PROCEDURE [Adm].[sp_DeleteRolePermission]
	@roleId INT,
	@permissionId INT
AS
DELETE [Adm].[RolePermissions] FROM [Adm].[RolePermissions] rp
WHERE rp.RoleId = @roleId AND rp.PermissionId = @permissionId
GO
PRINT N'Creating Procedure [Adm].[sp_DeleteRoleMember]...';


GO
CREATE PROCEDURE [Adm].[sp_DeleteRoleMember]
	@userId INT,
	@roleId INT
AS
DELETE [Adm].[UserRoles] FROM [Adm].[UserRoles] ur
WHERE  ur.UserId = @userId AND ur.RoleId = @roleId
GO
PRINT N'Creating Procedure [Adm].[sp_AddRole]...';


GO
CREATE PROCEDURE [Adm].[sp_AddRole]
	@roleName NVARCHAR(MAX),
	@projectConfigId UNIQUEIDENTIFIER
AS
	INSERT INTO [Adm].[Roles] (RoleName,ProjectConfigId)
	VALUES (@roleName, @projectConfigId)
GO
PRINT N'Creating Procedure [Adm].[sp_DeleteRole]...';


GO
CREATE PROCEDURE [Adm].[sp_DeleteRole]
	@roleId INT
AS

DELETE [Adm].[UserRoles] FROM [Adm].[UserRoles] ur
WHERE ur.RoleId = @roleId

DELETE [Adm].[RolePermissions] FROM [Adm].[RolePermissions] rp
WHERE rp.RoleId = @roleId

DELETE [Adm].[Roles] FROM [Adm].[Roles]
WHERE RoleId = @roleId
GO
PRINT N'Creating Procedure [Adm].[sp_SaveBroadcastMessageSingleton]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveBroadcastMessageSingleton]
	@BroadcastMessageId UNIQUEIDENTIFIER,
    @BroadcastMessageType NVARCHAR(200),
    @ProjectConfigId UNIQUEIDENTIFIER,
    @Active BIT,
	@Content NVARCHAR(MAX)
AS

BEGIN TRAN
IF(EXISTS(SELECT TOP 1 1 FROM adm.BroadcastMessages WHERE BroadcastMessageType = @BroadcastMessageType AND Active = 1))
BEGIN
SELECT 0 [Result]
END
ELSE
BEGIN
INSERT INTO [Adm].[BroadcastMessages]
(
 BroadcastMessageId,
 BroadcastMessageType,
 ProjectConfigId,
 Active,
 Content
)
VALUES
(
 @BroadcastMessageId,
 @BroadcastMessageType,
 @ProjectConfigId,
 @Active,
 @Content
)
SELECT 1
END
COMMIT
GO
PRINT N'Creating Procedure [Adm].[sp_AddUserRoles]...';


GO
CREATE PROCEDURE [Adm].[sp_AddUserRoles]
	@roleId INT,
    @userId INT
AS
	INSERT INTO  [Adm].[UserRoles] (UserId, RoleId)
	VALUES (@userId, @roleId)
RETURN 0
GO
PRINT N'Creating Procedure [Adm].[sp_GetDisplayNameAndRoleName]...';


GO
CREATE PROCEDURE [Adm].[sp_GetDisplayNameAndRoleName]
	@roleName NVARCHAR(MAX)
AS
	SELECT u.DisplayName, r.RoleName FROM [Adm].[UserRoles] ur
	INNER JOIN [Adm].[Users] u ON ur.UserId = u.UserId
	INNER JOIN [Adm].[Roles] r ON r.RoleId = r.RoleId
	WHERE DisplayName IS NOT NULL AND r.RoleName = @roleName 
RETURN
GO
PRINT N'Creating Procedure [Adm].[sp_GetActiveBroadcastMessages]...';


GO
CREATE PROCEDURE [Adm].[sp_GetActiveBroadcastMessages]
AS

SELECT
 BroadcastMessageId,
 BroadcastMessageType,
 ProjectConfigId,
 Active,
 Content
FROM [Adm].[BroadcastMessages] 
WHERE Active = 1
GO
PRINT N'Creating Procedure [Adm].[sp_GetBroadcastMessageById]...';


GO
CREATE PROCEDURE [Adm].[sp_GetBroadcastMessageById]
	@BroadcastMessageId UNIQUEIDENTIFIER
AS

SELECT
 BroadcastMessageId,
 BroadcastMessageType,
 ProjectConfigId,
 Active,
 Content
FROM [Adm].[BroadcastMessages] 
WHERE BroadcastMessageId = @BroadcastMessageId
GO
PRINT N'Creating Procedure [Adm].[sp_SetBroadcastMessageInactive]...';


GO
CREATE PROCEDURE [Adm].[sp_SetBroadcastMessageInactive]
	@BroadcastMessageId UNIQUEIDENTIFIER
AS

UPDATE adm.BroadcastMessages SET Active = 0 WHERE BroadcastMessageId = @BroadcastMessageId
GO
PRINT N'Creating Procedure [Adm].[sp_SaveBroadcastMessage]...';


GO
CREATE PROCEDURE [Adm].[sp_SaveBroadcastMessage]
	@BroadcastMessageId UNIQUEIDENTIFIER,
    @BroadcastMessageType NVARCHAR(200),
    @ProjectConfigId UNIQUEIDENTIFIER,
    @Active BIT,
	@Content NVARCHAR(MAX)
AS

INSERT INTO [Adm].[BroadcastMessages]
(
 BroadcastMessageId,
 BroadcastMessageType,
 ProjectConfigId,
 Active,
 Content
)
VALUES
(
 @BroadcastMessageId,
 @BroadcastMessageType,
 @ProjectConfigId,
 @Active,
 @Content
)
GO
PRINT N'Creating Procedure [Adm].[sp_GetUserPermissions]...';


GO
CREATE PROCEDURE [Adm].[sp_GetUserPermissions]
	@projectConfigId UNIQUEIDENTIFIER,
	@userId INT
AS 

SELECT DISTINCT p.PermissionName, p.PermissionId
--, PermissionScope
FROM [Adm].[RolePermissions] rp
INNER JOIN [Adm].[Roles] r ON rp.RoleId = r.RoleId
INNER JOIN [Adm].[Permissions] p ON rp.PermissionId = p.PermissionId
INNER JOIN adm.UserRoles ur ON ur.RoleId = r.RoleId
WHERE ur.UserId = @userId AND (ProjectConfigId = @projectConfigId OR ProjectConfigId IS NULL)
GO
PRINT N'Creating Procedure [Adm].[sp_GetRoleMembers]...';


GO
CREATE PROCEDURE [Adm].[sp_GetRoleMembers]
	@roleId INT 
AS 

SELECT u.DisplayName, u.UserId
FROM [Adm].[UserRoles] ur
INNER JOIN [Adm].[Users] u ON ur.UserId = u.UserId
WHERE ur.RoleId = @roleId AND u.DisplayName IS NOT NULL
GO
PRINT N'Creating Procedure [Adm].[sp_MarkMessageReceived]...';


GO
CREATE PROCEDURE [Adm].[sp_MarkMessageReceived]
	@messageId UNIQUEIDENTIFIER
AS
DECLARE @res INT = 0
BEGIN TRAN
	UPDATE adm.RequestMessages SET Received = 1 WHERE Received = 0 AND MessageId = @messageId
	SET @res = @@ROWCOUNT
COMMIT
SELECT @res
GO
PRINT N'Creating Procedure [Adm].[sp_SecurityQuery]...';


GO
CREATE PROCEDURE [Adm].[sp_SecurityQuery]
	@userId INT,
	@permission NVARCHAR(100),
	@scope NVARCHAR(MAX)
AS
	IF @scope IS NULL
	BEGIN
		SET @scope = N''
	END

	IF EXISTS(
		SELECT TOP 1 1 FROM adm.UserRoles r
		INNER JOIN adm.RolePermissions rp ON rp.RoleId = r.RoleId
		INNER JOIN adm.Permissions p ON p.PermissionId = rp.PermissionId
		WHERE r.UserId = @userId AND p.PermissionName = @permission 
			-- the granted permission is global or is a superset (prefix) of the required permission
			AND (p.PermissionScope IS NULL OR LEFT(@scope, LEN(p.PermissionScope)) = p.PermissionScope)
	)
	BEGIN
		SELECT 1 Result, NULL [Message]
	END
	ELSE BEGIN
		SELECT 0 Result, N'The permission has not been granted' [Message]
	END
RETURN 0
GO
PRINT N'Creating Procedure [Adm].[sp_CreateDataflowSequences]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateDataflowSequences]
AS
DECLARE @Enumerator CURSOR

SET @Enumerator = CURSOR LOCAL FAST_FORWARD FOR
SELECT REPLACE(CAST(ProjectConfigId AS NVARCHAR(100)),'-','')
FROM Adm.ProjectConfigs

OPEN @Enumerator

DECLARE @id NVARCHAR(100)

WHILE (1=1)
BEGIN
  FETCH NEXT FROM @Enumerator INTO @id
  IF (@@FETCH_STATUS <> 0) BREAK
  
  IF NOT EXISTS (SELECT name FROM sys.schemas WHERE name = N''+@id+'')
  BEGIN
  DECLARE @CreateSQL NVARCHAR(MAX)
  DECLARE @CreateSQL1 NVARCHAR(MAX)
  DECLARE @CreateSQL2 NVARCHAR(MAX)
  DECLARE @CreateSQL3 NVARCHAR(MAX)
  DECLARE @CreateSQL4 NVARCHAR(MAX)
  DECLARE @CreateSQL5 NVARCHAR(MAX)
  DECLARE @CreateSQL6 NVARCHAR(MAX)
  DECLARE @CreateSQL7 NVARCHAR(MAX)
  DECLARE @CreateSQL8 NVARCHAR(MAX)
  DECLARE @CreateSQL8_1 NVARCHAR(MAX)
  DECLARE @CreateSQL9 NVARCHAR(MAX)
  DECLARE @CreateSQL10 NVARCHAR(MAX)
  
  SET @CreateSQL = 
    'CREATE SCHEMA [' + @id  +']'
  
  SET @CreateSQL1 = 	  
 	'CREATE TABLE [' + @id + '].[DataFlowSequences]
     (
     	[SequenceId] INT NOT NULL PRIMARY KEY, --IDENTITY(1,1),
     	[SourceNode] INT NOT NULL,
     	[TargetNode] INT NOT NULL,
     	[DetailLevel] INT NOT NULL,
     	[ProjectConfigid] UNIQUEIDENTIFIER NOT NULL
     )'
  
  SET @CreateSQL2 = 
     'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequences_TargetNode]
     ON ['+ @id +'].[DataFlowSequences] ([TargetNode])
     INCLUDE ([SourceNode])'
  
  SET @CreateSQL3 = 
     'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequences_SourceNode_TargetNode]
     ON ['+ @id +'].[DataFlowSequences] ([DetailLevel] ASC, [SourceNode] ASC, [TargetNode] ASC) INCLUDE([SequenceId])'
  
  SET @CreateSQL4 = 
 	'CREATE TABLE ['+ @id +'].[DataFlowSequenceSteps]
 	 (
 	 	[Id] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
 	 	[SourceNodeId] INT NOT NULL,
 	 	[TargetNodeId] INT NOT NULL,
 	 	[SequenceId] INT NOT NULL,
 	 	[StepNumber] INT NOT NULL
 	 )'
 	
  SET @CreateSQL5 =  
 	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId]
 	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId]) INCLUDE([Id])'
  
  SET @CreateSQL6 = 	 
 	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId_SourceNodeId]
 	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId], [SourceNodeId]) INCLUDE([Id], [TargetNodeId])'
  
  SET @CreateSQL7 = 	 
 	 'CREATE NONCLUSTERED INDEX [IX_'+ @id +'_DataFlowSequenceSteps_SequenceId_TargetNodeId]
 	 ON ['+ @id +'].[DataFlowSequenceSteps] ([SequenceId], [TargetNodeId]) INCLUDE([Id], [SourceNodeId])'
  
    SET @CreateSQL8 = 	  
 	'CREATE TABLE [' + @id + '].[DataFlowSequences_Heap]
     (
     	[SequenceId] INT NOT NULL IDENTITY(1,1),
     	[SourceNode] INT NOT NULL,
     	[TargetNode] INT NOT NULL,
     	[DetailLevel] INT NOT NULL,
     	[ProjectConfigid] UNIQUEIDENTIFIER NOT NULL
     )'

 SET @CreateSQL8_1 = 
 	'CREATE NONCLUSTERED INDEX [IX_Sequences_Heap_Soource_Target_' + @id + ']
ON [' + @id + '].[DataFlowSequences_Heap] ([SourceNode],[TargetNode])
INCLUDE ([SequenceId])'
 
 
 
 SET @CreateSQL9 = 
 	'CREATE TABLE ['+ @id +'].[DataFlowSequenceSteps_Heap]
 	 (
 	 	[Id] INT NOT NULL IDENTITY(1,1),
 	 	[SourceNodeId] INT NOT NULL,
 	 	[TargetNodeId] INT NOT NULL,
 	 	[SequenceId] INT NOT NULL,
 	 	[StepNumber] INT NOT NULL
 	 )'

 SET @CreateSQL10 = 
 	'CREATE NONCLUSTERED INDEX [IX_SequenceSteps_Heap_SequenceId_' + @id + ']
ON [' + @id + '].[DataFlowSequenceSteps_Heap] ([SequenceId]) INCLUDE([StepNumber], [SourceNodeId], [TargetNodeId], [Id])'
 
 

  EXEC sp_executesql @CreateSQL
  EXEC sp_executesql @CreateSQL1
  EXEC sp_executesql @CreateSQL2
  EXEC sp_executesql @CreateSQL3
  EXEC sp_executesql @CreateSQL4
  EXEC sp_executesql @CreateSQL5
  EXEC sp_executesql @CreateSQL6
  EXEC sp_executesql @CreateSQL7
  EXEC sp_executesql @CreateSQL8
  EXEC sp_executesql @CreateSQL8_1
  EXEC sp_executesql @CreateSQL9
  EXEC sp_executesql @CreateSQL10
  
  END
END

RETURN 0
GO
PRINT N'Creating Procedure [Adm].[sp_CreateProcedureExecution]...';


GO
CREATE PROCEDURE [Adm].[sp_CreateProcedureExecution]
	@procedureName NVARCHAR(MAX),
	@projectConfigId UNIQUEIDENTIFIER,
	@requestId UNIQUEIDENTIFIER
AS
	INSERT INTO adm.ProcedureExecutionQueue(ProcedureName, ProjectConfigId, RequestId) VALUES(@procedureName, @projectConfigId, @requestId)
GO
PRINT N'Creating Procedure [Adm].[sp_ListPermissions]...';


GO
CREATE PROCEDURE [Adm].[sp_ListPermissions]
AS 

SELECT p.PermissionName, p.PermissionId
--, PermissionScope
FROM [Adm].[Permissions] p
GO
PRINT N'Creating Procedure [Adm].[sp_ListUsers]...';


GO
CREATE PROCEDURE [Adm].[sp_ListUsers]
AS
	SELECT UserId, DisplayName, [Identity] 
	FROM adm.Users 
	WHERE DisplayName IS NOT NULL
GO
PRINT N'Creating Procedure [Adm].[sp_ListRoles]...';


GO
CREATE PROCEDURE [Adm].[sp_ListRoles]
	@projectConfigId UNIQUEIDENTIFIER
AS
	SELECT RoleId, RoleName, ProjectConfigId FROM Adm.Roles
	WHERE ISNULL(ProjectConfigId, @projectConfigId) = @projectConfigId
GO
PRINT N'Creating Procedure [Adm].[sp_AddRoleMember]...';


GO
CREATE PROCEDURE [Adm].[sp_AddRoleMember]
	@roleId INT,
	@userId INT
AS

INSERT INTO [Adm].[UserRoles]
(UserId, RoleId)
VALUES (@userId, @roleId)
GO
PRINT N'Creating Procedure [Adm].[sp_AddRolePermission]...';


GO
CREATE PROCEDURE [Adm].[sp_AddRolePermission]
	@permissionId INT,
	@roleId INT
AS

INSERT INTO [Adm].[RolePermissions]
(RoleId, PermissionId)
VALUES
(@roleId, @permissionId)
GO
PRINT N'Creating Procedure [Adm].[sp_MarkMessageUnreceived]...';


GO
CREATE PROCEDURE [Adm].[sp_MarkMessageUnreceived]
	@messageId UNIQUEIDENTIFIER
AS
	UPDATE adm.RequestMessages SET Received = 0 WHERE MessageId = @messageId
GO
PRINT N'Creating Procedure [Adm].[sp_GetAbandonedRequests]...';


GO
CREATE PROCEDURE [Adm].[sp_GetAbandonedRequests]
AS

;WITH candidateRequests AS(
SELECT r.MessageId, r.RequestId, r.CreatedDateTime 
FROM adm.RequestMessages r
-- the request does not have a response
LEFT JOIN adm.RequestMessages resp ON r.RequestId = resp.RequestId AND resp.MessageType <> N'RequestCreated'
-- is not waiting for other requests
LEFT JOIN adm.RequestsWaitFor wf ON wf.RequestId = r.RequestId AND wf.Active = 1
WHERE 
	r.MessageType = N'RequestCreated' 
	AND resp.MessageId IS NULL 
	AND wf.RequestsWiaitForItemId IS NULL
	-- has been received
	AND r.Received = 1
)
-- figure out the "abandon time" - either the creation of the request or the time the last of the requests
-- this request has been waiting for finished
SELECT cr.RequestId, cr.MessageId, ISNULL(MAX(awm.CreatedDateTime), cr.CreatedDateTime) CreatedDateTime
--,DATEDIFF(MINUTE, ISNULL(MAX(awm.CreatedDateTime), cr.CreatedDateTime), GETDATE())
FROM candidateRequests cr
LEFT JOIN Adm.RequestsWaitFor wf ON cr.RequestId = wf.RequestId
LEFT JOIN adm.RequestMessages awm ON awm.RequestId = wf.WaitForRequestId AND awm.MessageType <> N'RequestCreated'
GROUP BY cr.RequestId, cr.CreatedDateTime, cr.MessageId
HAVING DATEDIFF(MINUTE, ISNULL(MAX(awm.CreatedDateTime), cr.CreatedDateTime), GETDATE()) >= 15
GO
PRINT N'Creating Procedure [Adm].[sp_GetRolePermissions]...';


GO
CREATE PROCEDURE [Adm].[sp_GetRolePermissions]
	@roleId INT 
AS 

SELECT p.PermissionName, p.PermissionId
--, PermissionScope
FROM [Adm].[RolePermissions] rp
INNER JOIN [Adm].[Permissions] p ON rp.PermissionId = p.PermissionId
WHERE rp.RoleId = @roleId
GO
PRINT N'Creating Procedure [Adm].[sp_GetRequestsNotWaiting]...';


GO
CREATE PROCEDURE [Adm].[sp_GetRequestsNotWaiting]
AS
BEGIN
BEGIN TRAN

SELECT DISTINCT rm.RequestId 
FROM adm.RequestMessages rm
LEFT JOIN RequestsWaitFor wf ON rm.RequestId = wf.RequestId AND wf.Active = 1
WHERE rm.MessageType = 'RequestCreated' AND wf.RequestsWiaitForItemId IS NULL

COMMIT
END
GO
PRINT N'Creating Procedure [Adm].[sp_SetProjectPowerBiComponents]...';


GO
CREATE PROCEDURE [Adm].[sp_SetProjectPowerBiComponents]
	@projectconfigid UNIQUEIDENTIFIER,
	@components Adm.UDTT_PowerBiProjectComponents READONLY
AS
DELETE FROM Adm.PowerBiProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
INSERT INTO Adm.PowerBiProjectComponents(
			[RedirectUri]
			,[ApplicationID]
			,[WorkspaceID]
			,[ReportServerURL]
			,[ReportServerFolder]
			,[ProjectConfig_ProjectConfigId]
			,DiskFolder
			,ConfigType
		   )
		   SELECT
		   RedirectUri
		   ,ApplicationID
		   ,WorkspaceID
		   ,ReportServerURL
		   ,ReportServerFolder
		   ,@projectconfigid
		   ,DiskFolder
		   ,ConfigType
		   FROM @components
GO
PRINT N'Creating Procedure [Adm].[sp_WriteUserActionLogBatch]...';


GO
CREATE PROCEDURE [Adm].[sp_WriteUserActionLogBatch]
	@log [Adm].[UDTT_UserActionLog] READONLY
AS
INSERT INTO [Adm].[UserActionLog]
(
		[CreatedDate]
		,[EventType]
		,[UserId]
		,[ApplicationName]
		,[FrameworkElement]
		,[DataContext]
		,[ExtendedProperties]
)
SELECT
	   l.[CreatedDate]
		,l.[EventType]
		,l.[UserId]
		,l.[ApplicationName]
		,l.[FrameworkElement]
		,l.[DataContext]
		,l.[ExtendedProperties]
FROM @log l
GO
PRINT N'Creating Procedure [Adm].[sp_WriteLogBatch]...';


GO
CREATE PROCEDURE [Adm].[sp_WriteLogBatch]
	@log [Adm].[UDTT_Log] READONLY
AS
INSERT INTO [Adm].[Log]
(
	   [CreatedDate]
      ,[MessageType]
      ,[Message]
      ,[StackTrace]
)
SELECT
	   l.CreatedDate
      ,l.MessageType
      ,l.[Message]
      ,l.StackTrace
FROM @log l
GO
PRINT N'Creating Procedure [Adm].[sp_CheckAppliedDbVersion]...';


GO
CREATE PROCEDURE [Adm].[sp_CheckAppliedDbVersion]
	@appliedVersion INT
AS
	IF @appliedVersion = 0
	BEGIN
		IF OBJECT_ID('Adm.DatabaseVersions') IS NOT NULL
		BEGIN
			RAISERROR (N'The DLS database has aready been initialized', 16, 127);	
		END
	END ELSE
	BEGIN
		IF NOT EXISTS(SELECT TOP 1 1 FROM adm.DatabaseVersions WHERE VersionNumber = @appliedVersion)
		BEGIN
			DECLARE @err NVARCHAR(MAX) = N'The DB version ' + CONVERT(NVARCHAR(10), @appliedVersion) + ' has not yet been applied'
			RAISERROR (@err, 16, 127);	
		END
	END
GO
PRINT N'Creating Procedure [Adm].[sp_AddAppliedDbVersion]...';


GO
CREATE PROCEDURE [Adm].[sp_AddAppliedDbVersion]
	@appliedVersion INT
AS
	INSERT INTO adm.DatabaseVersions(VersionNumber)
	VALUES(@appliedVersion)
GO
PRINT N'Creating Procedure [Annotate].[sp_UpdateElementFields]...';


GO
CREATE PROCEDURE [Annotate].[sp_UpdateElementFields]
	@projectConfigId UNIQUEIDENTIFIER,
	@fieldValues  [Annotate].[UDTT_FieldValues] READONLY,
	@links [Annotate].[UDTT_ElementLinks] READONLY,
	@modifiedModelElementIds [BIDoc].[UDTT_IdList] READONLY,
	@userId INT
AS

SELECT DISTINCT ae.AnnotationElementId, ae.ModelElementId
INTO #copiedElementIds
FROM Annotate.AnnotationElements ae
INNER JOIN @modifiedModelElementIds me ON me.Id = ae.ModelElementId
WHERE ae.IsCurrentVersion = 1
/*
LEFT JOIN @fieldValues v ON ae.ModelElementId = v.ModelElementId
LEFT JOIN @links l ON l.ModelElementFromId = v.ModelElementId
WHERE ae.IsCurrentVersion = 1 AND (l.ModelElementFromId IS NOT NULL OR v.ModelElementId IS NOT NULL)
*/

-- copy existing elements with new versions
CREATE TABLE #insertedElements
(
[ModelElementId] INT,
[AnnotationElementId] INT
)

INSERT INTO Annotate.AnnotationElements(
	ProjectConfigId
	,ModelElementId
	,[RefPath]
	,[Name]
	,[CreatedBy]
	,[UpdatedBy]
	,[VersionNumber]
	,[IsCurrentVersion]
	,[Date]
	)

OUTPUT
inserted.ModelElementId
,inserted.AnnotationElementId
INTO #insertedElements

SELECT
ee.ProjectConfigId
,ee.ModelElementId
,ee.RefPath
,ee.Name
,ee.CreatedBy
,@userId UpdatedBy
,VersionNumber + 1
,1 IsCurrentVersion
,GETDATE()
FROM Annotate.AnnotationElements ee
INNER JOIN #copiedElementIds ce ON ee.AnnotationElementId = ce.AnnotationElementId
WHERE ee.IsCurrentVersion = 1

-- copy field values
INSERT INTO Annotate.FieldValues(
	FieldId
	,AnnotationElementId
	,[Value]
	,UpdatedVersion
	)
SELECT
	fv.FieldId
	,ie.AnnotationElementId
	,fv.Value
	,fv.UpdatedVersion
FROM FieldValues fv
INNER JOIN Annotate.Fields f ON f.FieldId = fv.FieldId
INNER JOIN #copiedElementIds cid ON cid.AnnotationElementId = fv.AnnotationElementId
INNER JOIN #insertedElements ie ON ie.ModelElementId = cid.ModelElementId AND f.Deleted = 0

-- copy links
/*
INSERT INTO Annotate.ElementLinks(
	LinkTypeId,
	AnnotationElementFromId,
	AnnotationElementToId,
	UpdatedVersion
	)
SELECT
	l.LinkTypeId,
	ie.AnnotationElementId,
	l.AnnotationElementToId,
	l.UpdatedVersion
FROM Annotate.ElementLinks l
INNER JOIN #copiedElementIds cid ON cid.AnnotationElementId = l.AnnotationElementFromId
INNER JOIN #insertedElements ie ON ie.ModelElementId = cid.ModelElementId
*/

-- set old elements as not current
UPDATE ae SET IsCurrentVersion = 0 
FROM  Annotate.AnnotationElements ae
INNER JOIN #copiedElementIds ce ON ae.AnnotationElementId = ce.AnnotationElementId

-- add annotation elements if no previous version exists
INSERT INTO Annotate.AnnotationElements(ProjectConfigId, RefPath, ModelElementId, Name, VersionNumber, IsCurrentVersion, CreatedBy, UpdatedBy, Date)
SELECT @projectConfigId, e.RefPath, e.ModelElementId, e.Caption, 1, 1, @userId, @userId, GETDATE()
FROM (
	SELECT DISTINCT ModelElementId FROM @fieldValues
	UNION
	SELECT DISTINCT ModelElementFromId FROM @links
	UNION
	SELECT DISTINCT ModelElementToId FROM @links
	) v
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = v.ModelElementId
LEFT JOIN Annotate.AnnotationElements existent ON existent.ProjectConfigId = @projectConfigId AND existent.RefPath = e.RefPath
WHERE existent.AnnotationElementId IS NULL

-- merge field values
MERGE Annotate.FieldValues AS t 
USING (
	SELECT  e.AnnotationElementId, fv.FieldId, fv.Value, e.VersionNumber
	FROM @fieldValues fv
	INNER JOIN Annotate.AnnotationElements e ON fv.ModelElementId = e.ModelElementId AND e.IsCurrentVersion = 1
	) AS s
ON t.AnnotationElementId = s.AnnotationElementId AND t.FieldId = s.FieldId
WHEN NOT MATCHED THEN INSERT([AnnotationElementId], [FieldId], [Value], [UpdatedVersion])
VALUES(
[AnnotationElementId], [FieldId], [Value], VersionNumber
)
WHEN MATCHED THEN UPDATE SET t.[Value] = s.[Value], t.[UpdatedVersion] = s.[VersionNumber];

-- merge links
MERGE Annotate.ElementLinks AS t 
USING (
	SELECT  ef.AnnotationElementId AnnotationElementFromId, et.AnnotationElementId AnnotationElementToId, l.LinkTypeId, ef.VersionNumber
	FROM @links l
	INNER JOIN Annotate.AnnotationElements ef ON l.ModelElementFromId = ef.ModelElementId AND ef.IsCurrentVersion = 1
	INNER JOIN Annotate.AnnotationElements et ON l.ModelElementToId = et.ModelElementId AND et.IsCurrentVersion = 1
	) AS s
ON t.AnnotationElementFromId = s.AnnotationElementFromId AND t.AnnotationElementToId = s.AnnotationElementToId AND t.LinkTypeId = s.LinkTypeId
WHEN NOT MATCHED THEN INSERT([LinkTypeId], [AnnotationElementFromId], [AnnotationElementToId],  [UpdatedVersion])
VALUES(
[LinkTypeId], [AnnotationElementFromId], [AnnotationElementToId], VersionNumber
);
--WHEN NOT MATCHED BY SOURCE THEN DELETE;

DROP TABLE #insertedElements
DROP TABLE #copiedElementIds
GO
PRINT N'Creating Procedure [Annotate].[f_GetHistory]...';


GO
CREATE PROCEDURE [Annotate].[f_GetHistory]
	@modelElementId INT,
	@projectConfigId UNIQUEIDENTIFIER
AS
    SELECT f.FieldName AS 'Field Name', fv.Value AS 'Value', cu.[DisplayName] AS 'Created By', uu.[DisplayName] AS 'Updated By',
    ae.Date AS 'Date', iif(ae.IsCurrentVersion = '1', N'Current', N'Old')  AS 'Current Version'
    FROM BIDoc.ModelElements me
    INNER JOIN Annotate.AnnotationElements ae ON ae.ModelElementId = me.ModelElementId
    INNER JOIN Annotate.FieldValues fv ON fv.AnnotationElementId = ae.AnnotationElementId
    INNER JOIN Annotate.Fields f ON f.FieldId = fv.FieldId
    INNER JOIN adm.Users cu ON cu.UserId = ae.CreatedBy
    INNER JOIN adm.Users uu ON uu.UserId = ae.UpdatedBy
    WHERE me.ProjectConfigId = @projectConfigId
    AND ae.ProjectConfigId = @projectConfigId
    AND f.ProjectConfigId = @projectConfigId
    AND me.ModelElementId = @modelElementId
    ORDER BY  Date DESC
GO
PRINT N'Creating Procedure [Annotate].[sp_CreateViews]...';


GO
CREATE PROCEDURE [Annotate].[sp_CreateViews]
	@projectConfigId UNIQUEIDENTIFIER
AS
-- IN ANNOTATIONVIEW
;WITH viewNames AS
(
	SELECT CONVERT(NVARCHAR(255), N'Default') AS ViewName

	UNION 
	
	SELECT N'Type_' + hld.DescendantType FROM [BIDoc].[HighLevelTypeDescendants] hld
	WHERE hld.ParentType = N'CD.DLS.Model.Mssql.SolutionModelElement'
)
SELECT ViewName 
INTO #viewNames
FROM viewNames

INSERT INTO Annotate.AnnotationViews
(ProjectConfigId, ViewName)
SELECT @projectConfigId, vn.ViewName
FROM #viewNames vn
LEFT JOIN Annotate.AnnotationViews vw ON vw.ProjectConfigId = @projectConfigId AND vw.ViewName = vn.ViewName
WHERE vw.ViewName IS NULL

-- IN FIELDS
IF NOT EXISTS(SELECT TOP 1 1 FROM Annotate.Fields f WHERE f.ProjectConfigId = @projectConfigId AND f.FieldName = N'Name')
BEGIN
	INSERT INTO Annotate.Fields
	(ProjectConfigId, FieldName)
	VALUES (@projectConfigId, N'Name')
END

IF NOT EXISTS(SELECT TOP 1 1 FROM Annotate.Fields f WHERE f.ProjectConfigId = @projectConfigId AND f.FieldName = N'Description')
BEGIN
	INSERT INTO Annotate.Fields
	(ProjectConfigId, FieldName)
	VALUES (@projectConfigId, N'Description')
END

--IN ANNTOTATIONVIEWFIELDS
INSERT INTO Annotate.AnnotationViewFields
(AnnotationViewId, FieldId, FieldOrder)
SELECT vw.AnnotationViewId, f.FieldId, IIF(f.FieldName = N'Name', 1, 2)
FROM Annotate.AnnotationViews vw
INNER JOIN Annotate.Fields f ON f.ProjectConfigId = vw.ProjectConfigId
LEFT JOIN Annotate.AnnotationViewFields vf ON vf.FieldId = f.FieldId AND vf.AnnotationViewId = vw.AnnotationViewId
WHERE vw.ProjectConfigId = @projectConfigId AND f.FieldName IN (N'Name', N'Description') AND vf.AnnotationViewFieldId IS NULL

DROP TABLE #viewNames
GO
PRINT N'Creating Procedure [Annotate].[sp_UpdateModelElememntReferences]...';


GO
CREATE PROCEDURE [Annotate].[sp_UpdateModelElememntReferences]
	@projectconfigId UNIQUEIDENTIFIER
AS

UPDATE  Annotate.AnnotationElements 
SET     ModelElementId = m.ModelElementId
FROM    Annotate.AnnotationElements a
INNER JOIN    BIDoc.ModelElements m ON m.RefPath = a.RefPath AND m.ProjectConfigId = @projectconfigId  AND a.ProjectConfigId = @projectconfigId
GO
PRINT N'Creating Procedure [Annotate].[sp_DeleteLink]...';


GO
CREATE PROCEDURE [Annotate].[sp_DeleteLink]
	@linkId INT
AS

UPDATE  Annotate.ElementLinks
SET UpdatedVersion = 1 WHERE ElementLinkId = @linkId
GO
PRINT N'Creating Procedure [Annotate].[sp_DeleteLinkType]...';


GO
CREATE PROCEDURE [Annotate].[sp_DeleteLinkType]
	@linkTypeId INT
AS

UPDATE  Annotate.LinkTypes
SET Deleted = 1 WHERE LinkTypeId = @linkTypeId
GO
PRINT N'Creating Procedure [Annotate].[sp_CreateLinkType]...';


GO
CREATE PROCEDURE [Annotate].[sp_CreateLinkType]
	@linkTypeName NVARCHAR(MAX),
	@projectConfigId UNIQUEIDENTIFIER
AS

IF EXISTS(SELECT TOP 1 1 FROM Annotate.LinkTypes WHERE LinkTypeName = @linkTypeName AND ProjectConfigId = @projectConfigId)
BEGIN
	UPDATE Annotate.LinkTypes SET Deleted = 0 WHERE LinkTypeName = @linkTypeName AND ProjectConfigId = @projectConfigId
END
ELSE
BEGIN
	INSERT INTO Annotate.LinkTypes(LinkTypeName, ProjectConfigId, Deleted) VALUES(@linkTypeName, @projectConfigId, 0)
END
GO
PRINT N'Creating Procedure [Annotate].[sp_UpdateViewFields]...';


GO
CREATE PROCEDURE [Annotate].[sp_UpdateViewFields]
	@annotationViewId INT,
	@fields [BIDoc].[UDTT_OrderedIdList] READONLY
AS

DELETE FROM Annotate.AnnotationViewFields WHERE @annotationViewId = AnnotationViewId

INSERT INTO Annotate.AnnotationViewFields(AnnotationViewId, FieldId, FieldOrder)
SELECT @annotationViewId, f.Id, f.[Order]
FROM @fields f
GO
PRINT N'Creating Procedure [Annotate].[sp_CreateField]...';


GO
CREATE PROCEDURE [Annotate].[sp_CreateField]
	@fieldName NVARCHAR(MAX),
	@projectConfigId UNIQUEIDENTIFIER
AS

IF EXISTS(SELECT TOP 1 1 FROM Annotate.Fields WHERE FieldName = @fieldName AND ProjectConfigId = @projectConfigId)
BEGIN
	UPDATE Annotate.Fields SET Deleted = 0 WHERE FieldName = @fieldName AND ProjectConfigId = @projectConfigId
END
ELSE
BEGIN
	INSERT INTO Annotate.Fields(FieldName, ProjectConfigId, Deleted) VALUES(@fieldName, @projectConfigId, 0)
END
GO
PRINT N'Creating Procedure [Annotate].[sp_DeleteField]...';


GO
CREATE PROCEDURE [Annotate].[sp_DeleteField]
	@fieldId INT
AS

UPDATE  Annotate.Fields
SET Deleted = 1 WHERE FieldId = @fieldId
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddLinksToGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddLinksToGraph]
	@links  [BIDoc].[UDTT_BasicGraphLinks] READONLY
AS
INSERT INTO [BIDoc].[BasicGraphLinks]
(
	--[BasicGraphLinkId]
      --,
	  [LinkType]
      ,[NodeFromId]
      ,[NodeToId]
)
SELECT
--[BasicGraphLinkId]
      --,
	  [LinkType]
      ,[NodeFromId]
      ,[NodeToId]
	  FROM 
@links
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddLinksToModel]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddLinksToModel]
	@links [BIDoc].[UDTT_ModelLinks] READONLY
AS	 
	INSERT INTO [BIDoc].[ModelLinks]
	 (
	 		[ElementFromId]
	       ,[ElementToId]
	       ,[Type]
	       ,[ExtendedProperties]
	 )
	 SELECT
	 		l.[ElementFromId]
	       ,l.[ElementToId]
	       ,l.[Type]
	       ,l.[ExtendedProperties]
	 FROM @links l
	 LEFT JOIN BIDoc.ModelLinks el ON el.ElementFromId = l.ElementFromId AND el.ElementToId = l.ElementToId AND el.Type = l.Type
	 WHERE el.ModelLinkId IS NULL
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClearGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClearGraph]
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50)
AS
--DELETE d FROM [BIDoc].GraphDocuments d
--INNER JOIN [BIDoc].[BasicGraphNodes] n ON d.GraphNode_Id = n.BasicGraphNodeId
--WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind

/*
WHILE ((SELECT COUNT(*) FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN [BIDoc].[BasicGraphNodes] n ON l.NodeFromId = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind
)> 0
)
*/

DECLARE @rc INT = 1

WHILE @rc > 0
BEGIN

DELETE TOP (100000) l FROM [BIDoc].[BasicGraphLinks] l WITH(tablock)
INNER JOIN [BIDoc].[BasicGraphNodes] n ON l.NodeFromId = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind

SET @rc = @@ROWCOUNT
END

SET @rc = 1

WHILE @rc > 0
BEGIN

DELETE TOP (100000) FROM [BIDoc].[BasicGraphNodes] WHERE ProjectConfigId = @projectconfigid AND GraphKind = @graphkind

SET @rc = @@ROWCOUNT
END
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddNodesToGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddNodesToGraph]
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@nodes  [BIDoc].[UDTT_BasicGraphNodes] READONLY
AS
INSERT INTO [BIDoc].[BasicGraphNodes]
(
	--[BasicGraphNodeId]
      --,
	  [Name]
      ,[NodeType]
      ,[Description]
      ,[ParentId]
      ,[GraphKind]
      ,[ProjectConfigId]
      ,[SourceElementId]
      ,[TopologicalOrder]
)
SELECT
--[BasicGraphNodeId]
      --,
	  [Name]
      ,[NodeType]
      ,[Description]
      ,NULL --[ParentId]
      ,@graphkind
      ,@projectconfigid
      ,[SourceElementId]
      ,[TopologicalOrder]
FROM @nodes


SELECT o.BasicGraphNodeId SequentialGraphNodeId, n.BasicGraphNodeId 
INTO #nodeIdMap
FROM BIDoc.BasicGraphNodes n
INNER JOIN @nodes o ON o.SourceElementId = n.SourceElementId AND o.NodeType = n.NodeType AND @graphkind = n.GraphKind


-- map new nodes to their sequential sources, map parents of those to the new IDs and assign new parent IDs
UPDATE n SET n.ParentId = pmap.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes n
INNER JOIN #nodeIdMap map ON map.BasicGraphNodeId = n.BasicGraphNodeId
INNER JOIN @nodes o ON o.BasicGraphNodeId = map.SequentialGraphNodeId
INNER JOIN @nodes po ON po.BasicGraphNodeId = o.ParentId
INNER JOIN #nodeIdMap pmap ON pmap.SequentialGraphNodeId = po.BasicGraphNodeId

SELECT SequentialGraphNodeId, BasicGraphNodeId FROM #nodeIdMap

DROP TABLE #nodeIdMap
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddElementsToModel]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddElementsToModel]
	@projectconfigid UNIQUEIDENTIFIER,
	@elements [BIDoc].[UDTT_ModelElements] READONLY
AS

INSERT INTO [BIDoc].[ModelElements]
(
	  --[ModelElementId]
      --,
	  [ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
	  ,[RefPathPrefix]
	  ,[RefPathSuffix]
)
SELECT
	--[ModelElementId]
      --,
	  [ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
	  ,@projectconfigid
	  ,LEFT([RefPath], 300)
	  ,LEFT(RefPathSuffix, 300)
FROM @elements

SELECT oe.ModelElementId SequentialId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN @elements oe ON oe.RefPath = e.RefPath COLLATE SQL_Latin1_General_CP1_CS_AS
WHERE e.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_BuildTransitiveGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_BuildTransitiveGraph]
	--DECLARE 
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
	--DECLARE 
	,@sourcegraphkind NVARCHAR(50) --= N'DataFlow'
	--DECLARE 
	,@targetgraphkind NVARCHAR(50) --= N'DataFlowTransitive'
	--DECLARE 
	,@linktype NVARCHAR(50) --= N'DataFlow'
AS


---------------------- clear graph

EXEC BIDoc.sp_ClearGraph @projectconfigid, @targetgraphkind

------------------------ replicate graph

CREATE TABLE #nodeIdMap
(
OldNodeId INT,
NewNodeid INT,
)


INSERT INTO BIDoc.BasicGraphNodes
           (--[BasicGraphNodeId]
           --,
		   [Name]
           ,[NodeType]
           ,[Description]
           ,[ParentId]
           ,[GraphKind]
           ,[ProjectConfigId]
           ,[SourceElementId]
           ,[TopologicalOrder])
SELECT 
			--mid.NewNodeid
			--,
			n.Name
			,n.NodeType
			,n.Description
			,NULL --pid.NewNodeid
			,@targetgraphkind
			,@projectconfigid
			,n.SourceElementId
			,0 TopologicalOrder
FROM BIDoc.BasicGraphNodes n
--INNER JOIN #nodeIdMap mid ON mid.OldNodeId = n.BasicGraphNodeId
--LEFT JOIN #nodeIdMap pid ON pid.OldNodeId = n.ParentId
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind  = @sourcegraphkind

INSERT INTO #nodeIdMap(OldNodeId, NewNodeid)
SELECT o.BasicGraphNodeId, n.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes o
INNER JOIN BIDoc.BasicGraphNodes n ON o.SourceElementId = n.SourceElementId
WHERE o.ProjectConfigId = @projectconfigid AND n.ProjectConfigId = @projectconfigid
	AND o.GraphKind = @sourcegraphkind AND n.GraphKind = @targetgraphkind

CREATE NONCLUSTERED INDEX TIX_nodeIdMap_OldNodeId ON #nodeIdMap(OldNodeId ASC)
CREATE NONCLUSTERED INDEX TIX_nodeIdMap_NewNodeId ON #nodeIdMap(NewNodeId ASC)

UPDATE n SET ParentId = np.NewNodeid FROM BIDoc.BasicGraphNodes n
INNER JOIN #nodeIdMap m ON n.BasicGraphNodeId = m.NewNodeid
INNER JOIN BIDoc.BasicGraphNodes o ON o.BasicGraphNodeId = m.OldNodeId
INNER JOIN #nodeIdMap np ON np.OldNodeId = o.ParentId

INSERT INTO BIDoc.BasicGraphLinks
(
	--BasicGraphLinkId, 
	LinkType, 
	NodeFromId, 
	NodeToId
)
SELECT --ROW_NUMBER() OVER(ORDER BY l.NodeFromId) + @linkSequenceStart - 1,
l.LinkType,
mf.NewNodeid,
mt.NewNodeid
FROM BIDoc.BasicGraphLinks l 
INNER JOIN BIDoc.BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
INNER JOIN #nodeIdMap mf ON mf.OldNodeId = l.NodeFromId
INNER JOIN #nodeIdMap mt ON mt.OldNodeId = l.NodeToId
WHERE /*l.LinkType <> @linktype AND*/ n.ProjectConfigId = @projectconfigid AND n.GraphKind = @sourcegraphkind


---------------------------------------------------------------------------------------------
------------------------------------ ensure transitivity

DECLARE @rc INT = 1
WHILE (@rc > 0)
BEGIN
	INSERT INTO BIDoc.BasicGraphLinks
	(NodeFromId, NodeToId, LinkType)
	SELECT  
	DISTINCT --TOP 1000000
	sl.NodeFromId
	,tl.NodeToId
	,@linktype
	FROM BIDoc.BasicGraphNodes sn
	INNER JOIN BIDoc.BasicGraphLinks sl ON sl.NodeFromId = sn.BasicGraphNodeId
	INNER JOIN BIDoc.BasicGraphLinks tl ON tl.NodeFromId = sl.NodeToId
	LEFT JOIN BIDoc.BasicGraphLinks dl ON dl.LinkType = @linktype 
		AND dl.NodeFromId = sl.NodeFromId AND dl.NodeToId = tl.NodeToId
	WHERE sn.GraphKind = @targetgraphkind AND sl.LinkType = @linktype AND tl.LinkType = @linktype
	AND dl.BasicGraphLinkId IS NULL AND sn.ProjectConfigId = @projectconfigid
	
	SET @rc = @@ROWCOUNT
	PRINT CONVERT(NVARCHAR(100), @rc) + ' new transitive links'
END


----------------------------------------------------------------------------------------------
-------------------------------------- cleanup

DROP TABLE #nodeIdMap
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClearGraphDocuments]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClearGraphDocuments]
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@documentType NVARCHAR(50) = NULL
AS
DELETE d FROM [BIDoc].GraphDocuments d
INNER JOIN [BIDoc].[BasicGraphNodes] n ON d.GraphNode_Id = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind
AND d.DocumentType = ISNULL(@documentType, d.DocumentType)
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddDocumentsToGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddDocumentsToGraph]
	@documents  [BIDoc].[UDTT_GraphDocuments] READONLY
AS
INSERT INTO [BIDoc].[GraphDocuments]
(
	[Content],
	[DocumentType],
	[GraphNode_Id]
)
SELECT
	[Content],
	[DocumentType],
	[GraphNode_Id]
FROM @documents
GO
PRINT N'Creating Procedure [BIDoc].[sp_RebindAnnotations]...';


GO
CREATE PROCEDURE [BIDoc].[sp_RebindAnnotations]
	@projectconfigid UNIQUEIDENTIFIER
AS


UPDATE ae SET ModelElementId = me.ModelElementId
FROM Annotate.AnnotationElements ae
INNER JOIN BIDoc.ModelElements me ON ae.ProjectConfigId = me.ProjectConfigId AND ae.RefPath = me.RefPath
WHERE ae.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_SetModelElementDescriptivePaths]...';


GO
CREATE PROCEDURE [BIDoc].[sp_SetModelElementDescriptivePaths]
	@projectconfigid UNIQUEIDENTIFIER
AS

DELETE dp FROM BIDoc.ModelElementDescriptivePaths dp
INNER JOIN BIDoc.ModelElements e ON dp.ModelElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectconfigid

INSERT INTO BIDoc.ModelElementDescriptivePaths(ModelElementId, DescriptivePath, DescriptiveRootPath)
SELECT 
e.ModelElementId,
IIF(e.[Type] IN (N'CD.DLS.Model.Mssql.Db.SqlScriptElement', N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement'),

ped.TypeDescription + N' [' + pe.Caption + N']'
	+ IIF(ISNULL(ppe.RefPath, N'') = N'', 
	N'', N' in ' + pped.TypeDescription + N' [' + ppe.Caption + N']')

,

--ed.TypeDescription + IIF(pe.[Type] <> N'CD.DLS.Model.Mssql.Db.SchemaElement', N' ', N' [' + ppe.Caption + N']') + N'[' + pe.Caption + N']'

ed.TypeDescription + IIF(pe.[Type] <> N'CD.DLS.Model.Mssql.Db.SchemaElement', N' ', N' [' + ppe.Caption + N'].') + IIF(pe.[Type] = N'CD.DLS.Model.Mssql.Db.SchemaElement', N'[' + pe.Caption + N'].', N'') +  N'[' + e.Caption + N']' 
	+ 
	IIF(pe.[Type] = N'CD.DLS.Model.Mssql.Db.SchemaElement', '',
		--IIF(ISNULL(ppe.RefPath, N'') = N'', N'', N' in ' + pped.TypeDescription + N' [' + ppe.Caption + N']'),
		IIF(ISNULL(pe.RefPath, N'') = N'', N'', N' in ' + ped.TypeDescription + N' [' + pe.Caption + N']')
	)
	--+ IIF(ISNULL(ppe.RefPath, N'Solution') = N'Solution', N'', N' in ' + pped.TypeDescription + N' [' + ppe.Caption + N']')
),

----
NULL

FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelElementTypeDescriptions ed ON ed.ElementType = e.Type
LEFT JOIN BIDoc.ModelLinks l ON l.Type = N'parent' AND l.ElementFromId = e.ModelElementId
LEFT JOIN BIDoc.ModelElements pe ON pe.ModelElementId = l.ElementToId
LEFT JOIN BIDoc.ModelElementTypeDescriptions ped ON ped.ElementType = pe.Type
LEFT JOIN BIDoc.ModelLinks pl ON pl.Type = N'parent' AND pl.ElementFromId = pe.ModelElementId
LEFT JOIN BIDoc.ModelElements ppe ON ppe.ModelElementId = pl.ElementToId
LEFT JOIN BIDoc.ModelElementTypeDescriptions pped ON pped.ElementType = ppe.Type
--WHERE pe.[Type] = N'CD.DLS.Model.Mssql.Db.SchemaElement'
WHERE e.ProjectConfigId = @projectconfigid


---- set root paths

UPDATE e SET DescriptiveRootPath = hle1d.TypeDescription + N' [' + hle1.Caption + N']' +
IIF(hle2.ModelElementId IS NULL, N'', N', ' + hle2d.TypeDescription + N' ' + 
	IIF(hle2p.[Type] = N'CD.DLS.Model.Mssql.Db.SchemaElement', N'[' + hle2p.Caption + N'].', N'')
	+ N'[' + hle2.Caption + N']'
)
FROM BIDoc.ModelElementDescriptivePaths e
LEFT JOIN BIDoc.HigherLevelElementAncestors hl1 ON hl1.SouceElementId = e.ModelElementId AND hl1.DetailLevel = 3
LEFT JOIN BIDoc.HigherLevelElementAncestors hl2 ON hl2.SouceElementId = e.ModelElementId AND hl2.DetailLevel = 2
LEFT JOIN BIDoc.ModelLinks hl2pl ON hl2pl.Type = N'parent' AND hl2pl.ElementFromId = hl2.AncestorElementId
LEFT JOIN BIDoc.ModelElements hle1 ON hle1.ModelElementId = hl1.AncestorElementId
LEFT JOIN BIDoc.ModelElements hle2 ON hle2.ModelElementId = hl2.AncestorElementId
LEFT JOIN BIDoc.ModelElements hle2p ON hle2p.ModelElementId = hl2pl.ElementToId
LEFT JOIN BIDoc.ModelElementTypeDescriptions hle1d ON hle1d.ElementType = hle1.Type
LEFT JOIN BIDoc.ModelElementTypeDescriptions hle2d ON hle2d.ElementType = hle2.Type
INNER JOIN BIDoc.ModelElements ee ON e.ModelElementId = ee.ModelElementId
WHERE ee.ProjectConfigId = @projectconfigid


UPDATE dp SET DescriptiveRootPath = e.Caption
FROM BIDoc.ModelElementDescriptivePaths dp
INNER JOIN BIDoc.ModelElements e ON dp.ModelElementId = e.ModelElementId
INNER JOIN Adm.ProjectConfigs p ON p.ProjectConfigId = e.ProjectConfigId
WHERE dp.DescriptiveRootPath IS NULL AND e.ProjectConfigId = @projectconfigid

UPDATE dp SET DescriptivePath = e.Caption
FROM BIDoc.ModelElementDescriptivePaths dp
INNER JOIN BIDoc.ModelElements e ON dp.ModelElementId = e.ModelElementId
INNER JOIN Adm.ProjectConfigs p ON p.ProjectConfigId = e.ProjectConfigId
WHERE dp.DescriptivePath IS NULL AND e.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClenseDataFlowSequences]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClenseDataFlowSequences]
	--DECLARE
	@projectconfigid UNIQUEIDENTIFIER --= N'FD1312FC-1182-4B9C-82D9-2089F3468BFB'
AS
DECLARE @id NVARCHAR(100)
SET @id = REPLACE(CAST(@projectconfigid AS NVARCHAR(100)),'-','')

DECLARE @message NVARCHAR(MAX)

-- firstTableSource
SELECT st.Id, st.SequenceId, st.SourceNodeId, pst.TargetNodeId AS 'pstTargetNodeId', st.TargetNodeId
INTO #firstStepSource
FROM BIDoc.DataFlowSequenceSteps st
INNER JOIN BIDoc.DataFlowSequenceSteps pst ON st.SequenceId = pst.SequenceId AND st.SourceNodeId = pst.SourceNodeId
INNER JOIN BIDoc.DataFlowSequences s ON s.SequenceId = st.SequenceId
INNER JOIN BIDoc.BasicGraphNodes n ON st.SourceNodeId = n.BasicGraphNodeId
WHERE s.ProjectConfigid = @projectconfigid AND n.ProjectConfigId = @projectconfigid

-- firtstTableTarget
SELECT st.Id, st.SequenceId, st.TargetNodeId, st.SourceNodeId, pst.SourceNodeId AS 'pstSourceNodeId'
INTO #firstStepTarget
FROM BIDoc.DataFlowSequenceSteps st
INNER JOIN BIDoc.DataFlowSequenceSteps pst ON st.SequenceId = pst.SequenceId AND st.TargetNodeId = pst.TargetNodeId
INNER JOIN BIDoc.DataFlowSequences s ON s.SequenceId = st.SequenceId
INNER JOIN BIDoc.BasicGraphNodes n ON st.SourceNodeId = n.BasicGraphNodeId
WHERE s.ProjectConfigid = @projectconfigid AND n.ProjectConfigId = @projectconfigid


-- delete lower level duplicate targets
SELECT st.Id
INTO #viewDuplicateTargets
FROM #firstStepSource st
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = st.TargetNodeId AND n.ParentId = st.pstTargetNodeId
-- do not delete child nodes (st) if there is a grandchild (chn) with the same source
LEFT JOIN BIDoc.BasicGraphNodes chn ON chn.ParentId = n.BasicGraphNodeId
LEFT JOIN BIDoc.DataFlowSequenceSteps chst ON st.SequenceId = chst.SequenceId AND chst.SourceNodeId = st.SourceNodeId AND chst.TargetNodeId = chn.BasicGraphNodeId
WHERE chst.Id IS NULL

DECLARE @rc INT = 1
WHILE @rc > 0
BEGIN
	DECLARE @DeleteSQL NVARCHAR(MAX)
	SET @DeleteSQL = 
	'DELETE TOP (100000) st FROM [' + @id + '].[DataFlowSequenceSteps] st
	INNER JOIN #viewDuplicateTargets vdt ON vdt.Id = st.Id'
	EXEC sp_executesql @DeleteSQL

	SET @rc = @@ROWCOUNT
	SET @message = N'Clensed ' + CONVERT(NVARCHAR(20), @rc) + N' duplicate targets'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message

END

DROP TABLE #viewDuplicateTargets


-- delete lower level duplicate sources

SELECT st.Id
INTO #viewDuplicateSources
FROM #firstStepTarget st
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = st.SourceNodeId AND n.ParentId = pstSourceNodeId
-- do not delete child nodes (st) if there is a grandchild (chn) with the same target
LEFT JOIN BIDoc.BasicGraphNodes chn ON chn.ParentId = n.BasicGraphNodeId
LEFT JOIN BIDoc.DataFlowSequenceSteps chst ON st.SequenceId = chst.SequenceId AND chst.TargetNodeId = st.TargetNodeId AND chst.SourceNodeId = chn.BasicGraphNodeId
WHERE chst.Id IS NULL

SET @rc = 1
WHILE @rc > 0
BEGIN
	DECLARE @DeleteSQL1 NVARCHAR(MAX)
	SET @DeleteSQL1 = 
	'
	DELETE TOP (100000) st FROM [' + @id + '].[DataFlowSequenceSteps] st
	INNER JOIN #viewDuplicateSources vds ON vds.Id = st.Id'
	EXEC sp_executesql @DeleteSQL1
	
	SET @rc = @@ROWCOUNT
	SET @message = N'Clensed ' + CONVERT(NVARCHAR(20), @rc) + N' duplicate sources'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message

END

DROP TABLE #viewDuplicateSources

---------------------------------------------------

-- delete lower level duplicate targets - 2 step skip

SELECT st.Id
INTO #viewLowerTargets
FROM #firstStepSource st
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = pstTargetNodeId
INNER JOIN BIDoc.BasicGraphNodes n2 ON n2.BasicGraphNodeId = st.TargetNodeId AND n2.ParentId = n.BasicGraphNodeId

SET @rc = 1
WHILE @rc > 0
BEGIN
	DECLARE @DeleteSQL2 NVARCHAR(MAX)
	SET @DeleteSQL2 = 
	'
	DELETE TOP (100000) st FROM [' + @id + '].[DataFlowSequenceSteps] st
	INNER JOIN #viewLowerTargets vlt ON vlt.Id = st.Id'
	EXEC sp_executesql @DeleteSQL2

	SET @rc = @@ROWCOUNT
	SET @message = N'Clensed ' + CONVERT(NVARCHAR(20), @rc) + N' duplicate targets'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message
END

DROP TABLE #firstStepSource
DROP TABLE #viewLowerTargets

-- delete lower level duplicate sources - 2 step skip

SELECT st.Id
INTO #viewLowerSources
FROM #firstStepTarget st
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = pstSourceNodeId
INNER JOIN BIDoc.BasicGraphNodes n2 ON n2.BasicGraphNodeId = st.SourceNodeId AND n2.ParentId = n.BasicGraphNodeId

SET @rc = 1
WHILE @rc > 0
BEGIN
	DECLARE @DeleteSQL3 NVARCHAR(MAX)
	SET @DeleteSQL3 = 
	'
	DELETE TOP (100000) st FROM [' + @id + '].[DataFlowSequenceSteps] st
	INNER JOIN #viewLowerSources vls ON vls.Id = st.Id'
	EXEC sp_executesql @DeleteSQL3

	SET @rc = @@ROWCOUNT
	SET @message = N'Clensed ' + CONVERT(NVARCHAR(20), @rc) + N' duplicate sources'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message
END

DROP TABLE #firstStepTarget
DROP TABLE #viewLowerSources

----------------------------------------------

-- delete transitive steps
SELECT st.Id
INTO #viewTransitiveSteps
FROM BIDoc.DataFlowSequenceSteps st
INNER JOIN BIDoc.DataFlowSequenceSteps fst ON st.SequenceId = fst.SequenceId AND st.SourceNodeId = fst.SourceNodeId
INNER JOIN BIDoc.DataFlowSequenceSteps tst ON st.SequenceId = tst.SequenceId AND st.TargetNodeId = tst.TargetNodeId
INNER JOIN BIDoc.DataFlowSequences s ON s.SequenceId = st.SequenceId AND s.ProjectConfigId = @projectconfigid
INNER JOIN BIDoc.BasicGraphNodes n ON st.SourceNodeId = n.BasicGraphNodeId

WHERE s.ProjectConfigid = @projectconfigid AND fst.TargetNodeId = tst.SourceNodeId AND n.ProjectConfigId = @projectconfigid

SET @rc = 1
WHILE @rc > 0
BEGIN
	DECLARE @DeleteSQL4 NVARCHAR(MAX)
	SET @DeleteSQL4 = 
	'
	DELETE TOP (100000) st FROM [' + @id + '].[DataFlowSequenceSteps] st
	INNER JOIN #viewTransitiveSteps vst ON vst.Id = st.Id'
	EXEC sp_executesql @DeleteSQL4

	SET @rc = @@ROWCOUNT
	SET @message = N'Deleted '+ CONVERT(NVARCHAR(20), @rc) + N' transitive steps'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message
END

DROP TABLE #viewTransitiveSteps

--------------------------------------------

PRINT N'Simplifying view targets'

--FirstStepTargets/Scripts
SELECT st.TargetNodeId, st.Id StepId, st.SequenceId, viewNode.SourceElementId,st.SourceNodeId
INTO #firstStepScript
FROM BIDoc.DataFlowSequenceSteps st
INNER JOIN BIDoc.BasicGraphNodes colNode ON colNode.BasicGraphNodeId = st.TargetNodeId
INNER JOIN BIDoc.BasicGraphNodes viewNode ON viewNode.BasicGraphNodeId = colNode.ParentId
WHERE colNode.NodeType = N'ColumnElement' AND viewNode.NodeType = N'ViewElement'
  AND colNode.ProjectConfigId = @projectConfigId


SELECT pst.SourceNodeId, pst.TargetNodeId MidNodeid, st.TargetNodeId, pst.StepNumber, pst.Id PreStepId, st.StepId, st.SequenceId
INTO #viewTargets
FROM #firstStepScript st
INNER JOIN BIDoc.BasicGraphNodes preColNode ON preColNode.BasicGraphNodeId = st.SourceNodeId
INNER JOIN BIDoc.ModelElements preColElement ON preColNode.SourceElementId = preColElement.ModelElementId
INNER JOIN BIDoc.ModelElements viewElement ON viewElement.ModelElementId = st.SourceElementId
INNER JOIN BIDoc.DataFlowSequenceSteps pst ON pst.SequenceId = st.SequenceId AND pst.TargetNodeId = st.SourceNodeId
WHERE LEFT(preColElement.RefPath, LEN(viewElement.RefPath)) = viewElement.RefPath

DECLARE @DeleteSQL5 NVARCHAR(MAX)
	SET @DeleteSQL5 = 
	'INSERT INTO [' + @id + '].[DataFlowSequenceSteps](SourceNodeId, TargetNodeId, SequenceId, StepNumber)
SELECT SourceNodeId, TargetNodeId, SequenceId, StepNumber FROM #viewTargets

DELETE st FROM [' + @id + '].[DataFlowSequenceSteps] st
INNER JOIN #viewTargets vt ON vt.PreStepId = st.Id

DELETE st FROM [' + @id + '].[DataFlowSequenceSteps] st
INNER JOIN #viewTargets vt ON vt.StepId = st.Id'
EXEC sp_executesql @DeleteSQL5

DROP TABLE #viewTargets

SELECT st.StepId
INTO #viewFirstScriptSteps
FROM #firstStepScript st
LEFT JOIN BIDoc.DataFlowSequenceSteps pst ON pst.SequenceId = st.SequenceId AND pst.TargetNodeId = st.SourceNodeId
INNER JOIN BIDoc.BasicGraphNodes scrNode ON scrNode.BasicGraphNodeId = st.SourceNodeId
WHERE pst.Id IS NULL AND scrNode.NodeType = N'SqlScriptElement'

DECLARE @DeleteSQL6 NVARCHAR(MAX)
	SET @DeleteSQL6 = 
	'DELETE st FROM [' + @id + '].[DataFlowSequenceSteps] st
INNER JOIN #viewFirstScriptSteps vfs ON vfs.StepId = st.Id'
EXEC sp_executesql @DeleteSQL6

DROP TABLE #firstStepScript
DROP TABLE #viewFirstScriptSteps
GO
PRINT N'Creating Procedure [BIDoc].[sp_BuildHigherDataFlowSequences]...';


GO
CREATE PROCEDURE [BIDoc].[sp_BuildHigherDataFlowSequences]
	@projectconfigid UNIQUEIDENTIFIER
AS


DECLARE @id NVARCHAR(100)
SET @id = REPLACE(CAST(@projectconfigid AS NVARCHAR(100)),'-','')	
DECLARE @graphkind NVARCHAR(50) = N'DataFlow'

--DECLARE @SQLTask3 NVARCHAR(MAX)
--	SET @SQLTask3 = 'TRUNCATE TABLE [' + @id + '].[DataFlowSequenceSteps_Heap]
--					 TRUNCATE TABLE [' + @id + '].[DataFlowSequences_Heap]'
--	EXEC sp_executesql  @SQLTask3
	

DECLARE @SQLTask2 NVARCHAR(MAX)

SELECT hla.SouceElementId, hla.DetailLevel, hla.AncestorElementId, n.BasicGraphNodeId, ancn.BasicGraphNodeId AncestorNodeId, ae.[Type] AncestorElementType, ae.Caption AncestorElementName
INTO #upperLevels
FROM BIDoc.HigherLevelElementAncestors hla
INNER JOIN BIDoc.BasicGraphNodes n ON n.SourceElementId = hla.SouceElementId
INNER JOIN BIDoc.ModelElements ae ON ae.ModelElementId = hla.AncestorElementId
INNER JOIN BIDoc.BasicGraphNodes ancn ON ancn.SourceElementId = hla.AncestorElementId
WHERE n.GraphKind = @graphkind AND ancn.GraphKind = @graphkind AND ae.ProjectConfigId = @projectconfigid


;WITH nodes as
(
SELECT n.BasicGraphNodeId OriginalNodeId, n.BasicGraphNodeId, n.ParentId, e.ModelElementId, e.Caption, e.Type, lvl.DetailLevel
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.ModelElementTypeDetailLevels lvl ON lvl.ElementType = e.Type
WHERE n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid
)
SELECT dl.*, 
cls1.AncestorNodeId Detail_1_NodeId, cls1.AncestorElementType Detail_1_Type, cls1.AncestorElementName Detail_1_Name,
cls2.AncestorNodeId Detail_2_NodeId, cls2.AncestorElementType Detail_2_Type, cls2.AncestorElementName Detail_2_Name,
cls3.AncestorNodeId Detail_3_NodeId, cls3.AncestorElementType Detail_3_Type, cls3.AncestorElementName Detail_3_Name
INTO #upperLevelNodeMapping
FROM nodes dl
LEFT JOIN #upperLevels cls1 ON cls1.BasicGraphNodeId = dl.OriginalNodeId AND cls1.DetailLevel = 1
LEFT JOIN #upperLevels cls2 ON cls2.BasicGraphNodeId = dl.OriginalNodeId AND cls2.DetailLevel = 2
LEFT JOIN #upperLevels cls3 ON cls3.BasicGraphNodeId = dl.OriginalNodeId AND cls3.DetailLevel = 3




CREATE TABLE #higherLevelSequences
(
	SourceSequenceId INT,
	StepFromNodeId INT,
	StepToNodeId INT,
	StepNumber INT,
	DetailLevel INT
)


DECLARE @higherLevelSequencesSQL NVARCHAR(MAX)
		SET @higherLevelSequencesSQL = 'INSERT INTO #higherLevelSequences

SELECT DISTINCT sq.SequenceId SourceSequenceId,
ul2sf.AncestorNodeId StepSourceNodeId,
ul2st.AncestorNodeId StepTargetNodeId,
stp.StepNumber,
2 DetailLevel
FROM [' + @id + '].DataFlowSequences sq
INNER JOIN [' + @id + '].DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
INNER JOIN #upperLevels ul2sf ON ul2sf.DetailLevel = 2 AND ul2sf.BasicGraphNodeId = stp.SourceNodeId
INNER JOIN #upperLevels ul2st ON ul2st.DetailLevel = 2 AND ul2st.BasicGraphNodeId = stp.TargetNodeId
WHERE sq.ProjectConfigid = @projectconfigid AND sq.DetailLevel = 1
' 
EXEC sp_executesql  @higherLevelSequencesSQL, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid

/*
INSERT INTO #higherLevelSequences

SELECT DISTINCT sq.SequenceId SourceSequenceId,
ul2sf.AncestorNodeId StepSourceNodeId,
ul2st.AncestorNodeId StepTargetNodeId,
stp.StepNumber,
2 DetailLevel
FROM BIDoc.DataFlowSequences sq
INNER JOIN BIDoc.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
INNER JOIN #upperLevels ul2sf ON ul2sf.DetailLevel = 2 AND ul2sf.BasicGraphNodeId = stp.SourceNodeId
INNER JOIN #upperLevels ul2st ON ul2st.DetailLevel = 2 AND ul2st.BasicGraphNodeId = stp.TargetNodeId
WHERE sq.ProjectConfigid = @projectconfigid AND sq.DetailLevel = 1
*/


DECLARE @higherLevelSequences3SQL NVARCHAR(MAX)
		SET @higherLevelSequences3SQL = 'INSERT INTO #higherLevelSequences

SELECT DISTINCT sq.SequenceId SourceSequenceId,
ul2sf.AncestorNodeId StepSourceNodeId,
ul2st.AncestorNodeId StepTargetNodeId,
stp.StepNumber,
3 DetailLevel
FROM [' + @id + '].DataFlowSequences sq
INNER JOIN [' + @id + '].DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
INNER JOIN #upperLevels ul2sf ON ul2sf.DetailLevel = 3 AND ul2sf.BasicGraphNodeId = stp.SourceNodeId
INNER JOIN #upperLevels ul2st ON ul2st.DetailLevel = 3 AND ul2st.BasicGraphNodeId = stp.TargetNodeId
WHERE sq.ProjectConfigid = @projectconfigid AND sq.DetailLevel = 1
'
EXEC sp_executesql  @higherLevelSequences3SQL, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid

/*
INSERT INTO #higherLevelSequences

SELECT DISTINCT sq.SequenceId SourceSequenceId,
ul2sf.AncestorNodeId StepSourceNodeId,
ul2st.AncestorNodeId StepTargetNodeId,
stp.StepNumber,
3 DetailLevel
FROM BIDoc.DataFlowSequences sq
INNER JOIN BIDoc.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
INNER JOIN #upperLevels ul2sf ON ul2sf.DetailLevel = 3 AND ul2sf.BasicGraphNodeId = stp.SourceNodeId
INNER JOIN #upperLevels ul2st ON ul2st.DetailLevel = 3 AND ul2st.BasicGraphNodeId = stp.TargetNodeId
WHERE sq.ProjectConfigid = @projectconfigid AND sq.DetailLevel = 1
*/

-- delete the steps (and sequences that only span one higher level node)
DELETE FROM #higherLevelSequences WHERE StepFromNodeId = StepToNodeId


--SELECT COUNT(*) FROM #higherLevelSequences

--------

-- insert distinct sequence
DECLARE @InsertSQL NVARCHAR(MAX)
		SET @InsertSQL = 'INSERT INTO [' + @id + '].[DataFlowSequences_Heap] WITH(TABLOCK)
		(SourceNode, TargetNode, DetailLevel, ProjectConfigid)
SELECT DISTINCT 
sq.SourceNode, 
sq.TargetNode,
hls.DetailLevel,
sq.ProjectConfigid
FROM #higherLevelSequences hls
INNER JOIN [' + @id + '].[DataFlowSequences] sq ON sq.SequenceId = hls.SourceSequenceId'
EXEC sp_executesql  @InsertSQL

-- insert higher level steps
DECLARE @InsertSQL1 NVARCHAR(MAX)
		SET @InsertSQL1 = 'INSERT INTO [' + @id + '].[DataFlowSequenceSteps_Heap] WITH(TABLOCK)(
SourceNodeId, TargetNodeId, SequenceId, StepNumber
)
SELECT 
hls.StepFromNodeId, 
hls.StepToNodeId, 
tgts.SequenceId, 
MIN(hls.StepNumber)
FROM #higherLevelSequences hls
INNER JOIN [' + @id + '].[DataFlowSequences] orgs ON orgs.SequenceId = hls.SourceSequenceId
INNER JOIN [' + @id + '].[DataFlowSequences_Heap] tgts ON tgts.DetailLevel = hls.DetailLevel AND tgts.SourceNode = orgs.SourceNode AND tgts.TargetNode = orgs.TargetNode
GROUP BY
hls.StepFromNodeId, 
hls.StepToNodeId, 
tgts.SequenceId'
EXEC sp_executesql  @InsertSQL1


	DECLARE @InsertSQL11 NVARCHAR(MAX)
		SET @InsertSQL11 = N'INSERT INTO [' + @id + '].[DataFlowSequences] WITH(TABLOCK)
		(
		[SequenceId],
		SourceNode,
		TargetNode,
		DetailLevel,
		ProjectConfigid--,
		--LastLinkId
		)
		SELECT
		s.[SequenceId],
		s.SourceNode,
		s.TargetNode,
		s.DetailLevel,
		s.ProjectConfigid

		FROM [' + @id + '].[DataFlowSequences_Heap] s
WHERE s.DetailLevel > 1
'
		EXEC sp_executesql  @InsertSQL11, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid

			DECLARE @InsertSQL12 NVARCHAR(MAX)
		SET @InsertSQL12 = N'INSERT INTO [' + @id + '].DataFlowSequenceSteps WITH(TABLOCK)
		(
		SourceNodeId,
		TargetNodeId,
		StepNumber,
		SequenceId
		)
		
SELECT 
		st.SourceNodeId,
		st.TargetNodeId,
		st.StepNumber,
		st.SequenceId

FROM [' + @id + '].[DataFlowSequences_Heap] s
INNER JOIN [' + @id + '].DataFlowSequenceSteps_Heap st ON st.SequenceId = s.SequenceId
WHERE s.DetailLevel > 1
'

EXEC sp_executesql  @InsertSQL12, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid


DROP TABLE #higherLevelSequences
DROP TABLE #upperLevelNodeMapping
DROP TABLE #upperLevels

PRINT N'Removing backward steps'

DECLARE @DeleteSQL NVARCHAR(MAX)
		SET @DeleteSQL = '
DELETE st FROM [' + @id + '].[DataFlowSequenceSteps] st
INNER JOIN [' + @id + '].DataFlowSequenceSteps prvsrc ON st.SequenceId = prvsrc.SequenceId AND prvsrc.StepNumber < st.StepNumber AND st.TargetNodeId = prvsrc.SourceNodeId'
EXEC sp_executesql @DeleteSQL

PRINT N'Rebilding indexes'
	
DECLARE @SQLTask NVARCHAR(MAX)
	SET @SQLTask = 'ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD
ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId_SourceNodeId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD
ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId_TargetNodeId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD'
EXEC sp_executesql  @SQLTask
GO
PRINT N'Creating Procedure [BIDoc].[sp_BuildDataFlowSequences]...';


GO
CREATE PROCEDURE [BIDoc].[sp_BuildDataFlowSequences]
	@projectconfigid UNIQUEIDENTIFIER
AS

--DECLARE @id NVARCHAR(100)
--	SET @id = REPLACE(CAST(@projectconfigid AS NVARCHAR(100)),'-','')
	

--	DECLARE @IdentityInsert1 NVARCHAR(MAX)
--	SET @IdentityInsert1 = '
--		SET IDENTITY_INSERT  [' + @id + '].DataFlowSequences ON'
--	EXEC sp_executesql @IdentityInsert1	

--GO

------------------------------------------------------------------------

	--DECLARE @projectconfigid UNIQUEIDENTIFIER = N'8BEDB75E-5D79-449F-9480-F26FEC6A1BE1'

	DECLARE @id NVARCHAR(100)
	SET @id = REPLACE(CAST(@projectconfigid AS NVARCHAR(100)),'-','')
	
	DECLARE @message NVARCHAR(MAX)

	/**/
	-- clear sequences
	DECLARE @SQLTask2 NVARCHAR(MAX)
	SET @SQLTask2 = 'TRUNCATE TABLE [' + @id + '].[DataFlowSequenceSteps]
					 TRUNCATE TABLE [' + @id + '].[DataFlowSequences]
					 TRUNCATE TABLE [' + @id + '].[DataFlowSequenceSteps_Heap]
					 TRUNCATE TABLE [' + @id + '].[DataFlowSequences_Heap]'
	EXEC sp_executesql  @SQLTask2
	
	--ALTER INDEX [IX_BIDoc_DataFlowSequenceSteps_SequenceId] ON [BIDoc].[DataFlowSequenceSteps]
	--DISABLE

	-- init structures
	DECLARE @graphKind NVARCHAR(50) = N'DataFlow'
	DECLARE @linkType NVARCHAR(50) = N'DataFlow'

	CREATE TABLE #usedLinks
	(
		SourceNodeId INT NOT NULL,
		LinkId INT NOT NULL 
		--CONSTRAINT PK_UsedLinks PRIMARY KEY(SourceNodeId, LinkId)
	)


	CREATE TABLE #waitingLinks
	(
		SourceNodeId INT NOT NULL,
		LinkId INT NOT NULL
		--CONSTRAINT PK_WaitingLinks PRIMARY KEY(SourceNodeId, LinkId)
	)

	CREATE TABLE #sequenceCopyTargets
	(
		SourceSequenceId INT NOT NULL,
		TargetSequenceId INT NOT NULL,
		NextSequenceStepNo INT NOT NULL,
		FinalLinkId INT NOT NULL
	)

	---- find initial front nodes
	
	SELECT DISTINCT n.BasicGraphNodeId SourceNodeId, n.BasicGraphNodeId NodeId INTO #frontNodes
	FROM BIDoc.BasicGraphNodes n 
	INNER JOIN BIDoc.BasicGraphLinks lf ON lf.NodeFromId = n.BasicGraphNodeId AND lf.LinkType = @linkType
	--LEFT JOIN BIDoc.BasicGraphLinks lt ON lt.NodeToId = n.BasicGraphNodeId AND lt.LinkType = @linkType
	WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphKind --AND lt.BasicGraphLinkId IS NULL

	SET @message = CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' initial front nodes'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message

	-- find initial links

	SELECT l.NodeFromId SourceNodeId, l.BasicGraphLinkId LinkId INTO #newReachableLinks
	FROM BIDoc.BasicGraphLinks l
	INNER JOIN #frontNodes n ON n.NodeId = l.NodeFromId
	WHERE l.LinkType = @linkType

	SET @message = CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' initial front links'
	PRINT @message
	EXEC [Adm].[sp_WriteLogInfo] @message

	-- create new one-step sequences from the new links
		DECLARE @InsertSQL NVARCHAR(MAX)
		SET @InsertSQL = 'INSERT INTO [' + @id + '].[DataFlowSequences_Heap] WITH(TABLOCK)
		(
		SourceNode,
		TargetNode,
		DetailLevel,
		ProjectConfigid--,
		--LastLinkId
		)
		SELECT DISTINCT
		l.NodeFromId,
		l.NodeToId,
		1,
		@projectconfigid--,
		--l.BasicGraphLinkId
		FROM #newReachableLinks ll
		INNER JOIN BIDoc.BasicGraphLinks l ON ll.LinkId = l.BasicGraphLinkId
		--INNER JOIN BIDoc.BasicGraphNodes sn ON sn.BasicGraphNodeId = s.SourceNode
INNER JOIN BIDoc.BasicGraphNodes sn ON sn.BasicGraphNodeId = l.NodeFromId
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = sn.SourceElementId
INNER JOIN [BIDoc].[SequenceEndpointTypes] stp ON stp.TypeName = se.Type
		LEFT JOIN [' + @id + '].DataFlowSequences_Heap s ON s.SourceNode = l.NodeFromId AND s.TargetNode = l.NodeToId
		WHERE s.SequenceId IS NULL'
		EXEC sp_executesql  @InsertSQL, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid

		-- insert one-step sequence steps using the newly discovered links
		
		DECLARE @InsertSQL2 NVARCHAR(MAX)
		SET @InsertSQL2 = 'INSERT INTO ['  + @id + '].[DataFlowSequenceSteps_Heap] WITH(TABLOCK)
		(
		SourceNodeId,
		TargetNodeId,
		StepNumber,
		SequenceId
		)
		SELECT DISTINCT
		l.NodeFromId
		,l.NodeToId
		,0
		,s.SequenceId
		FROM #newReachableLinks ll
		INNER JOIN BIDoc.BasicGraphLinks l ON ll.LinkId = l.BasicGraphLinkId
		INNER JOIN [' + @id + '].DataFlowSequences_Heap s ON s.SourceNode = l.NodeFromId AND s.TargetNode = l.NodeToId
		-- only if the one-step sequence isnt filled already
		LEFT JOIN [' + @id + '].DataFlowSequenceSteps_Heap st ON st.SequenceId = s.SequenceId
		WHERE st.Id IS NULL'
		EXEC sp_executesql  @InsertSQL2

	DECLARE @iteration INT = 1

	CREATE NONCLUSTERED INDEX [IX_NewReachableLinks]
ON [#newReachableLinks] ([SourceNodeId],[LinkId])

	CREATE NONCLUSTERED INDEX [IX_temp_SequenceCopyTargets]
ON [#sequenceCopyTargets] ([SourceSequenceId]) INCLUDE([TargetSequenceId])

	-- while new unused links are being discovered (such that all other links with the same target node are also available)
	WHILE (EXISTS(SELECT TOP 1 1 FROM #newReachableLinks))
	BEGIN

		
		-- create new sequences from those that end in the front nodes (and such sequence does not exist already)
		DECLARE @InsertSQL3 NVARCHAR(MAX)
		SET @InsertSQL3 = 'INSERT INTO [' + @id + '].[DataFlowSequences_Heap] WITH(TABLOCK)
		(
		SourceNode,
		TargetNode,
		DetailLevel,
		ProjectConfigid--,
		--LastLinkId
		)
		SELECT DISTINCT
		s.SourceNode
		,l.NodeToId
		,1
		,@projectconfigid
		--,l.BasicGraphLinkId
		FROM #newReachableLinks ll
		INNER JOIN BIDoc.BasicGraphLinks l ON l.BasicGraphLinkId = ll.LinkId
		INNER JOIN [' + @id + '].DataFlowSequences_Heap s ON s.TargetNode = l.NodeFromId AND s.SourceNode = ll.SourceNodeId
		LEFT JOIN [' + @id + '].DataFlowSequences_Heap es ON es.SourceNode = s.SourceNode AND es.TargetNode = l.NodeToId
		WHERE es.SequenceId IS NULL'
		EXEC sp_executesql  @InsertSQL3, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid

		SET @message = CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' extended sequences in iteration ' + CONVERT(NVARCHAR(10), @iteration)
		PRINT @message
		EXEC [Adm].[sp_WriteLogInfo] @message

		DECLARE @InsertSQL10 NVARCHAR(MAX)
		
		SET @InsertSQL10 = 
		-- find copied sequences (sequences ending in the source node of the new links are copied to the sequences ending in the links' target)
		N'
		INSERT INTO #sequenceCopyTargets WITH(TABLOCK)
		(
		SourceSequenceId,
		TargetSequenceId,
		NextSequenceStepNo,
		FinalLinkId
		)
		SELECT DISTINCT
		s.SequenceId,
		ts.SequenceId,
		@iteration + 1,
		l.BasicGraphLinkId
		FROM #newReachableLinks ll
		INNER JOIN BIDoc.BasicGraphLinks l ON l.BasicGraphLinkId = ll.LinkId
		INNER JOIN [' + @id + '].DataFlowSequences_Heap s ON s.TargetNode = l.NodeFromId AND s.SourceNode = ll.SourceNodeId
		INNER JOIN [' + @id + '].DataFlowSequences_Heap ts ON ts.SourceNode = s.SourceNode AND ts.TargetNode = l.NodeToId
		--LEFT JOIN [' + @id + '].DataFlowSequenceSteps_Heap stp ON stp.SequenceId = ts.SequenceId
		--WHERE stp.Id IS NULL	-- not ideal...
		'
		EXEC sp_executesql  @InsertSQL10, N'@projectconfigid UNIQUEIDENTIFIER, @iteration INT', @projectconfigid = @projectconfigid, @iteration = @iteration

		SET @message = CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' sequence copy targets'
		PRINT @message
		EXEC [Adm].[sp_WriteLogInfo] @message

					ALTER INDEX [IX_temp_SequenceCopyTargets]
ON [#sequenceCopyTargets] --([SourceNodeId],[LinkId])
REBUILD

		
		
		--SELECT * FROM #sequenceCopyTargets

		-- insert copied sequence steps
		DECLARE @InsertSQL4 NVARCHAR(MAX)
		SET @InsertSQL4 = '
		INSERT INTO [' + @id + '].DataFlowSequenceSteps_Heap WITH(TABLOCK)
		(
		SourceNodeId,
		TargetNodeId,
		StepNumber,
		SequenceId
		)
		SELECT DISTINCT
		st.SourceNodeId
		,st.TargetNodeId
		,st.StepNumber
		,ct.TargetSequenceId
		FROM #sequenceCopyTargets ct
		INNER JOIN [' + @id + '].DataFlowSequenceSteps_Heap st ON st.SequenceId = ct.SourceSequenceId
		LEFT JOIN [' + @id + '].DataFlowSequenceSteps_Heap est ON est.SequenceId = ct.TargetSequenceId AND est.SourceNodeId = st.SourceNodeId AND est.TargetNodeId = st.TargetNodeId
		WHERE est.Id IS NULL'
		EXEC sp_executesql  @InsertSQL4 
		SET @message = CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' copied steps'

		PRINT @message
		EXEC [Adm].[sp_WriteLogInfo] @message

		-- add final links to copied sequences
		DECLARE @InsertSQL5 NVARCHAR(MAX)
		SET @InsertSQL5 = 'INSERT INTO [' + @id + '].DataFlowSequenceSteps_Heap WITH(TABLOCK)
		(
		SourceNodeId,
		TargetNodeId,
		StepNumber,
		SequenceId
		)
		SELECT DISTINCT
		l.NodeFromId
		,l.NodeToId
		,ct.NextSequenceStepNo
		,ct.TargetSequenceId
		FROM #sequenceCopyTargets ct
		--INNER JOIN [' + @id + '].DataFlowSequenceSteps_Heap stp ON stp.SequenceId = ct.SourceSequenceId
		INNER JOIN BIDoc.BasicGraphLinks l ON l.BasicGraphLinkId = ct.FinalLinkId
		LEFT JOIN [' + @id + '].DataFlowSequenceSteps_Heap stp ON l.NodeFromId = stp.SourceNodeId AND l.NodeToId = stp.TargetNodeId AND stp.SequenceId = ct.TargetSequenceId
		WHERE stp.Id IS NULL'
		EXEC sp_executesql  @InsertSQL5

			ALTER INDEX [IX_temp_SequenceCopyTargets]
ON [#sequenceCopyTargets] --([SourceNodeId],[LinkId])
DISABLE


		-- prepare for the next iteration
		TRUNCATE TABLE #sequenceCopyTargets

		INSERT INTO #usedLinks WITH(TABLOCK)
		(
			SourceNodeId,
			LinkId
		)
		SELECT SourceNodeId, LinkId FROM #newReachableLinks

		TRUNCATE TABLE #frontNodes

		-- new front nodes - step towards new discovered links
		INSERT INTO #frontNodes WITH(TABLOCK)
		(
			SourceNodeId,
			NodeId
		)
		SELECT DISTINCT ll.SourceNodeId, l.NodeToId 
		FROM #newReachableLinks ll
		INNER JOIN BIDoc.BasicGraphLinks l ON l.BasicGraphLinkId = ll.LinkId

			ALTER INDEX [IX_NewReachableLinks]
ON [#newReachableLinks] --([SourceNodeId],[LinkId])
DISABLE

		TRUNCATE TABLE #newReachableLinks

		-- candidate new found links - not used links from the source nodes
		INSERT INTO #newReachableLinks WITH(TABLOCK)
		(
			SourceNodeId,
			LinkId
		)
		SELECT DISTINCT fn.SourceNodeId, l.BasicGraphLinkId 
		FROM #frontNodes fn
		INNER JOIN BIDoc.BasicGraphLinks l ON fn.NodeId = l.NodeFromId
		LEFT JOIN #usedLinks ul ON ul.LinkId = l.BasicGraphLinkId AND ul.SourceNodeId = fn.SourceNodeId
		WHERE l.LinkType = @linkType AND ul.LinkId IS NULL

			ALTER INDEX [IX_NewReachableLinks]
ON [#newReachableLinks] --([SourceNodeId],[LinkId])
REBUILD

		-- this is slow and only influences the topological order assignment
		
		SET @iteration = @iteration + 1

	END

	DROP TABLE #waitingLinks
	DROP TABLE #sequenceCopyTargets
	DROP TABLE #frontNodes
	DROP TABLE #newReachableLinks
	DROP TABLE #usedLinks

	--insert filtered sequences to std. tables

	DECLARE @InsertSQL11 NVARCHAR(MAX)
		SET @InsertSQL11 = N'INSERT INTO [' + @id + '].[DataFlowSequences] WITH(TABLOCK)
		(
		[SequenceId],
		SourceNode,
		TargetNode,
		DetailLevel,
		ProjectConfigid--,
		--LastLinkId
		)
		SELECT
		s.[SequenceId],
		s.SourceNode,
		s.TargetNode,
		s.DetailLevel,
		s.ProjectConfigid

		FROM [' + @id + '].[DataFlowSequences_Heap] s
INNER JOIN BIDoc.BasicGraphNodes sn ON sn.BasicGraphNodeId = s.SourceNode
INNER JOIN BIDoc.BasicGraphNodes tn ON tn.BasicGraphNodeId = s.TargetNode
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = sn.SourceElementId
INNER JOIN BIDoc.ModelElements te ON te.ModelElementId = tn.SourceElementId
INNER JOIN [BIDoc].[SequenceEndpointTypes] stp ON stp.TypeName = se.Type
INNER JOIN [BIDoc].[SequenceEndpointTypes] ttp ON ttp.TypeName = te.Type
WHERE s.DetailLevel = 1
'
		EXEC sp_executesql  @InsertSQL11, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid




	
	DECLARE @InsertSQL12 NVARCHAR(MAX)
		SET @InsertSQL12 = N'INSERT INTO [' + @id + '].DataFlowSequenceSteps WITH(TABLOCK)
		(
		SourceNodeId,
		TargetNodeId,
		StepNumber,
		SequenceId
		)
		
SELECT 
		st.SourceNodeId,
		st.TargetNodeId,
		st.StepNumber,
		st.SequenceId

FROM [' + @id + '].[DataFlowSequences_Heap] s
INNER JOIN [' + @id + '].DataFlowSequenceSteps_Heap st ON st.SequenceId = s.SequenceId
INNER JOIN BIDoc.BasicGraphNodes sn ON sn.BasicGraphNodeId = s.SourceNode
INNER JOIN BIDoc.BasicGraphNodes tn ON tn.BasicGraphNodeId = s.TargetNode
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = sn.SourceElementId
INNER JOIN BIDoc.ModelElements te ON te.ModelElementId = tn.SourceElementId
INNER JOIN [BIDoc].[SequenceEndpointTypes] stp ON stp.TypeName = se.Type
INNER JOIN [BIDoc].[SequenceEndpointTypes] ttp ON ttp.TypeName = te.Type
WHERE s.DetailLevel = 1
'

EXEC sp_executesql  @InsertSQL12, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid


	

	PRINT N'Rebuilding indexes...'
	EXEC [Adm].[sp_WriteLogInfo] N'Rebuilding indexes...'

	DECLARE @SQLTask1 NVARCHAR(MAX)
	SET @SQLTask1 = 'ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD
	ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId_SourceNodeId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD
	ALTER INDEX [IX_' + @id + '_DataFlowSequenceSteps_SequenceId_TargetNodeId] ON [' + @id + '].[DataFlowSequenceSteps]
	REBUILD'
	EXEC sp_executesql  @SQLTask1
GO
PRINT N'Creating Procedure [BIDoc].[sp_BuildHighLevelGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_BuildHighLevelGraph]
	--DECLARE 
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
AS

DECLARE @grphDf NVARCHAR(50) = N'DataFlow'
DECLARE @grphHigh NVARCHAR(50) = N'DFHigh'
DECLARE @grphMid NVARCHAR(50) = N'DFMedium'


DECLARE @highNodes TABLE
(
 SourceGraphNodeId INT,
 [Name] NVARCHAR(MAX),
 NodeType NVARCHAR(MAX),
 Description NVARCHAR(MAX),
 ParentId INT NULL,
 SourceElementId INT
)


DELETE l 
FROM BIDoc.BasicGraphLinks l
INNER JOIN BIDoc.BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind IN (@grphHigh/*, @grphMid*/)

DELETE FROM BIDoc.BasicGraphNodes
WHERE ProjectConfigId = @projectconfigid AND GraphKind IN (@grphHigh/*, @grphMid*/)

-- the nodes to be included

INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, n.Name, NULL ParentId, n.SourceElementId
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE e.Type = N'CD.DLS.Model.Mssql.Db.DatabaseElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf


INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, fld.Name + N'/' + n.Name, NULL ParentId, n.SourceElementId
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.BasicGraphNodes fld ON fld.BasicGraphNodeId = n.ParentId
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssis.ProjectElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf


INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, n.Name Description, NULL ParentId, n.SourceElementId
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE e.Type = N'CD.DLS.Model.Mssql.Pbi.TenantElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf

INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, n.Name Description, NULL ParentId, n.SourceElementId
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE e.Type = N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf

INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, n.Name Description, NULL ParentId, n.SourceElementId
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.CubeElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf


;WITH ssrsFolders AS
(
SELECT n.BasicGraphNodeId, n.Name, n.NodeType, n.Name Description, NULL ParentId, n.SourceElementId, n.ParentId CurrentParent
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
LEFT JOIN BIDoc.BasicGraphNodes chf ON chf.ParentId = n.BasicGraphNodeId AND chf.NodeType = N'FolderElement'
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssrs.FolderElement' AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphDf AND chf.BasicGraphNodeId IS NULL

UNION ALL

SELECT f.BasicGraphNodeId, f.Name, f.NodeType, p.Name + N'/' + f.Description, f.ParentId, f.SourceElementId, p.ParentId
FROM ssrsFolders f
INNER JOIN BIDoc.BasicGraphNodes p ON p.BasicGraphNodeId = f.CurrentParent
)
INSERT INTO @highNodes(SourceGraphNodeId, [Name], NodeType, Description, ParentId, SourceElementId) 
SELECT BasicGraphNodeId, Name, NodeType, REPLACE(Description, N'//', N'') Description,ParentId, SourceElementId 
FROM ssrsFolders WHERE Description LIKE '/%'


INSERT INTO BIDoc.BasicGraphNodes(Name, NodeType, Description, ParentId, GraphKind, ProjectConfigId, SourceElementId)
SELECT DISTINCT Name, NodeType, Description, ParentId, @grphHigh, @projectconfigid, SourceElementId FROM @highNodes


;WITH descendantMap AS
(
SELECT hn.SourceGraphNodeId HighNode, hn.SourceGraphNodeId LowNode FROM @highNodes hn

UNION ALL

SELECT m.HighNode, c.BasicGraphNodeId LowNode FROM descendantMap m
INNER JOIN BIDoc.BasicGraphNodes c ON c.ParentId = m.LowNode
)
,links AS(
SELECT src.HighNode SrcSrcNode, tgt.HighNode TgtSrcNode, COUNT(*) Strength 
FROM descendantMap src
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = src.LowNode
INNER JOIN descendantMap tgt ON l.NodeToId = tgt.LowNode
WHERE l.LinkType = N'DataFlow' AND src.HighNode <> tgt.HighNode
GROUP BY src.HighNode, tgt.HighNode

)
INSERT INTO BIDoc.BasicGraphLinks
(NodeFromId, NodeToId, LinkType, ExtendedProperties)
SELECT 
--*
srcn.BasicGraphNodeId, tgtn.BasicGraphNodeId, N'DataFlow', N'{"Strength":' + CONVERT(NVARCHAR(20), l.Strength) + N'}'
FROM links l
INNER JOIN @highNodes srcHn ON srcHn.SourceGraphNodeId = l.SrcSrcNode
INNER JOIN @highNodes tgtHn ON tgtHn.SourceGraphNodeId = l.TgtSrcNode
INNER JOIN BIDoc.BasicGraphNodes srcn ON srcn.SourceElementId = srcHn.SourceElementId AND srcn.GraphKind = @grphHigh
INNER JOIN BIDoc.BasicGraphNodes tgtn ON tgtn.SourceElementId = tgtHn.SourceElementId AND tgtn.GraphKind = @grphHigh
OPTION(MAXRECURSION 10000)

--SELECT * FROM @highNodes

-- delete nodes without links
DELETE n FROM BIDoc.BasicGraphNodes n
LEFT JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = n.BasicGraphNodeId
LEFT JOIN BIDoc.BasicGraphLinks l2 ON l2.NodeToId = n.BasicGraphNodeId
WHERE l.BasicGraphLinkId IS NULL AND l2.BasicGraphLinkId IS NULL AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @grphHigh

--SELECT src.Description, tgt.Description, l.ExtendedProperties FROM BIDoc.BasicGraphNodes src
--INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = src.BasicGraphNodeId
--INNER JOIN BIDoc.BasicGraphNodes tgt ON l.NodeToId = tgt.BasicGraphNodeId
--WHERE src.GraphKind = N'DFHigh'
GO
PRINT N'Creating Procedure [BIDoc].[sp_CalculateTopologicalDataFlowOrder]...';


GO
CREATE PROCEDURE [BIDoc].[sp_CalculateTopologicalDataFlowOrder]
	--DECLARE 
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
AS
DECLARE @linktype NVARCHAR(50) = N'DataFlow'
DECLARE @graphkind NVARCHAR(50) = N'DataFlow'
DECLARE @topol INT = 2
DECLARE @rc INT

UPDATE BIDoc.BasicGraphNodes SET TopologicalOrder = 0 WHERE GraphKind = @graphkind AND ProjectConfigId = @projectconfigid

-- set the topological order 1 to nodes that contribute the links from another node to itself (e.g. merge statemtnts, updates that read and modify the same column)

UPDATE dfn SET TopologicalOrder = 1
FROM BIDoc.BasicGraphLinks l 
INNER JOIN BIDoc.BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphLinks lfr ON lfr.NodeFromId = l.NodeFromId AND lfr.LinkType = @linktype AND lfr.NodeToId <> l.NodeToId
INNER JOIN BIDoc.BasicGraphLinks lto ON lto.NodeToId = l.NodeFromId AND lto.LinkType = @linktype AND lto.NodeFromId <> l.NodeFromId
INNER JOIN BIDoc.BasicGraphNodes midn ON midn.BasicGraphNodeId = lfr.NodeToId AND midn.BasicGraphNodeId = lto.NodeFromId
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = midn.SourceElementId
INNER JOIN BIDoc.BasicGraphNodes dfn ON dfn.SourceElementId = e.ModelElementId AND dfn.GraphKind = @graphkind
WHERE l.NodeFromId = l.NodeToId AND l.LinkType = @linktype
AND n.GraphKind = N'DataFlowTransitive' AND midn.NodeType <> N'ColumnElement' AND n.ProjectConfigId = @projectconfigid


-- while there is a node with incoming link(s) without an ordwer assigned
WHILE EXISTS(
SELECT TOP 1 1 FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = n.BasicGraphNodeId
WHERE n.TopologicalOrder = 0 AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND l.LinkType = @linktype
)
BEGIN
	
	-- assign new topological order to all nodes for which all incoming links come from nodes that already have their number assigned
	UPDATE n SET n.TopologicalOrder = @topol
	FROM BIDoc.BasicGraphNodes n
	LEFT JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = n.BasicGraphNodeId AND l.LinkType = @linktype
	LEFT JOIN BIDoc.BasicGraphNodes srcN ON srcN.BasicGraphNodeId = l.NodeFromId AND srcN.TopologicalOrder = 0
	WHERE n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid AND srcN.BasicGraphNodeId IS NULL AND n.TopologicalOrder = 0

	SET @rc = @@ROWCOUNT

	PRINT CONVERT(NVARCHAR(255), @rc) + N' nodes assigned topological order of ' + CONVERT(NVARCHAR(255), @topol)

	IF @rc = 0 BEGIN
		IF EXISTS(
			SELECT TOP 1 1 FROM BIDoc.BasicGraphNodes n 
			INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = n.BasicGraphNodeId
			WHERE n.TopologicalOrder = 0 AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND l.LinkType = @linktype
			)
			BEGIN
			SELECT n.* FROM BIDoc.BasicGraphNodes n 
			INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = n.BasicGraphNodeId
			WHERE n.TopologicalOrder = 0 AND n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND l.LinkType = @linktype

			RAISERROR(N'Unreachable nodes detected', 16, 1)
			RETURN
			END
	END

	SET @topol = @topol + 1
END


-- set parent topology as the max of child topological orders
WHILE EXISTS(
	SELECT TOP 1 1 FROM BIDoc.BasicGraphNodes n
	INNER JOIN BIDoc.BasicGraphNodes cn ON cn.ParentId = n.BasicGraphNodeId
	WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.TopologicalOrder < cn.TopologicalOrder
)
BEGIN
	UPDATE n SET TopologicalOrder = cn.TopologicalOrder
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN BIDoc.BasicGraphNodes cn ON cn.ParentId = n.BasicGraphNodeId
	WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.TopologicalOrder < cn.TopologicalOrder
	
END

-- copy the order from to DataFlowTransitive
UPDATE n SET TopologicalOrder = dfn.TopologicalOrder FROM
BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphNodes dfn ON dfn.GraphKind = @graphkind AND dfn.SourceElementId = n.SourceElementId
WHERE n.GraphKind = N'DataFlowTransitive' AND n.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_PropagateDataFlowVertically]...';


GO
CREATE PROCEDURE [BIDoc].[sp_PropagateDataFlowVertically]
	--DECLARE 
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
AS


	DECLARE @sourcegraphkind NVARCHAR(50) = N'DataFlow'
	DECLARE @linktype NVARCHAR(50) = N'DataFlow'
	DECLARE @graphkind NVARCHAR(50) = N'DataFlow'

-- df column sources - propagate down
DECLARE @dfPropSourceCount INT
DECLARE @dfPropTargetCount INT


DELETE FROM BIDoc.BasicGraphLinks WHERE NodeFromId = NodeToId

;WITH dfPropSources AS
(
SELECT l.NodeFromId, l.NodeToId FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphLinks l ON n.BasicGraphNodeId = l.NodeToId AND l.LinkType = @linktype
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.NodeType IN ( N'DfColumnElement', N'DfUnpivotSourceReferenceElement')
UNION ALL
SELECT n.BasicGraphNodeId NodeFromId, ps.NodeToId FROM dfPropSources ps
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = ps.NodeFromId
)
SELECT @dfPropSourceCount = COUNT(*) FROM dfPropSources


PRINT 'Propagated DF source links - ' + CONVERT(VARCHAR(10), @dfPropSourceCount)


--EXEC sp_sequence_get_range @sequence_name = N'BIDoc.BasicGraphLinksSequence', @range_size = @dfPropSourceCount, @range_first_value = @linkSequenceStartVariant OUTPUT
--	SET @linkSequenceStart = CONVERT(INT, @linkSequenceStartVariant)

;WITH dfPropSources AS
(
SELECT l.NodeFromId, l.NodeToId FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphLinks l ON n.BasicGraphNodeId = l.NodeToId AND l.LinkType = @linktype
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.NodeType IN ( N'DfColumnElement', N'DfUnpivotSourceReferenceElement')
UNION ALL
SELECT n.BasicGraphNodeId NodeFromId, ps.NodeToId FROM dfPropSources ps
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = ps.NodeFromId
)
INSERT INTO BIDoc.BasicGraphLinks(
			--[BasicGraphLinkId]
           --,
		   [LinkType]
           ,[NodeFromId]
           ,[NodeToId]
		   )
	SELECT 
	--ROW_NUMBER() OVER(ORDER BY s.NodeFromId) + @linkSequenceStart - 1
	--,
	@linktype
	,s.NodeFromId
	,s.NodeToId
	FROM dfPropSources s

;WITH dfPropTargets AS
(
SELECT l.NodeFromId, l.NodeToId FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphLinks l ON n.BasicGraphNodeId = l.NodeFromId AND l.LinkType = @linktype
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.NodeType IN ( N'DfColumnElement', N'DfUnpivotSourceReferenceElement')
UNION ALL
SELECT pt.NodeFromId NodeFromId, n.BasicGraphNodeId NodeToId FROM dfPropTargets pt
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = pt.NodeToId
)
SELECT @dfPropTargetCount = COUNT(*) FROM dfPropTargets

PRINT 'Propagated DF target links - ' + CONVERT(VARCHAR(10), @dfPropTargetCount)

--EXEC sp_sequence_get_range @sequence_name = N'BIDoc.BasicGraphLinksSequence', @range_size = @dfPropTargetCount, @range_first_value = @linkSequenceStartVariant OUTPUT
--	SET @linkSequenceStart = CONVERT(INT, @linkSequenceStartVariant)

;WITH dfPropTargets AS
(
SELECT l.NodeFromId, l.NodeToId FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.BasicGraphLinks l ON n.BasicGraphNodeId = l.NodeFromId AND l.LinkType = @linktype
WHERE n.ProjectConfigId = @projectconfigid AND n.GraphKind = @graphkind AND n.NodeType IN ( N'DfColumnElement', N'DfUnpivotSourceReferenceElement')
UNION ALL
SELECT pt.NodeFromId NodeFromId, n.BasicGraphNodeId NodeToId FROM dfPropTargets pt
INNER JOIN BIDoc.BasicGraphNodes n ON n.ParentId = pt.NodeToId
)
INSERT INTO BIDoc.BasicGraphLinks(
			--[BasicGraphLinkId]
           --,
		   [LinkType]
           ,[NodeFromId]
           ,[NodeToId]
		   )
	SELECT DISTINCT
	--ROW_NUMBER() OVER(ORDER BY t.NodeToId) + @linkSequenceStart - 1
	--,
	@linktype
	,t.NodeFromId
	,t.NodeToId
	FROM dfPropTargets t
--N'DimensionAttributeElement'


DECLARE @dfPropSourcesUpCount INT


;WITH dfPropMap AS
(
SELECT n.BasicGraphNodeId OriginalNodeId, n.BasicGraphNodeId, n.Description NodeDef FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId 
WHERE (n.NodeType IN (N'DimensionAttributeElement'/*, N'SqlScriptElement'*/)
OR
(n.NodeType = N'SqlScriptElement' AND e.RefPath LIKE '%/View%')
) AND n.GraphKind = @graphkind
AND n.ProjectConfigId = @projectconfigid
UNION ALL

SELECT dfPropMap.OriginalNodeId, n.BasicGraphNodeId, dfPropMap.NodeDef FROM BIDoc.BasicGraphNodes n
INNER JOIN dfPropMap ON n.ParentId = dfPropMap.BasicGraphNodeId AND (n.NodeType <> N'SqlScriptElement' OR n.Description = dfPropMap.NodeDef)
)
SELECT DISTINCT l.NodeFromId, pm.OriginalNodeId NodeToId 
INTO #propUpTargets
FROM BIDoc.BasicGraphLinks l
INNER JOIN dfPropMap pm ON pm.BasicGraphNodeId = l.NodeToId AND l.LinkType = @linktype
LEFT JOIN BIDoc.BasicGraphLinks lr ON lr.NodeFromId = l.NodeFromId AND lr.NodeToId = pm.OriginalNodeId AND lr.LinkType = @linktype
WHERE lr.BasicGraphLinkId IS NULL AND l.NodeFromId <> pm.OriginalNodeId


DECLARE @propUpCount INT  = (SELECT COUNT(*) FROM #propUpTargets)
PRINT 'Target propagation links - ' + CONVERT(VARCHAR(10), @propUpCount)

--EXEC sp_sequence_get_range @sequence_name = N'BIDoc.BasicGraphLinksSequence', @range_size = @propUpCount, @range_first_value = @linkSequenceStartVariant OUTPUT
--	SET @linkSequenceStart = CONVERT(INT, @linkSequenceStartVariant)

INSERT INTO BIDoc.BasicGraphLinks(
			--[BasicGraphLinkId]
           --,
		   [LinkType]
           ,[NodeFromId]
           ,[NodeToId]
		   )
	SELECT DISTINCT
	--ROW_NUMBER() OVER(ORDER BY t.NodeFromId) + @linkSequenceStart - 1
	--,
	@linktype
	,t.NodeFromId
	,t.NodeToId
	FROM #propUpTargets t

------------- SqlScripts with future ------------------

;WITH targetNodes AS(
-- nodes with future - have links leading from them (?)
SELECT DISTINCT tn.BasicGraphNodeId FROM BIDoc.BasicGraphNodes tn
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = tn.BasicGraphNodeId 
WHERE tn.ProjectConfigId = @projectconfigid AND tn.GraphKind = @graphkind
AND l.LinkType = @linktype AND tn.NodeType IN( 'SqlScriptElement', N'SqlDmlSourceElement', 
	N'SqlNAryOperationOperandColumnElement', N'SqlNAryOperationOutputColumnElement')
)
,targetDescendants AS
(
SELECT BasicGraphNodeId, BasicGraphNodeId AS DescendantNodeId FROM targetNodes
UNION ALL
SELECT td.BasicGraphNodeId, n.BasicGraphNodeId DescendantNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN targetDescendants td ON td.DescendantNodeId = n.ParentId
)
-- descendants with lineage - have links leading to them -> ancestors with future will counter-inherit their links
INSERT INTO BIDoc.BasicGraphLinks
(NodeFromId, NodeToId, LinkType)
SELECT DISTINCT l.NodeFromId, td.BasicGraphNodeId NodeToId, @linktype
FROM targetDescendants td
INNER JOIN BIDoc.BasicGraphLinks l ON l.LinkType = @linktype AND l.NodeToId = td.DescendantNodeId
LEFT JOIN BIDoc.BasicGraphLinks exl ON exl.NodeFromId = l.NodeFromId AND exl.NodeToId = td.BasicGraphNodeId AND exl.LinkType = @linktype
WHERE exl.BasicGraphLinkId IS NULL
OPTION(MAXRECURSION  1000)


PRINT CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' new links from SqlScript ancestors ''with future'' propagation'



;WITH targetNodes AS(
-- nodes with future - have links leading from them (?)
SELECT DISTINCT tn.BasicGraphNodeId FROM BIDoc.BasicGraphNodes tn
WHERE tn.ProjectConfigId = @projectconfigid AND tn.GraphKind = @graphkind AND tn.NodeType IN( N'ReportCalculatedMeasureElement', N'CubeCalculatedMeasureElement', N'DimensionAttributeElement')
)
,targetDescendants AS
(
SELECT BasicGraphNodeId, BasicGraphNodeId AS DescendantNodeId FROM targetNodes
UNION ALL
SELECT td.BasicGraphNodeId, n.BasicGraphNodeId DescendantNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN targetDescendants td ON td.DescendantNodeId = n.ParentId
)
-- descendants with lineage - have links leading to them -> ancestors with future will counter-inherit their links
INSERT INTO BIDoc.BasicGraphLinks
(NodeFromId, NodeToId, LinkType)
SELECT DISTINCT l.NodeFromId, td.BasicGraphNodeId NodeToId, @linktype
FROM targetDescendants td
INNER JOIN BIDoc.BasicGraphLinks l ON l.LinkType = @linktype AND l.NodeToId = td.DescendantNodeId
LEFT JOIN BIDoc.BasicGraphLinks exl ON exl.NodeFromId = l.NodeFromId AND exl.NodeToId = td.BasicGraphNodeId AND exl.LinkType = @linktype
WHERE exl.BasicGraphLinkId IS NULL
OPTION(MAXRECURSION  1000)


PRINT CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' new links from SSAS descendants propagation'


DROP TABLE #propUpTargets


---------------------------------------------------



-- textboxes with lineage
;WITH targetNodes AS(
SELECT DISTINCT tn.BasicGraphNodeId FROM BIDoc.BasicGraphNodes tn
WHERE tn.ProjectConfigId = @projectconfigid AND tn.GraphKind = @graphkind
AND tn.NodeType IN( N'TextBoxElement')
)
,targetDescendants AS
(
SELECT BasicGraphNodeId, BasicGraphNodeId AS DescendantNodeId FROM targetNodes
UNION ALL
SELECT td.BasicGraphNodeId, n.BasicGraphNodeId DescendantNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN targetDescendants td ON td.DescendantNodeId = n.ParentId
)
-- descendants with lineage - have links leading to them -> ancestors with future will counter-inherit their links
INSERT INTO BIDoc.BasicGraphLinks
(NodeFromId, NodeToId, LinkType)

SELECT DISTINCT l.NodeFromId, td.BasicGraphNodeId NodeToId, @linktype
FROM targetDescendants td
INNER JOIN BIDoc.BasicGraphLinks l ON l.LinkType = @linktype AND l.NodeToId = td.DescendantNodeId
LEFT JOIN BIDoc.BasicGraphLinks exl ON exl.NodeFromId = l.NodeFromId AND exl.NodeToId = td.BasicGraphNodeId AND exl.LinkType = @linktype
WHERE exl.BasicGraphLinkId IS NULL
OPTION(MAXRECURSION  1000)

PRINT CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' new links from textboxes propagation'


-- delete duplicate links
-- (links for which there is an equivalent link (same souce, target, type) with a lower ID)
;WITH fstLnks AS
(
SELECT MIN(l.BasicGraphLinkId) BasicGraphLinkId, l.NodeFromId, l.NodeToId, l.LinkType 
FROM BIDoc.BasicGraphLinks l
INNER JOIN BIDoc.BasicGraphNodes n ON l.NodeFromId = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid
GROUP BY l.NodeFromId, l.NodeToId, l.LinkType
)
DELETE dl FROM BIDoc.BasicGraphLinks dl
INNER JOIN fstLnks f ON f.NodeFromId = dl.NodeFromId AND f.NodeToId = dl.NodeToId AND f.LinkType = dl.LinkType AND dl.BasicGraphLinkId <> f.BasicGraphLinkId


------------- SSAS hierarchies - descendants with lineage ------------------

;WITH targetNodes AS(
-- nodes with future - have links leading from them (?)
SELECT DISTINCT tn.BasicGraphNodeId FROM BIDoc.BasicGraphNodes tn
WHERE tn.ProjectConfigId = @projectconfigid AND tn.GraphKind = @graphkind
AND tn.NodeType IN( 'HierarchyElement')
)
,targetDescendants AS
(
SELECT BasicGraphNodeId, BasicGraphNodeId AS DescendantNodeId FROM targetNodes
UNION ALL
SELECT td.BasicGraphNodeId, n.BasicGraphNodeId DescendantNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN targetDescendants td ON td.DescendantNodeId = n.ParentId
)
-- descendants with lineage - have links leading to them -> ancestors with future will counter-inherit their links
INSERT INTO BIDoc.BasicGraphLinks
(NodeFromId, NodeToId, LinkType)
SELECT DISTINCT l.NodeFromId, td.BasicGraphNodeId NodeToId, @linktype
FROM targetDescendants td
INNER JOIN BIDoc.BasicGraphLinks l ON l.LinkType = @linktype AND l.NodeToId = td.DescendantNodeId
LEFT JOIN BIDoc.BasicGraphLinks exl ON exl.NodeFromId = l.NodeFromId AND exl.NodeToId = td.BasicGraphNodeId AND exl.LinkType = @linktype
WHERE exl.BasicGraphLinkId IS NULL
OPTION(MAXRECURSION  1000)


PRINT CONVERT(NVARCHAR(20), @@ROWCOUNT) + N' new links from hierarchy descendants propagation'
GO
PRINT N'Creating Procedure [BIDoc].[sp_CreateDataFlowLowDetailGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_CreateDataFlowLowDetailGraph]
	@projectConfigId UNIQUEIDENTIFIER
AS
--DECLARE @projectConfigId UNIQUEIDENTIFIER = N'87E5A6F8-7ADD-4292-8537-E422EE66AD61'

DECLARE @sourceGraphKind NVARCHAR(50) = N'DataFlow'
DECLARE @targetGraphKind NVARCHAR(50) = N'DataFlowLowDetail'

--------- clear graph

EXEC BIDoc.sp_ClearGraph @projectconfigid, @targetgraphkind

---------------------
CREATE TABLE #nodeIdMap
(
OldNodeId INT,
NewNodeId INT,
)


INSERT INTO BIDoc.BasicGraphNodes
           (--[BasicGraphNodeId]
           --,
		   [Name]
           ,[NodeType]
           ,[Description]
           ,[ParentId]
           ,[GraphKind]
           ,[ProjectConfigId]
           ,[SourceElementId]
           ,[TopologicalOrder])
SELECT 
			--mid.NewNodeid
			--,
			n.Name
			,n.NodeType
			,n.Description
			,NULL --pid.NewNodeid
			,@targetgraphkind
			,@projectconfigid
			,n.SourceElementId
			,0 TopologicalOrder
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDetailLevels dl ON dl.ElementType = e.[Type]
WHERE 
	n.ProjectConfigId = @projectconfigid 
	AND n.GraphKind  = @sourcegraphkind
	AND dl.DetailLevel = 3

INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
SELECT o.BasicGraphNodeId, n.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes o
INNER JOIN BIDoc.BasicGraphNodes n ON o.SourceElementId = n.SourceElementId
WHERE o.ProjectConfigId = @projectconfigid AND n.ProjectConfigId = @projectconfigid
	AND o.GraphKind = @sourcegraphkind AND n.GraphKind = @targetgraphkind

CREATE NONCLUSTERED INDEX TIX_nodeIdMap_OldNodeId ON #nodeIdMap(OldNodeId ASC)
CREATE NONCLUSTERED INDEX TIX_nodeIdMap_NewNodeId ON #nodeIdMap(NewNodeId ASC)

UPDATE n SET ParentId = np.NewNodeid FROM BIDoc.BasicGraphNodes n
INNER JOIN #nodeIdMap m ON n.BasicGraphNodeId = m.NewNodeid
INNER JOIN BIDoc.BasicGraphNodes o ON o.BasicGraphNodeId = m.OldNodeId
INNER JOIN #nodeIdMap np ON np.OldNodeId = o.ParentId

INSERT INTO BIDoc.BasicGraphLinks
(
	--BasicGraphLinkId, 
	LinkType, 
	NodeFromId, 
	NodeToId
)
SELECT DISTINCT
l.LinkType,
mf.NewNodeId,
mt.NewNodeId
FROM BIDoc.BasicGraphLinks l 
INNER JOIN BIDoc.BasicGraphNodes nf ON l.NodeFromId = nf.BasicGraphNodeId
INNER JOIN BIDoc.HigherLevelElementAncestors ancf ON ancf.SouceDfNodeId = l.NodeFromId
INNER JOIN BIDoc.HigherLevelElementAncestors anct ON anct.SouceDfNodeId = l.NodeToId
INNER JOIN #nodeIdMap mf ON mf.OldNodeId = ancf.AncestorDfNodeId
INNER JOIN #nodeIdMap mt ON mt.OldNodeId = anct.AncestorDfNodeId
WHERE /*l.LinkType <> @linktype AND*/ 
nf.ProjectConfigId = @projectconfigid AND nf.GraphKind = @sourcegraphkind
AND ancf.DetailLevel = 3
AND anct.DetailLevel = 3
AND mf.NewNodeid <> mf.OldNodeId

DROP TABLE #nodeIdMap
GO
PRINT N'Creating Procedure [BIDoc].[sp_CreateDataFlowMediumDetailGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_CreateDataFlowMediumDetailGraph]
	@projectConfigId UNIQUEIDENTIFIER
AS
--DECLARE @projectConfigId UNIQUEIDENTIFIER = N'87E5A6F8-7ADD-4292-8537-E422EE66AD61'

DECLARE @sourceGraphKind NVARCHAR(50) = N'DataFlow'
DECLARE @targetGraphKind NVARCHAR(50) = N'DataFlowMediumDetail'

--------- clear graph

EXEC BIDoc.sp_ClearGraph @projectconfigid, @targetgraphkind

---------------------
CREATE TABLE #nodeIdMap
(
OldNodeId INT,
NewNodeId INT,
)


INSERT INTO BIDoc.BasicGraphNodes
           (--[BasicGraphNodeId]
           --,
		   [Name]
           ,[NodeType]
           ,[Description]
           ,[ParentId]
           ,[GraphKind]
           ,[ProjectConfigId]
           ,[SourceElementId]
           ,[TopologicalOrder])
SELECT 
			--mid.NewNodeid
			--,
			n.Name
			,n.NodeType
			,n.Description
			,NULL --pid.NewNodeid
			,@targetgraphkind
			,@projectconfigid
			,n.SourceElementId
			,0 TopologicalOrder
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
INNER JOIN BIDoc.ModelElementTypeDetailLevels dl ON dl.ElementType = e.[Type]
WHERE 
	n.ProjectConfigId = @projectconfigid 
	AND n.GraphKind  = @sourcegraphkind
	AND dl.DetailLevel >= 2

INSERT INTO #nodeIdMap(OldNodeId, NewNodeid)
SELECT o.BasicGraphNodeId, n.BasicGraphNodeId
FROM BIDoc.BasicGraphNodes o
INNER JOIN BIDoc.BasicGraphNodes n ON o.SourceElementId = n.SourceElementId
WHERE o.ProjectConfigId = @projectconfigid AND n.ProjectConfigId = @projectconfigid
	AND o.GraphKind = @sourcegraphkind AND n.GraphKind = @targetgraphkind

CREATE NONCLUSTERED INDEX TIX_nodeIdMap_OldNodeId ON #nodeIdMap(OldNodeId ASC)
CREATE NONCLUSTERED INDEX TIX_nodeIdMap_NewNodeId ON #nodeIdMap(NewNodeId ASC)

UPDATE n SET ParentId = np.NewNodeid FROM BIDoc.BasicGraphNodes n
INNER JOIN #nodeIdMap m ON n.BasicGraphNodeId = m.NewNodeid
INNER JOIN BIDoc.BasicGraphNodes o ON o.BasicGraphNodeId = m.OldNodeId
INNER JOIN #nodeIdMap np ON np.OldNodeId = o.ParentId

INSERT INTO BIDoc.BasicGraphLinks
(
	--BasicGraphLinkId, 
	LinkType, 
	NodeFromId, 
	NodeToId
)
SELECT DISTINCT
l.LinkType,
mf.NewNodeId,
mt.NewNodeId
FROM BIDoc.BasicGraphLinks l 
INNER JOIN BIDoc.BasicGraphNodes nf ON l.NodeFromId = nf.BasicGraphNodeId
INNER JOIN BIDoc.HigherLevelElementAncestors ancf ON ancf.SouceDfNodeId = l.NodeFromId
INNER JOIN BIDoc.HigherLevelElementAncestors anct ON anct.SouceDfNodeId = l.NodeToId
INNER JOIN #nodeIdMap mf ON mf.OldNodeId = ancf.AncestorDfNodeId
INNER JOIN #nodeIdMap mt ON mt.OldNodeId = anct.AncestorDfNodeId
WHERE /*l.LinkType <> @linktype AND*/ 
nf.ProjectConfigId = @projectconfigid AND nf.GraphKind = @sourcegraphkind
AND ancf.DetailLevel = 2
AND anct.DetailLevel = 2
AND mf.NewNodeid <> mf.OldNodeId

DROP TABLE #nodeIdMap
GO
PRINT N'Creating Procedure [BIDoc].[sp_FillDataMessages]...';


GO
CREATE PROCEDURE [BIDoc].[sp_FillDataMessages]
		--DECLARE
	@projectconfigid UNIQUEIDENTIFIER --= N'FD1312FC-1182-4B9C-82D9-2089F3468BFB'
AS

DELETE em FROM [BIDoc].[DataMessages] em
INNER JOIN BIDoc.ModelElements me ON em.SourceElementId = me.ModelElementId
WHERE me.ProjectConfigId = @projectconfigid

-- Prepaire firts table without spliting json value

--OLEDB Source
SELECT 
outColElem.ModelElementId AS 'SourceElementId',
tabColElem.ModelElementId AS 'TargetElementId',
outColElem.ExtendedProperties AS 'SourcePath', 
tabColElem.ExtendedProperties AS 'TargetPath'
INTO #DataMessageFirstStep
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.BasicGraphNodes en ON en.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.BasicGraphNodes outNode ON outNode.ParentId = en.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes outColNode ON outColNode.ParentId = outNode.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements outColElem ON outColElem.ModelElementId = outColNode.SourceElementId
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = outColNode.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes tabColNode ON tabColNode.BasicGraphNodeId = l.NodeFromId
INNER JOIN BIDoc.ModelElements tabColElem ON tabColElem.ModelElementId = tabColNode.SourceElementId
WHERE e.Type = 'CD.DLS.Model.Mssql.Ssis.DfSourceElement'
AND e.ProjectConfigId =  @projectconfigid
AND en.GraphKind = N'DataFlow'
AND tabColElem.Type = N'CD.DLS.Model.Mssql.Db.ColumnElement'

--OLEDB Destination
INSERT INTO #DataMessageFirstStep 
(SourceElementId,
TargetElementId,
SourcePath, 
TargetPath)
SELECT  
se.ModelElementId AS 'SourceElementId',
te.ModelElementId AS 'TargetElementId',
se.ExtendedProperties AS 'SourcePath',
te.ExtendedProperties  AS 'TargetPath'
FROM BIDoc.ModelLinks l 
INNER JOIN BIDoc.ModelElements se ON l.ElementFromId = se.ModelElementId
INNER JOIN BIDoc.ModelElements te ON l.ElementToId = te.ModelElementId
WHERE l.Type = N'ExternalDestinationColumn'
AND se.ProjectConfigId = @projectconfigid AND te.ProjectConfigId = @projectconfigid

-- Prepaire Second step spliting json value
SELECT 
	[SourceElementId],
	[TargetElementId],
	adm.f_SimpleJsonValue(SourcePath, 'DtsDataType') AS 'SourceDtsDataType',
	adm.f_SimpleJsonValue(SourcePath, 'Length') AS 'SourceLength',
	adm.f_SimpleJsonValue(SourcePath, 'Precision') AS 'SourcePrecision',
	adm.f_SimpleJsonValue(SourcePath, 'Scale') AS 'SourceScale',
	adm.f_SimpleJsonValue(TargetPath, 'SqlDataType') AS 'TargetSqlDataType',
	adm.f_SimpleJsonValue(TargetPath, 'Length') AS 'TargetLength',
	adm.f_SimpleJsonValue(TargetPath, 'Precision') AS 'TargetPrecision',
	adm.f_SimpleJsonValue(TargetPath, 'Scale') AS 'TargetScale'
INTO #DataMessageSecondStep
FROM #DataMessageFirstStep

DROP TABLE #DataMessageFirstStep

--Prepaire Third step
SELECT *
INTO #DataMessageThirdStep
FROM  #DataMessageSecondStep dmss
INNER JOIN BIDoc.SourceDataTypes sdt ON SourceDtsDataType = sdt.SourceDataTypeName
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId

DROP TABLE #DataMessageSecondStep

--Last Step fill DataMEssages
--INT

INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM  #DataMessageThirdStep dmts
WHERE dmts.DataTypeName IN (N'String', N'Binary',N'Text',N'Integer',N'Floating-point number') 
AND CAST(SourceLength AS INT)  > CAST(TargetLength AS INT) 
AND CAST(TargetLength AS INT) >= 0
AND NOT dmts.SourceDataTypeName = N'DT_GUID'
AND ('Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')') IS NOT NULL

--BOOL
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM #DataMessageThirdStep dmts
WHERE dmts.DataTypeName IN (N'Boolean')
AND NOT CAST(SourceLength AS INT) = CAST(TargetLength AS INT)
AND ('Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')') IS NOT NULL

--Numeric, Decimal
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Scale, Precision): '+ SourceDtsDataType + '('+
SourceScale +' ,'+ SourcePrecision 
+') Target Data Type (Scale, Precisionh): '+
TargetSqlDataType +'('+ TargetScale +' ,'+ 
TargetPrecision +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM #DataMessageThirdStep dmts
WHERE dmts.DataTypeName IN (N'Fixed-point number')
AND ((CAST(SourceScale AS INT)  > CAST(TargetScale AS INT) 
AND CAST(SourcePrecision AS INT)  > CAST(TargetPrecision AS INT))
OR (CAST(SourceScale AS INT)  > CAST(TargetScale AS INT) 
OR CAST(SourcePrecision AS INT)  > CAST(TargetPrecision AS INT)))
AND  ('Source Data Type (Scale, Precision): '+ SourceDtsDataType + '('+
SourceScale +' ,'+ SourcePrecision 
+') Target Data Type (Scale, Precisionh): '+
TargetSqlDataType +'('+ TargetScale +' ,'+ 
TargetPrecision +')') IS NOT NULL

DROP TABLE #DataMessageThirdStep

/*INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM  #DataMessageSecondStep dmss
INNER JOIN BIDoc.SourceDataTypes sdt ON SourceDtsDataType = sdt.SourceDataTypeName 
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE dt.DataTypeName IN (N'String', N'Binary',N'Text',N'Integer',N'Floating-point number') 
AND CAST(SourceLength AS INT)  > CAST(TargetLength AS INT) 
AND CAST(TargetLength AS INT) >= 0
AND NOT sdt.SourceDataTypeName = N'DT_GUID'

--BOOL
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Length): '+ SourceDtsDataType + '('+
SourceLength +') Target Data Type (Length): '+
TargetSqlDataType +'('+ TargetLength +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM #DataMessageSecondStep dmss
INNER JOIN BIDoc.SourceDataTypes sdt ON SourceDtsDataType = sdt.SourceDataTypeName 
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE dt.DataTypeName IN (N'Boolean')
AND NOT CAST(SourceLength AS INT) = CAST(TargetLength AS INT)

--Numeric, Decimal
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
SourceElementId,
TargetElementId,
'Source Data Type (Scale, Precision): '+ SourceDtsDataType + '('+
SourceScale +' ,'+ SourcePrecision 
+') Target Data Type (Scale, Precisionh): '+
TargetSqlDataType +'('+ TargetScale +' ,'+ 
TargetScale +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM #DataMessageSecondStep dmss
INNER JOIN BIDoc.SourceDataTypes sdt ON SourceDtsDataType = sdt.SourceDataTypeName
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE dt.DataTypeName IN (N'Fixed-point number')
AND ((CAST(SourceScale AS INT)  > CAST(TargetScale AS INT) 
AND CAST(SourcePrecision AS INT)  > CAST(TargetPrecision AS INT))
OR (CAST(SourceScale AS INT)  > CAST(TargetScale AS INT) 
OR CAST(SourcePrecision AS INT)  > CAST(TargetPrecision AS INT)))

DROP TABLE #DataMessageSecondStep


INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT 
outColElem.ModelElementId AS 'SourceElementId',
tabColElem.ModelElementId AS 'TargetElementId',
'Source Data Type (Length): '+ adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') + '('+
CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Length')AS NVARCHAR) +') Target Data Type (Length): '+
adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'SqlDataType') +'('+ CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Length')AS NVARCHAR) +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.BasicGraphNodes en ON en.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.BasicGraphNodes outNode ON outNode.ParentId = en.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes outColNode ON outColNode.ParentId = outNode.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements outColElem ON outColElem.ModelElementId = outColNode.SourceElementId
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = outColNode.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes tabColNode ON tabColNode.BasicGraphNodeId = l.NodeFromId
INNER JOIN BIDoc.ModelElements tabColElem ON tabColElem.ModelElementId = tabColNode.SourceElementId
INNER JOIN BIDoc.SourceDataTypes sdt ON adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') = sdt.SourceDataTypeName 
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE e.Type = 'CD.DLS.Model.Mssql.Ssis.DfSourceElement'
AND e.ProjectConfigId =  @projectconfigid
AND en.GraphKind = N'DataFlow'
AND tabColElem.Type = N'CD.DLS.Model.Mssql.Db.ColumnElement'
AND dt.DataTypeName IN (N'String', N'Binary',N'Text',N'Integer',N'Floating-point number') 
AND CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Length') AS INT)  > CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Length')AS INT) AND CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Length')AS INT) >= 0
AND NOT sdt.SourceDataTypeName = N'DT_GUID'

--BOOL
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT outColElem.ModelElementId AS 'SourceElementId', tabColElem.ModelElementId AS 'TargetElementId',
'Source Data Type (Length): '+ adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') + '('+
CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Length')AS NVARCHAR) +') Target Data Type (Length): '+
adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'SqlDataType') +'('+ CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Length')AS NVARCHAR) +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.BasicGraphNodes en ON en.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.BasicGraphNodes outNode ON outNode.ParentId = en.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes outColNode ON outColNode.ParentId = outNode.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements outColElem ON outColElem.ModelElementId = outColNode.SourceElementId
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = outColNode.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes tabColNode ON tabColNode.BasicGraphNodeId = l.NodeFromId
INNER JOIN BIDoc.ModelElements tabColElem ON tabColElem.ModelElementId = tabColNode.SourceElementId
INNER JOIN BIDoc.SourceDataTypes sdt ON adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') = sdt.SourceDataTypeName
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE e.Type = 'CD.DLS.Model.Mssql.Ssis.DfSourceElement'
AND e.ProjectConfigId =  @projectconfigid
AND en.GraphKind = N'DataFlow'
AND tabColElem.Type = N'CD.DLS.Model.Mssql.Db.ColumnElement'
AND dt.DataTypeName IN (N'Boolean')
AND NOT CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Length') AS INT) = CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Length')AS INT)

--Numeric, Decimal
INSERT INTO [BIDoc].[DataMessages]
(
	[SourceElementId],
	[TargetElementId],
	[Message],
	[DataMessagesTypeId]
)
SELECT outColElem.ModelElementId AS 'SourceElementId', tabColElem.ModelElementId AS 'TargetElementId',
'Source Data Type (Scale, Precision): '+ adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') + '('+
CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Scale')AS NVARCHAR)+' ,'+CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Precision')AS NVARCHAR) 
+') Target Data Type (Scale, Precisionh): '+
adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'SqlDataType') +'('+ CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Scale')AS NVARCHAR) +' ,'+ 
CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Scale')AS NVARCHAR) +')' AS 'Message',
(SELECT DataMessagesTypeId FROM BIDoc.DataMessagesType WHERE DataMessageCode='Truncat') AS 'DataMessagesTypeId'
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.BasicGraphNodes en ON en.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.BasicGraphNodes outNode ON outNode.ParentId = en.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes outColNode ON outColNode.ParentId = outNode.BasicGraphNodeId 
INNER JOIN BIDoc.ModelElements outColElem ON outColElem.ModelElementId = outColNode.SourceElementId
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeToId = outColNode.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes tabColNode ON tabColNode.BasicGraphNodeId = l.NodeFromId
INNER JOIN BIDoc.ModelElements tabColElem ON tabColElem.ModelElementId = tabColNode.SourceElementId
INNER JOIN BIDoc.SourceDataTypes sdt ON adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'DtsDataType') = sdt.SourceDataTypeName
INNER JOIN BIDoc.DataTypes dt ON sdt.DataTypeId = dt.DataTypesId
WHERE e.Type = 'CD.DLS.Model.Mssql.Ssis.DfSourceElement'
AND e.ProjectConfigId =  @projectconfigid
AND en.GraphKind = N'DataFlow'
AND tabColElem.Type = N'CD.DLS.Model.Mssql.Db.ColumnElement'
AND dt.DataTypeName IN (N'Fixed-point number')
AND ((CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Scale') AS INT)  > CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Scale')AS INT) 
AND CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Precision') AS INT)  > CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Precision')AS INT))
OR (CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Scale') AS INT)  > CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Scale')AS INT) 
OR CAST(adm.f_SimpleJsonValue(outColElem.ExtendedProperties, 'Precision') AS INT)  > CAST(adm.f_SimpleJsonValue(tabColElem.ExtendedProperties, 'Precision')AS INT)))
*/
GO
PRINT N'Creating Procedure [BIDoc].[sp_FillHigherLevelElementAncestors]...';


GO
CREATE PROCEDURE [BIDoc].[sp_FillHigherLevelElementAncestors]
	@projectConfigId UNIQUEIDENTIFIER
AS

DECLARE @graphkind NVARCHAR(50) = N'DataFlow'


DELETE ea FROM BIDoc.HigherLevelElementAncestors ea
INNER JOIN BIDoc.ModelElements e ON ea.SouceElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId

;WITH ancestors as
(
SELECT n.BasicGraphNodeId OriginalNodeId, n.SourceElementId OriginalElementId, n.BasicGraphNodeId, n.ParentId, e.ModelElementId, e.Caption, e.Type, 0 AncestorLevel 
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid

UNION ALL

SELECT a.OriginalNodeId, a.OriginalElementId OriginalElementId, n.BasicGraphNodeId, n.ParentId, e.ModelElementId, e.Caption, e.Type, a.AncestorLevel + 1 AncestorLevel 
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
INNER JOIN ancestors a ON a.ParentId = n.BasicGraphNodeId
--WHERE n.GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid
)
,detailLevels AS
(
SELECT a.*, dl.DetailLevel
FROM ancestors a
INNER JOIN BIDoc.ModelElementTypeDetailLevels dl ON dl.ElementType = a.Type
)
,closestDetailLevelsPrep AS
(
SELECT dl.ModelElementId, dl.OriginalNodeId, dl.DetailLevel, dl.OriginalElementId,
dl.AncestorLevel FirstAncestorLevel, 
FIRST_VALUE(dl.BasicGraphNodeId) OVER(PARTITION BY dl.DetailLevel, dl.OriginalNodeId ORDER BY dl.AncestorLevel) DetailLevelNodeId,
FIRST_VALUE(dl.ModelElementId) OVER(PARTITION BY dl.DetailLevel, dl.OriginalNodeId ORDER BY dl.AncestorLevel) DetailLevelElementId,
FIRST_VALUE(dl.Type) OVER(PARTITION BY dl.DetailLevel, dl.OriginalNodeId ORDER BY dl.AncestorLevel) DetailLevelType,
FIRST_VALUE(dl.Caption) OVER(PARTITION BY dl.DetailLevel, dl.OriginalNodeId ORDER BY dl.AncestorLevel) DetailLevelElementName
,ROW_NUMBER() OVER(PARTITION BY dl.DetailLevel, dl.OriginalNodeId ORDER BY dl.AncestorLevel) RN
FROM detailLevels dl
--GROUP BY dl.OriginalNodeId, dl.DetailLevel
)
,closestDetailLevels AS
(
SELECT * FROM closestDetailLevelsPrep WHERE RN = 1
)
SELECT * 
INTO #upperLevels
FROM closestDetailLevels
OPTION(MAXRECURSION 1000)


INSERT INTO BIDoc.HigherLevelElementAncestors(
[SouceElementId],
[AncestorElementId],
[SouceDfNodeId],
[AncestorDfNodeId],
[DetailLevel]
)
SELECT OriginalElementId, DetailLevelElementId, OriginalNodeId, DetailLevelNodeId, DetailLevel 
FROM #upperLevels



DROP TABLE #upperLevels



RETURN 0
GO
PRINT N'Creating Procedure [BIDoc].[sp_CreateDataFlowGraph]...';


GO
CREATE PROCEDURE [BIDoc].[sp_CreateDataFlowGraph]
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
AS

----------------------
-- clear higher ancestors (reference nodes)

DECLARE @rc INT = 1
WHILE @rc > 0
BEGIN
	DELETE TOP (10000) a FROM [BIDoc].[HigherLevelElementAncestors] a
	INNER JOIN BIDoc.ModelElements e ON a.SouceElementId = e.ModelElementId
	WHERE e.ProjectConfigId = @projectConfigId

	SELECT @rc = @@ROWCOUNT
END

CREATE TABLE #dataflowLinks
(
RuleName NVARCHAR(MAX),
ElementFromId INT,
ElementToId INT,
)


-------------------------

DECLARE @graphKind NVARCHAR(50) = N'DataFlow'

---------------------- clear graph

EXEC BIDoc.sp_ClearGraph @projectconfigid, @graphKind

------------------------ replicate graph

INSERT INTO BIDoc.BasicGraphNodes
(
Name, 
NodeType, 
ParentId, 
GraphKind, 
ProjectConfigId, 
SourceElementId, 
TopologicalOrder
)
SELECT
e.Caption,
REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(e.Type,
N'CD.DLS.Model.Mssql', N''), N'.Db.', N''), N'.Ssis.', N''), N'.Ssas.', N''), N'.Ssrs.', N''), N'.Agent.', N''), N'.Tabular.', N''), N'.Pbi.', N''), N'.PowerQuery.', N'PowerQuery.')  NodeType,
NULL,
@graphKind,
e.ProjectConfigId,
e.ModelElementId,
0 TopologicalOrder
FROM BIDoc.ModelElements e
WHERE e.ProjectConfigId = @projectconfigid

UPDATE en 
SET ParentId = pen.BasicGraphNodeId 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.Type = N'parent'
INNER JOIN BIDoc.ModelElements pe ON pe.ModelElementId = l.ElementToId
INNER JOIN BIDoc.BasicGraphNodes en ON en.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.BasicGraphNodes pen ON pen.SourceElementId = pe.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId
AND pe.ProjectConfigId = @projectConfigId
AND en.GraphKind = @graphKind

INSERT INTO BIDoc.BasicGraphLinks
(LinkType, NodeFromId, NodeToId)
SELECT 
N'Parent', n.BasicGraphNodeId, n.ParentId
FROM BIDoc.BasicGraphNodes n 
WHERE n.ProjectConfigId = @projectConfigId
AND n.ParentId IS NOT NULL

--------------------------- 
-- MssqlReferenceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'MssqlReferenceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type <> N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement'

-----------------
-- MssqlDmlTargetReferenceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'MssqlDmlTargetReferenceDataFlowRule', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement'


-----------------
-- MssqlDmlSourceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'MssqlDmlSourceDataFlowRule', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'TargetReference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement'


-----------------
-- MssqlNAryOperationOperandRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'MssqlNAryOperationOperandRule', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'OperationOutputColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement'


-----------------
-- SsisDfExternalColumnsDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfExternalColumnsDataFlowRule_ExternalDestinationColumn', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'ExternalDestinationColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfColumnElement'

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfExternalColumnsDataFlowRule_ExternalSourceColumn', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'ExternalSourceColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfColumnElement'

-----------------
-- SsisDfTransformationDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfTransformationDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'SourceDfColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type IN(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement', N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement', N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement')


-----------------
-- SsisDfSourceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfSourceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'SourceConnection'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfSourceElement'


-----------------
-- SsisDfUnpivotSourceDataFlowRuleTPK

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfUnpivotSourceDataFlowRuleTPK', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'TargetPivotKeyColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement'


-----------------
-- SsisDfUnpivotSourceDataFlowRuleTV

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfUnpivotSourceDataFlowRuleTV', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'TargetValueColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement'


-----------------
-- SsisDfAggregationDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfAggregationDataFlowRule', ls.ElementToId, lt.ElementToId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks ls ON e.ModelElementId = ls.ElementFromId AND ls.[Type] = N'SourceDfColumn'
INNER JOIN BIDoc.ModelLinks lt ON e.ModelElementId = lt.ElementFromId AND lt.[Type] = N'TargetDfColumn'
--INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfColumnAggregationLinkElement'

-----------------
-- SsisDfLookupOutputJoinReferenceRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsisDfLookupOutputJoinReferenceRule', ls.ElementToId, lt.ElementToId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks ls ON e.ModelElementId = ls.ElementFromId AND ls.[Type] = N'InputJoinColumn'
INNER JOIN BIDoc.ModelLinks lt ON e.ModelElementId = lt.ElementFromId AND lt.[Type] = N'OutputColumn'
--INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssis.DfLookupOutputJoinReferenceElement'


-----------------
-- SsasDsvSourceColumnDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasDsvSourceColumnDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement'

-----------------
-- SsasDimensionKeyColumnDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasDimensionKeyColumnDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'DsvColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.KeyColumnElement'


-----------------
-- SsasDimensionNameColumnDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasDimensionNameColumnDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'DsvColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.NameColumnElement'


-----------------
-- SsasHierarchyLevelDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasHierarchyLevelDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Attribute'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement'


-----------------
-- SsasPhysicalMeasureDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasPhysicalMeasureDataFlowRule', pse.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks pl ON e.ModelElementId = pl.ElementToId AND pl.[Type] = N'parent'
INNER JOIN BIDoc.ModelElements pse ON pse.ModelElementId = pl.ElementFromId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'
AND pse.Type = N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement'


-----------------
-- SsasPhysicalMeasurePartitionSourceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasPhysicalMeasurePartitionSourceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement'

-----------------
-- SsasPartitionColumnDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasPartitionColumnDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement'


-----------------
-- SsasCubeDimensionDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsasCubeDimensionDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'DatabaseDimension'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement'


-------------------
---- CubeDimensionAttributeDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'CubeDimensionAttributeDataFlowRule', re.ModelElementId, e.ModelElementId 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'DatabaseDimensionAttribute'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement'


-------------------
---- CubeDimensionHierarchyDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'CubeDimensionHierarchyDataFlowRule', re.ModelElementId, e.ModelElementId 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'DatabaseDimensionHierarchy'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyElement'


-------------------
---- CubeDimensionHierarchyLevelDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'CubeDimensionHierarchyLevelDataFlowRule', re.ModelElementId, e.ModelElementId 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Attribute'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement'


-----------------
-- SsrsDataSetFieldDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsrsDataSetFieldDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement'


-----------------
-- SsrsReportParameterValidValuesDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsrsReportParameterValidValuesDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'ValueField'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesDataSetElement'


-----------------
-- SsrsReportParameterDefaultValuesDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'SsrsReportParameterDefaultValuesDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'ValueField'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesDataSetElement'

-------------------------
-- TabularPartitionColumnSourceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'TabularPartitionColumnSourceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'SourceElement'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionColumnElement'

-------------------------
-- TabularPartitionColumnTargetTableColumnDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'TabularPartitionColumnTargetTableColumnDataFlowRule', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'TargetTableColumn'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionColumnElement'

---------------------------------------------------
-- 

-- TabularMeasureReferenceRule
INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'PowerQueryReferenceRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement'


-------------------------
-- DaxTableReferenceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'DaxTableReferenceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.DaxTableReferenceElement'

-------------------------
-- DaxColumnReferenceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'DaxColumnReferenceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.DaxColumnReferenceElement'


-------------------------
-- DaxLinkDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'DaxLinkDataFlowRule', sre.ModelElementId, tre.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks sl ON e.ModelElementId = sl.ElementFromId AND sl.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements sre ON sre.ModelElementId = sl.ElementToId
INNER JOIN BIDoc.ModelLinks tl ON e.ModelElementId = tl.ElementFromId AND tl.[Type] = N'Target'
INNER JOIN BIDoc.ModelElements tre ON tre.ModelElementId = tl.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.Ssas.DaxDataFlowLinkElement'

-------------------------
-- DaxLinkTargetDataFlowRule

--INSERT INTO #dataflowLinks
--(RuleName, ElementFromId, ElementToId)

--SELECT DISTINCT N'DaxLinkTargetDataFlowRule', e.ModelElementId, re.ModelElementId FROM BIDoc.ModelElements e
--INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Target'
--INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
--AND e.ProjectConfigId = @projectConfigId
--AND e.Type = N'CD.DLS.Model.Mssql.Ssas.DaxDataFlowLinkElement'

-------------------------
--PivotTableFieldSourceDataFlowRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'PivotTableFieldSourceDataFlowRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'SourceField'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Business.Excel.PivotTableFieldElement'

-------------------------
--PivotTableFieldVaulesFilterSourceMeasureRule

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'PivotTableFieldVaulesFilterSourceMeasureRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'SourceMeasure'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Business.Excel.PivotTableValuesFilterElement'


--------------------------
-- Power Query Rules

-- PowerQueryDFLinkDataFlowRule
INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'PowerQueryDFLinkDataFlowRule', sre.ModelElementId, tre.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks sl ON e.ModelElementId = sl.ElementFromId AND sl.[Type] = N'Source'
INNER JOIN BIDoc.ModelElements sre ON sre.ModelElementId = sl.ElementToId
INNER JOIN BIDoc.ModelLinks tl ON e.ModelElementId = tl.ElementFromId AND tl.[Type] = N'Target'
INNER JOIN BIDoc.ModelElements tre ON tre.ModelElementId = tl.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type = N'CD.DLS.Model.Mssql.PowerQuery.DataFlowLinkElement'


-- PowerQueryReferenceRule
INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT N'PowerQueryReferenceRule', re.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Reference'
INNER JOIN BIDoc.ModelElements re ON re.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND e.Type LIKE N'CD.DLS.Model.Mssql.PowerQuery.%'



--
/*
INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT  N'PowerBIDataFlowRule',pse.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks pl ON e.ModelElementId = pl.ElementToId AND pl.[Type] = N'parent'
INNER JOIN BIDoc.ModelElements pse ON pse.ModelElementId = pl.ElementFromId
AND 
(
e.Type = N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement'
OR e.Type = N'CD.DLS.Model.Mssql.Pbi.ReportElement'
OR e.Type = N'CD.DLS.Model.Mssql.Pbi.VisualElement'
OR e.Type = N'CD.DLS.Model.Mssql.Pbi.ConnectionElement'
OR e.Type = N'CD.DLS.Model.Mssql.Pbi.PbiTableElement'
)
*/

INSERT INTO #dataflowLinks
(RuleName, ElementFromId, ElementToId)

SELECT DISTINCT  N'PowerBIColumnRefRule',se.ModelElementId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelLinks l ON e.ModelElementId = l.ElementFromId AND l.[Type] = N'Column'
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = l.ElementToId
AND e.ProjectConfigId = @projectConfigId
AND 
(
e.Type = N'CD.DLS.Model.Mssql.Pbi.ProjectionElement'
)

----


--- add DF links to the graph

;WITH dataflowLinks AS (
SELECT DISTINCT ElementFromId, ElementToId FROM #dataflowLinks
)
INSERT INTO BIDoc.BasicGraphLinks
(LinkType, NodeFromId, NodeToId)
SELECT
N'DataFlow',
nf.BasicGraphNodeId,
nt.BasicGraphNodeId
FROM dataflowLinks l
INNER JOIN BIDoc.BasicGraphNodes nf ON nf.SourceElementId = l.ElementFromId
INNER JOIN BIDoc.BasicGraphNodes nt ON nt.SourceElementId = l.ElementToId
WHERE nf.GraphKind = @graphKind AND nt.GraphKind = @graphKind

DROP TABLE #dataflowLinks
GO
PRINT N'Creating Procedure [BIDoc].[sp_AddOrUpdateElements]...';


GO
CREATE PROCEDURE [BIDoc].[sp_AddOrUpdateElements]
	@projectconfigid UNIQUEIDENTIFIER,
	@elements [BIDoc].[UDTT_ModelElements] READONLY
AS


UPDATE e 
SET
	e.ExtendedProperties = ne.ExtendedProperties,
	e.Definition = ne.Definition,
	e.Caption = ne.Caption
FROM [BIDoc].[ModelElements] e
INNER JOIN @elements ne ON e.RefPath = ne.RefPath AND e.ProjectConfigId = @projectconfigid

DECLARE @newElements [BIDoc].[UDTT_ModelElements]
INSERT INTO @newElements
(
	[ModelElementId]
	  ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
	  ,[RefPathSuffix]
)
SELECT
	e.ModelElementId
	  ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,e.[Definition]
      ,e.[Caption]
      ,e.[Type]
	  ,LEFT(e.RefPathSuffix, 300)
FROM @elements e
LEFT JOIN BIDoc.ModelElements me ON me.ProjectConfigId = @projectconfigid AND me.RefPath = e.RefPath
WHERE me.ModelElementId IS NULL


INSERT INTO [BIDoc].[ModelElements]
(
	  --[ModelElementId]
      --,
	  [ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
	  ,[RefPathPrefix]
	  ,RefPathSuffix
)
SELECT
	--[ModelElementId]
      --,
	  [ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
	  ,@projectconfigid
	  ,LEFT([RefPath], 300)
	  ,LEFT(RefPathSuffix, 300)
FROM @newElements
--LEFT JOIN BIDoc.ModelElements me ON me.RefPath = @elements.RefPath AND me.ProjectConfigId = @projectconfigid
--WHERE me.ModelElementId IS NULL

SELECT oe.ModelElementId SequentialId, e.ModelElementId FROM BIDoc.ModelElements e
INNER JOIN @elements oe ON oe.RefPath = e.RefPath COLLATE SQL_Latin1_General_CP1_CS_AS
WHERE e.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClearAggregations]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClearAggregations]
	@projectconfigid UNIQUEIDENTIFIER
AS

EXEC [Adm].[sp_WriteLogInfo] N'Clearing machine learning'

DELETE p FROM Learning.OlapRulePremises p
INNER JOIN Learning.OlapRules r ON p.OlapRuleId = r.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid

DELETE c FROM Learning.OlapRuleConclusions c
INNER JOIN Learning.OlapRules r ON c.OlapRuleId = r.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid

DELETE FROM Learning.OlapRules WHERE ProjectConfigId = @projectconfigid

DELETE FROM Learning.OlapQueryFields WHERE ProjectConfigId = @projectconfigid

DELETE FROM Learning.OlapFields WHERE ProjectConfigId = @projectconfigid

DELETE FROM Learning.OlapFieldReferences WHERE ProjectConfigId = @projectconfigid

------

EXEC [Adm].[sp_WriteLogInfo] N'Clearing high level ancestors'

DECLARE @rc INT = 1

WHILE @rc > 0
BEGIN
DELETE TOP (10000) ea FROM BIDoc.HigherLevelElementAncestors ea
INNER JOIN BIDoc.ModelElements e ON ea.SouceElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing documents'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) d FROM [BIDoc].GraphDocuments d
INNER JOIN [BIDoc].[BasicGraphNodes] n ON d.GraphNode_Id = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid --AND n.GraphKind = @graphkind
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing graph links'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN [BIDoc].[BasicGraphNodes] n ON l.NodeFromId = n.BasicGraphNodeId
WHERE n.ProjectConfigId = @projectconfigid --AND n.GraphKind = @graphkind
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing graph nodes'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) FROM [BIDoc].[BasicGraphNodes] WHERE ProjectConfigId = @projectconfigid --AND GraphKind = @graphkind
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing data messages'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) dm FROM [BIDoc].[DataMessages] dm
INNER JOIN [BIDoc].[ModelElements] e ON dm.SourceElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectconfigid
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing fulltext'

DELETE fts FROM Search.FullTextSearch fts
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = fts.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId

UPDATE Annotate.AnnotationElements SET ModelElementId = NULL WHERE ProjectConfigId = @projectconfigid


UPDATE BIDoc.LineageGridHistory 
SET SourceRootElementId = NULL, TargetRootElementId = NULL 
WHERE ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDOc].[sp_SetRefPathIntervals]...';


GO
CREATE PROCEDURE [BIDOc].[sp_SetRefPathIntervals]
	@projectConfigId UNIQUEIDENTIFIER,
	@requestId UNIQUEIDENTIFIER = NULL
AS

IF OBJECT_ID('tempdb.dbo.#intervals') IS NOT NULL
DROP TABLE #intervals
IF OBJECT_ID('tempdb.dbo.#ranking') IS NOT NULL
DROP TABLE #ranking


SELECT ModelElementId, RefPath, l.ElementToId ParentElementId, ROW_NUMBER() OVER(ORDER BY RefPath) RN
INTO #ranking
FROM BIDoc.ModelElements e
LEFT JOIN BIDoc.ModelLinks l ON l.Type = N'parent' AND l.ElementFromId = e.ModelElementId 
WHERE ProjectConfigId = @projectConfigId

--SELECT * FROM #ranking

;WITH descendants AS(
SELECT r.ModelElementId, r.ModelElementId DescendantId, r.RefPath DRP, r.RN DRN FROM #ranking r

UNION ALL

SELECT descendants.ModelElementId, ch.ModelElementId, ch.RefPath DRP, ch.RN DRN  
FROM #ranking ch INNER JOIN descendants 
ON ch.ParentElementId = descendants.DescendantId
)
SELECT r.ModelElementId, r.RefPath, r.RN,
MAX(d.DRN) LastDescendantRN
INTO #intervals
FROM #ranking r
INNER JOIN descendants d ON r.ModelElementId = d.ModelElementId
GROUP BY r.ModelElementId, r.RefPath, r.RN
OPTION (MAXRECURSION 1000)

UPDATE e SET RefPathIntervalStart = i.RN, RefPathIntervalEnd = i.LastDescendantRN FROM #intervals i
INNER JOIN BIDoc.ModelElements e ON i.ModelElementId = e.ModelElementId

UPDATE n SET RefPathIntervalStart = i.RN, RefPathIntervalEnd = i.LastDescendantRN FROM #intervals i
INNER JOIN BIDoc.BasicGraphNodes n ON i.ModelElementId = n.SourceElementId

DROP TABLE #intervals
DROP TABLE #ranking

IF @requestId IS NOT NULL
BEGIN
-- notify the WF followup
EXEC [Adm].[sp_SaveDbOperationFinishedMessage] @requestId
END

RETURN 0
GO
PRINT N'Creating Procedure [BIDoc].[sp_RenameModelElement]...';


GO
CREATE PROCEDURE [BIDoc].[sp_RenameModelElement]
	@elementId INT
	,@newName NVARCHAR(MAX)
AS

UPDATE BIDoc.ModelElements SET Caption = @newName WHERE ModelElementId = @elementId
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClearModelPartWithAggregations]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClearModelPartWithAggregations]
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX)
AS


--EXEC [BIDOc].[sp_SetRefPathIntervals] @projectconfigid
	
--DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
--DECLARE 
--	@intervalFrom INT,
--	@intervalTo INT

--SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId


--EXEC [Adm].[sp_WriteLogInfo] N'Clearing machine learning'

--DELETE p FROM Learning.OlapRulePremises p
--INNER JOIN Learning.OlapRules r ON p.OlapRuleId = r.OlapRuleId
--WHERE r.ProjectConfigId = @projectconfigid

--DELETE c FROM Learning.OlapRuleConclusions c
--INNER JOIN Learning.OlapRules r ON c.OlapRuleId = r.OlapRuleId
--WHERE r.ProjectConfigId = @projectconfigid

--DELETE FROM Learning.OlapRules WHERE ProjectConfigId = @projectconfigid

--DELETE FROM Learning.OlapQueryFields WHERE ProjectConfigId = @projectconfigid

--DELETE FROM Learning.OlapFields WHERE ProjectConfigId = @projectconfigid

--DELETE FROM Learning.OlapFieldReferences WHERE ProjectConfigId = @projectconfigid

---------------

EXEC [Adm].[sp_WriteLogInfo] N'Clearing high level ancestors'

DECLARE @rc INT = 1

WHILE @rc > 0
BEGIN
DELETE TOP (10000) ea FROM BIDoc.HigherLevelElementAncestors ea
INNER JOIN BIDoc.ModelElements e ON ea.SouceElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing documents'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) d FROM [BIDoc].GraphDocuments d
INNER JOIN [BIDoc].[BasicGraphNodes] n ON d.GraphNode_Id = n.BasicGraphNodeId
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE n.ProjectConfigId = @projectconfigid 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND n.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing graph links'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN [BIDoc].[BasicGraphNodes] n ON l.NodeFromId = n.BasicGraphNodeId
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE n.ProjectConfigId = @projectconfigid 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND n.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END


SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[BasicGraphLinks] l
INNER JOIN [BIDoc].[BasicGraphNodes] n ON l.NodeToId = n.BasicGraphNodeId
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE n.ProjectConfigId = @projectconfigid 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND n.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing graph nodes'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) n FROM [BIDoc].[BasicGraphNodes] n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE n.ProjectConfigId = @projectconfigid 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END


EXEC [Adm].[sp_WriteLogInfo] N'Clearing data messages'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) dm FROM [BIDoc].[DataMessages] dm
INNER JOIN [BIDoc].[ModelElements] e ON dm.SourceElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectconfigid
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing fulltext'

DELETE fts FROM Search.FullTextSearch fts
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = fts.ModelElementId
WHERE e.ProjectConfigId = @projectConfigId 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo

UPDATE ae  SET ModelElementId = NULL 
FROM Annotate.AnnotationElements ae
INNER JOIN BIDoc.ModelElements e ON ae.ModelElementId = e.ModelElementId
WHERE e.ProjectConfigId = @projectconfigid 
AND LEFT(e.RefPath, LEN(@path)) = @path
--AND e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo

EXEC [Adm].[sp_WriteLogInfo] N'Clearing model links'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[ModelLinks] l
INNER JOIN [BIDoc].[ModelElements] ef ON l.ElementFromId = ef.ModelElementId
INNER JOIN [BIDoc].[ModelElements] et ON l.ElementToId = et.ModelElementId
WHERE ef.ProjectConfigId = @projectconfigid 
AND LEFT(ef.RefPath, LEN(@path)) = @path
--AND ef.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing model elements'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) FROM [BIDoc].[ModelElements] 
WHERE ProjectConfigId = @projectconfigid
AND LEFT(RefPath, LEN(@path)) = @path
--AND RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
SELECT @rc = @@ROWCOUNT
END
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelLinksUnderPath]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelLinksUnderPath]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX)
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

SELECT DISTINCT l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN [BIDoc].ModelElements ef ON l.ElementFromId = ef.ModelElementId
  INNER JOIN [BIDoc].ModelElements et ON l.ElementToId = et.ModelElementId
  WHERE 
  ef.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  AND et.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --LEFT(ef.RefPath, LEN(@path)) = @path AND LEFT(et.RefPath, LEN(@path)) = @path --ef.RefPath LIKE  Adm.f_EscapeForLike(@path) + '%'  ESCAPE '\' AND et.RefPath LIKE Adm.f_EscapeForLike(@path) + '%'  ESCAPE '\'
	AND ef.ProjectConfigId = @projectconfigid AND et.ProjectConfigId = @projectconfigid
--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfTypesNoDef]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfTypesNoDef]
/*
(
*/
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@types BIDoc.UDTT_StringList READONLY
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

;
WITH elems AS(
SELECT
		e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,NULL [Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e 
  -- the ancestors - smaller refapths, but still prefixes
  --INNER JOIN BIDoc.ModelElements ance ON ance.RefPathPrefix <= e.RefPathPrefix AND ance.RefPathPrefix + N'~' >= e.RefPathPrefix
  --AND ance.RefPath <= e.RefPath AND ance.RefPath + N'~' >= e.RefPath
  INNER JOIN @types t ON t.Value = e.Type
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path AND e.RefPath <= @path + N'~'
  )
  )
  --AND e.[Type] = @type

  UNION ALL
  -- ancestors
  SELECT e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,NULL [Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM elems
  INNER JOIN BIDoc.ModelLinks l ON l.Type = N'parent' AND l.ElementFromId = elems.ModelElementId
  INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND --e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path --AND e.RefPath <= @path + N'~'
  )
  )
)
SELECT DISTINCT * FROM elems
--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfTypeNoDef]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfTypeNoDef]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(200)
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

;
WITH elems AS(
SELECT
		e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,NULL [Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e 
  -- the ancestors - smaller refapths, but still prefixes
  --INNER JOIN BIDoc.ModelElements ance ON ance.RefPathPrefix <= e.RefPathPrefix AND ance.RefPathPrefix + N'~' >= e.RefPathPrefix
  --AND ance.RefPath <= e.RefPath AND ance.RefPath + N'~' >= e.RefPath
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path AND e.RefPath <= @path + N'~'
  )
  )
  AND (e.[Type] = @type OR e.RefPath = @path)

  UNION ALL
  -- ancestors
  SELECT e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,NULL [Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM elems
  INNER JOIN BIDoc.ModelLinks l ON l.Type = N'parent' AND l.ElementFromId = elems.ModelElementId
  INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND --e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path --AND e.RefPath <= @path + N'~'
  )
  )
)
SELECT * FROM elems

--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfType]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelElementsUnderPathToChildrenOfType]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(MAX)
AS
--)
--RETURNS TABLE AS RETURN
--(AS

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

;
WITH elems AS(
SELECT
		e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,e.[Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM [BIDoc].[ModelElements] e 
  -- the ancestors - smaller refapths, but still prefixes
  --INNER JOIN BIDoc.ModelElements ance ON ance.RefPathPrefix <= e.RefPathPrefix AND ance.RefPathPrefix + N'~' >= e.RefPathPrefix
  --AND ance.RefPath <= e.RefPath AND ance.RefPath + N'~' >= e.RefPath
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path AND e.RefPath <= @path + N'~'
  )
  )
  AND (e.[Type] = @type OR e.RefPath = @path)

  UNION ALL
  -- ancestors
  SELECT e.[ModelElementId]
      ,e.[ExtendedProperties]
      ,e.[RefPath]
      ,e.[Definition]
      ,e.[Caption]
      ,e.[Type]
      ,e.[ProjectConfigId]
  FROM elems
  INNER JOIN BIDoc.ModelLinks l ON l.Type = N'parent' AND l.ElementFromId = elems.ModelElementId
  INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
  WHERE 
  (
  @path = N''
  OR
  (
  e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND --e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path --AND e.RefPath <= @path + N'~'
  )
  )
)
SELECT DISTINCT * FROM elems


--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelElementsUnderPath]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelElementsUnderPath]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(200) = NULL
AS
--)
--RETURNS TABLE AS RETURN
--(

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId


SELECT DISTINCT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,[Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements]
  WHERE ProjectConfigId = @projectconfigid
  AND RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  AND [Type] = ISNULL(@type, [Type])
  
  --RefPathPrefix >= LEFT(@path, 300) AND RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --RefPath >= @path AND RefPath <= @path + N'~' -- LEFT(RefPath, LEN(@path)) = @path --RefPath LIKE Adm.f_EscapeForLike(@path) + '%' ESCAPE '\' AND ProjectConfigId = @projectconfigid
  --AND [Type] = ISNULL(@type, [Type])


--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetGraphNodesUnderPath]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetGraphNodesUnderPath]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@path NVARCHAR(MAX),
	@nodeType NVARCHAR(200) = NULL
--)
AS
--RETURNS TABLE AS RETURN
--(

DECLARE @nodeId INT = (SELECT BasicGraphNodeId FROM [BIDoc].[f_GetGraphNodeIdByRefPath](@projectConfigId, @graphkind, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = n.RefPathIntervalStart, @intervalTo = n.RefPathIntervalEnd FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = @nodeId

SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.[Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId 
WHERE GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid --AND LEFT(e.RefPath, LEN(@path)) = @path
AND (@nodeType IS NULL OR @nodeType = n.NodeType)
AND n.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo

--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelElementsUnderPathNoDef]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelElementsUnderPathNoDef]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(200) = NULL
AS
--)
/*
SELECT DISTINCT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,NULL [Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] WHERE
  LEN(@path) < 300 AND
  RefPathPrefix >= @path AND RefPathPrefix <= @path + N'~'
  AND [Type] = ISNULL(@type, [Type])

UNION ALL

SELECT DISTINCT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,NULL [Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] WHERE
  LEN(@path) >= 300 AND
  RefPathPrefix >= LEFT(@path, 300) AND RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  RefPath >= @path AND RefPath <= @path + N'~' -- LEFT(RefPath, LEN(@path)) = @path --RefPath LIKE Adm.f_EscapeForLike(@path) + '%' ESCAPE '\' AND ProjectConfigId = @projectconfigid
  AND [Type] = ISNULL(@type, [Type])
)
*/


DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId


SELECT DISTINCT [ModelElementId]
      ,[ExtendedProperties]
      ,[RefPath]
      ,NULL [Definition]
      ,[Caption]
      ,[Type]
      ,[ProjectConfigId]
  FROM [BIDoc].[ModelElements] 
  WHERE ProjectConfigId = @projectconfigid
  AND RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  AND [Type] = ISNULL(@type, [Type])
  
  /*
  RefPathPrefix >= LEFT(@path, 300) AND RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  RefPath >= @path AND RefPath <= @path + N'~' -- LEFT(RefPath, LEN(@path)) = @path --RefPath LIKE Adm.f_EscapeForLike(@path) + '%' ESCAPE '\' AND ProjectConfigId = @projectconfigid
  */
GO
PRINT N'Creating Procedure [BIDoc].[sp_ListSsrsReports]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ListSsrsReports]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT 
e.ModelElementId, 
e.RefPath, 
JSON_VALUE(e.ExtendedProperties, '$.SsrsPath') SsrsPath, 
CONVERT(INT, JSON_VALUE(e.ExtendedProperties, '$.SsrsComponentId')) SsrsComponentId, 
e.Caption 
FROM BIDoc.ModelElements e 
WHERE e.[Type] = N'CD.DLS.Model.Mssql.Ssrs.ReportElement' 
AND e.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [BIDoc].[sp_SaveLineageGridHistory]...';


GO
CREATE PROCEDURE [BIDoc].[sp_SaveLineageGridHistory]
	
	@ProjectConfigId UNIQUEIDENTIFIER,
	@SourceRootElementPath NVARCHAR(MAX),
	@TargetRootElementPath NVARCHAR(MAX),
	@SourceElementType NVARCHAR(MAX),
	@TargetElementType NVARCHAR(MAX),
	@SourceRootElementId INT,
	@TargetRootElementId INT,
	@UserId INT

AS

INSERT INTO [BIDoc].[LineageGridHistory](
	[ProjectConfigId],
	[SourceRootElementPath],
	[TargetRootElementPath],
	[SourceElementType],
	[TargetElementType],
	[SourceRootElementId],
	[TargetRootElementId],
	[CreatedDateTime],
	[UserId]
)
VALUES(
	@ProjectConfigId,
	@SourceRootElementPath,
	@TargetRootElementPath,
	@SourceElementType,
	@TargetElementType,
	@SourceRootElementId,
	@TargetRootElementId,
	GETDATE(),
	@UserId
)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetLineageGridFavorities]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetLineageGridFavorities]
	@userId INT,
	@projectConfigId UNIQUEIDENTIFIER
AS
SELECT TOP 500
h.SourceElementType, h.TargetElementType,
h.SourceRootElementId, h.TargetRootElementId,

MAX(sdp.DescriptivePath) SourceRootDescriptivePath, MAX(tdp.DescriptivePath) TargetRootDescriptivePath,
MAX(st.TypeDescription) SourceTypeDescription, MAX(tt.TypeDescription) TargetTypeDescription,
h.SourceRootElementPath, h.TargetRootElementPath

FROM BIDoc.LineageGridHistory h
INNER JOIN BIDoc.ModelElementDescriptivePaths sdp ON sdp.ModelElementId = h.SourceRootElementId
INNER JOIN BIDoc.ModelElementDescriptivePaths tdp ON tdp.ModelElementId = h.TargetRootElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions st ON st.ElementType = h.SourceElementType
INNER JOIN BIDoc.ModelElementTypeDescriptions tt ON tt.ElementType = h.TargetElementType
WHERE h.UserId = @userId AND h.ProjectConfigId = @projectConfigId
GROUP BY h.SourceRootElementId, h.TargetRootElementId, 
h.SourceElementType, h.TargetElementType,
h.SourceRootElementPath, h.TargetRootElementPath

ORDER BY COUNT(*) * 10 * MAX(DATEDIFF(DAY, h.CreatedDateTime, GETDATE()) + 1) DESC
GO
PRINT N'Creating Procedure [BIDoc].[sp_SetElementSubtreeContents]...';


GO
CREATE PROCEDURE [BIDoc].[sp_SetElementSubtreeContents]
		@projectconfigid UNIQUEIDENTIFIER
AS

UPDATE BIDoc.ModelElements SET SubtreeContent = NULL WHERE ProjectConfigId = @projectconfigid

CREATE TABLE #elementIds
(
ModelElementId INT NOT NULL
)

;WITH bottomElementIds AS(
SELECT DISTINCT e.ModelElementId FROM BIDoc.ModelElements e 
LEFT JOIN BIDoc.ModelLinks l ON l.ElementToId = e.ModelElementId AND l.Type = N'parent'
LEFT JOIN BIDoc.ModelElements sube ON sube.ModelElementId = l.ElementFromId AND sube.SubtreeContent IS NULL
WHERE e.SubtreeContent IS NULL AND sube.ModelElementId IS NULL AND e.ProjectConfigId = @projectconfigid
AND e.RefPath NOT LIKE 'Business%'
)
UPDATE e SET SubtreeContent = N'(' + e.RefPathSuffix + N' ' + e.ExtendedProperties + N')'  FROM bottomElementIds ids 
INNER JOIN BIDoc.ModelElements e ON ids.ModelElementId = e.ModelElementId

DECLARE @repeat INT = 1


WHILE @repeat = 1
BEGIN
	TRUNCATE TABLE #elementIds

	;WITH elementsToFill AS(
		-- dont have a child without filled subtreecontent and themselves have empty subtreecontent
		SELECT e.ModelElementId
		FROM BIDoc.ModelElements e
		INNER JOIN BIDoc.ModelElementTypeDetailLevels dl ON dl.ElementType = e.Type
		WHERE 
		e.SubtreeContent IS NULL
		AND e.ProjectConfigId = @projectconfigid
		AND e.RefPath NOT LIKE 'Business%'
		AND dl.DetailLevel IN (1,2)
		AND NOT EXISTS(
			SELECT TOP 1 1 FROM BIDoc.ModelLinks l
			INNER JOIN BIDoc.ModelElements sube ON l.ElementFromId = sube.ModelElementId
			WHERE l.ElementToId = e.ModelElementId AND l.Type = N'parent' AND sube.SubtreeContent IS NULL
		)
	)
	INSERT INTO #elementIds(ModelElementId)
	SELECT ModelElementId 
	FROM elementsToFill

	--SELECT TOP 10 * FROM #elementIds
--	SELECT COUNT(*) FROM BiDoc.ModelElements WHERE ProjectConfigId = N'4290174E-AA85-4704-A4BA-DD910C1A0850' AND SubTreeContent IS NULL
--AND RefPath NOT LIKE 'Business%'

	UPDATE e SET SubtreeContent = N'(' + e.RefPathSuffix + N' ' + e.ExtendedProperties +
		(
			
			STUFF((
    SELECT ', ' + sube.SubtreeContent 
    FROM BIDoc.ModelElements sube
			INNER JOIN BIDoc.ModelLinks subl ON subl.Type = N'parent' AND subl.ElementFromId = sube.ModelElementId
			WHERE subl.ElementToId = e.ModelElementId AND sube.RefPath NOT LIKE 'Business%' 
    FOR XML PATH(''),TYPE).value('(./text())[1]','VARCHAR(MAX)'),1,2,'')
			/*
			SELECT STRING_AGG(sube.SubtreeContent, N',') WITHIN GROUP (ORDER BY sube.RefPath)
			FROM BIDoc.ModelElements sube
			INNER JOIN BIDoc.ModelLinks subl ON subl.Type = N'parent' AND subl.ElementFromId = sube.ModelElementId
			WHERE subl.ElementToId = e.ModelElementId AND sube.RefPath NOT LIKE 'Business%'
			*/
		) + N')'
	FROM BIDoc.ModelElements e
	INNER JOIN #elementIds ids ON ids.ModelElementId = e.ModelElementId

	SELECT @repeat = IIF(EXISTS(SELECT TOP 1 1 FROM #elementIds), 1, 0)
END

DROP TABLE #elementIds
GO
PRINT N'Creating Procedure [Inspect].[sp_GraphNodeLineageOrigin_Origins]...';


GO
CREATE PROCEDURE [Inspect].[sp_GraphNodeLineageOrigin_Origins]
  @nodeId INT,
  @maxLevels INT = 5
AS

  IF OBJECT_ID('tempdb.dbo.#resList', 'U') IS NOT NULL
  DROP TABLE #resList; 

  DECLARE @currentLevel INT = 1
  CREATE TABLE #resList 
  (
  Id INT,
  Level INT,
  Name NVARCHAR(MAX),
  RefPath NVARCHAR(MAX),
  DisplayInResult BIT DEFAULT 0,
  Description NVARCHAR(MAX)
  )

  -- the selected node and all descendants
  ;WITH descendants AS
  (
	SELECT e.BasicGraphInfoNodeId, 0 [Level], e.Name, e.RefPath, 1 DisplayInResult, e.Description
	FROM BasicGraphInfoNodes e WHERE e.BasicGraphInfoNodeId = @nodeId
	
	UNION ALL

	SELECT e.BasicGraphInfoNodeId, 0 [Level], e.Name, e.RefPath, 0 DisplayInResult, e.Description
	FROM descendants d
	INNER JOIN BasicGraphInfoLinks l ON d.BasicGraphInfoNodeId = l.NodeTo_BasicGraphInfoNodeId
	INNER JOIN BasicGraphInfoNodes e ON e.BasicGraphInfoNodeId = l.NodeFrom_BasicGraphInfoNodeId
	WHERE l.LinkType = 1
  )
  INSERT INTO #resList (Id, Level, Name, RefPath, DisplayInResult, Description)
  SELECT e.BasicGraphInfoNodeId, 0 [Level], CONVERT(NVARCHAR(1000), e.Name), e.RefPath, e.DisplayInResult, e.Description
  FROM descendants e

  WHILE @currentLevel <= @maxLevels
  BEGIN
	
	;WITH descendants AS
	(
		SELECT e.BasicGraphInfoNodeId, l.Level + 1 Level, e.Name, e.RefPath, 1 DisplayInResult, e.Description
		FROM BasicGraphInfoLinks lnk
		INNER JOIN #resList l ON l.Id = lnk.NodeTo_BasicGraphInfoNodeId
		INNER JOIN BasicGraphInfoNodes e ON e.BasicGraphInfoNodeId = lnk.NodeFrom_BasicGraphInfoNodeId
		LEFT JOIN #resList cycle ON cycle.Id = e.BasicGraphInfoNodeId
		WHERE cycle.Id IS NULL AND lnk.LinkType IN (5)

		UNION ALL

		SELECT e.BasicGraphInfoNodeId, d.Level [Level], e.Name, e.RefPath, 0 DisplayInResult, e.Description
		FROM descendants d
		INNER JOIN BasicGraphInfoLinks l ON d.BasicGraphInfoNodeId = l.NodeFrom_BasicGraphInfoNodeId
		INNER JOIN BasicGraphInfoNodes e ON e.BasicGraphInfoNodeId = l.NodeTo_BasicGraphInfoNodeId
		--LEFT JOIN #resList cycle ON cycle.Id = e.BasicGraphInfoNodeId
		WHERE /*cycle.Id IS NULL AND*/ l.LinkType = 1
	)
	-- lineage links from outside to the resultset
	INSERT INTO #resList (Id, Level, Name, RefPath, DisplayInResult, Description)
	SELECT DISTINCT d.BasicGraphInfoNodeId, d.[Level], d.Name, d.RefPath, DisplayInResult, d.Description FROM descendants d
	
	SET @currentLevel = @currentLevel + 1
  END

  SELECT Id, Level, Name, RefPath, Description FROM #resList WHERE DisplayInResult = 1 ORDER BY Level
GO
PRINT N'Creating Procedure [Inspect].[sp_FindOlapField]...';


GO

CREATE PROCEDURE Inspect.sp_FindOlapField
    @cubePath NVARCHAR(MAX), 
	@fieldName NVARCHAR(MAX)	
AS
BEGIN

	DECLARE @CubePathEscaped NVARCHAR(MAX) 
	IF LEFT(@fieldName, LEN(N'[Measures]')) = N'[Measures]'
	BEGIN
		DECLARE @FieldNameTrimmed NVARCHAR(MAX) = SUBSTRING(@FieldName, LEN('[Measures].[') + 1, 1000)
		SET @FieldNameTrimmed = REPLACE(LEFT(@FieldNameTrimmed, LEN(@FieldNameTrimmed) - 1), '_', '\_')

		SELECT e.RefPath, e.ProjectConfigId, e.ModelElementId 
		FROM BIDoc.ModelElements e 
		WHERE 
		LEFT(e.RefPath, LEN(@cubePath)) = @cubePath 
		AND e.Type 
		IN (N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement') 
		AND e.Caption = @FieldNameTrimmed

	END
	ELSE
	BEGIN
		DECLARE @dimName NVARCHAR(MAX) = (SELECT item FROM adm.f_SplitString(@fieldName, N'.') x WHERE rwn = 1)
		DECLARE @hierName NVARCHAR(MAX) = (SELECT item FROM adm.f_SplitString(@fieldName, N'.') x WHERE rwn = 2)
		DECLARE @levelName NVARCHAR(MAX) = (SELECT item FROM adm.f_SplitString(@fieldName, N'.') x WHERE rwn = 3)
	
	
		 IF LEFT(@dimName, 1) = N'['
			SET @dimName = RIGHT(LEFT(@dimName, LEN(@dimName)-1), LEN(@dimName)-2)
		IF LEFT(@hierName, 1) = N'['
			SET @hierName = RIGHT(LEFT(@hierName, LEN(@hierName)-1), LEN(@hierName)-2)
		IF LEFT(@levelName, 1) = N'['
			SET @levelName = RIGHT(LEFT(@levelName, LEN(@levelName)-1), LEN(@levelName)-2)

		--DECLARE @dimPath NVARCHAR(MAX) =@cubePath + N'/CubeDimension[@Name=''' + @dimName + N''']'
		--SELECT @dimPath

		IF @hierName = @levelName
		BEGIN
		SELECT hle.RefPath, hle.ProjectConfigId, hle.ModelElementId 
		FROM BIDoc.ModelElements e 
		INNER JOIN BIDoc.ModelLinks hll ON hll.ElementToId = e.ModelElementId AND hll.Type = N'parent'
		INNER JOIN BIDoc.ModelElements hle ON hle.ModelElementId = hll.ElementFromId

		WHERE 
		LEFT(e.RefPath, LEN(@cubePath)) = @cubePath 
		AND e.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement') 
		AND e.Caption = @dimName
		AND hle.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement') 
		AND hle.Caption = @hierName
		END

		ELSE
		BEGIN
		
		SELECT dae.RefPath, dae.ProjectConfigId, dae.ModelElementId
		FROM BIDoc.ModelElements cde 		
		-- database dimension
		INNER JOIN BIDoc.ModelLinks ddl ON ddl.ElementFromId = cde.ModelElementId AND ddl.Type = N'DatabaseDimension'
		-- children (attributes and hierarchies)
		INNER JOIN BIDoc.ModelLinks hl ON hl.ElementToId = ddl.ElementToId AND hl.Type = N'parent'
		INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementFromId
		-- children (hierarchy levels)
		INNER JOIN BIDoc.ModelLinks hll ON hll.ElementToId = he.ModelElementId AND hll.Type = N'parent'
		INNER JOIN BIDoc.ModelElements hle ON hle.ModelElementId = hll.ElementFromId
		-- link to dimension attribute
		INNER JOIN BIDoc.ModelLinks dal ON dal.ElementFromId = hle.ModelElementId AND dal.Type = N'Attribute'
		INNER JOIN BIDoc.ModelElements dae ON dae.ModelElementId = dal.ElementToId
				
		WHERE 	
			LEFT(cde.RefPath, LEN(@cubePath)) = @cubePath 		
			AND cde.Type = N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement' 
			AND cde.Caption = @dimName
			AND he.Type = N'CD.DLS.Model.Mssql.Ssas.HierarchyElement'
			AND he.Caption = @hierName
			AND hle.Type = N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement'
			AND hle.Caption = @levelName
			AND dae.Type = N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'		
		END		
	END

END
GO
PRINT N'Creating Procedure [Inspect].[sp_FindGraphNode]...';


GO
CREATE PROCEDURE [Inspect].[sp_FindGraphNode]
	@search NVARCHAR(1000),
	@under NVARCHAR(1000) = '',
	@projectId UNIQUEIDENTIFIER = NULL
AS
  SELECT TOP 100 n.BasicGraphInfoNodeId, n.Name, n.RefPath FROM BasicGraphInfoNodes n
  WHERE n.RefPath LIKE @under + '%'
  AND n.ProjectConfigId = ISNULL(@projectId, n.ProjectConfigId)
  AND GraphKind = 0
  ORDER BY DIFFERENCE(n.Name, @search) DESC
GO
PRINT N'Creating Procedure [Inspect].[sp_FindElement]...';


GO
CREATE PROCEDURE [Inspect].[sp_FindElement]
	@search NVARCHAR(1000),
	@under NVARCHAR(1000) = ''
AS
  SELECT TOP 100 e.Id, e.Caption, e.RefPath FROM BIDocModelElements e
  WHERE e.RefPath LIKE @under + '%'
  ORDER BY DIFFERENCE(e.Caption, @search) DESC
GO
PRINT N'Creating Procedure [Inspect].[sp_ElementUsage]...';


GO
CREATE PROCEDURE [Inspect].[sp_ElementUsage]
  @elementId INT,
  @maxLevels INT = 5
AS
  IF OBJECT_ID('tempdb.dbo.#resList', 'U') IS NOT NULL
  DROP TABLE #resList; 

  DECLARE @currentLevel INT = 1
  CREATE TABLE #resList 
  (
  Id INT,
  Level INT,
  Name NVARCHAR(1000),
  PrevLevelName NVARCHAR(1000)
  )

  INSERT INTO #resList (Id, Level, Name, PrevLevelName)
  SELECT e.Id, 0 [Level], CONVERT(NVARCHAR(1000), e.Caption + ' (' +  e.RefPath + ')') Name, '' PrevLevelName 
  FROM BIDocModelElements e WHERE e.Id = @elementId

  WHILE @currentLevel <= @maxLevels
  BEGIN
	INSERT INTO #resList (Id, Level, Name, PrevLevelName)
	SELECT e.Id, l.Level + 1 Level, lnk.Type + ' -> ' + e.Caption + ' (' + e.RefPath + ')' Name, l.Name
	FROM BIDocModelLinks lnk
	INNER JOIN #resList l ON l.Id = lnk.ElementFromId
	INNER JOIN BIDocModelElements e ON e.Id = lnk.ElementToId
	LEFT JOIN #resList cycle ON cycle.Id = e.Id
	WHERE cycle.Id IS NULL AND lnk.Type != 'parent'
	
	INSERT INTO #resList (Id, Level, Name, PrevLevelName)
	SELECT e.Id, l.Level + 1 Level, lnk.Type + ' <- ' + e.Caption + ' (' + e.RefPath + ')' Name, l.Name
	FROM BIDocModelLinks lnk
	INNER JOIN #resList l ON l.Id = lnk.ElementToId
	INNER JOIN BIDocModelElements e ON e.Id = lnk.ElementFromId
	LEFT JOIN #resList cycle ON cycle.Id = e.Id
	WHERE cycle.Id IS NULL
	
	SET @currentLevel = @currentLevel + 1
  END

  SELECT Id, Level, PrevLevelName, Name FROM #resList
GO
PRINT N'Creating Procedure [Inspect].[sp_GetExtendedGraphExplorerSuggestions]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetExtendedGraphExplorerSuggestions]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@pattern NVARCHAR(200)
)
AS
SELECT TOP 100 
	   n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,n.Description [Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,DIFFERENCE(@pattern, n.Name)
	  ,DIFFERENCE(@pattern, n.Description)
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
WHERE GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid 
AND (DIFFERENCE(@pattern, n.Name) >= 3 OR DIFFERENCE(@pattern, n.Description) >= 3)
ORDER BY DIFFERENCE(@pattern, n.Name) * DIFFERENCE(@pattern, n.Description) DESC
GO
PRINT N'Creating Procedure [Inspect].[sp_GetGraphExplorerSuggestions]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetGraphExplorerSuggestions]
(
	@projectconfigid UNIQUEIDENTIFIER,
	@graphkind NVARCHAR(50),
	@pattern NVARCHAR(200) = NULL
)
AS

;WITH priorities AS
  (
  SELECT NodeType, Priority
  FROM 
  (
  VALUES
  ('SchemaTableElement', 1),
  ('ReportElement', 2),
  ('PhysicalMeasureElement', 3),
  ('CubeCalculatedMeasureElement', 4),
  ('ReportCalculatedMeasureElement', 5),
  ('PackageElement', 6),
  ('ProcedureElement', 7),
  ('MeasureGroupElement', 8),
  ('CubeElement', 9),
  ('CubeDimensionElement', 10),
  ('DimensionElement', 11),
  ('DatabaseElement', 12),
  ('ServerElement', 13)) AS x(NodeType, Priority)
  )
SELECT n.[BasicGraphNodeId]
      ,n.[Name]
      ,n.[NodeType]
      ,NULL [Description]
      ,n.[ParentId]
      ,n.[GraphKind]
      ,n.[ProjectConfigId]
      ,n.[SourceElementId]
      ,n.[TopologicalOrder]
	  ,e.[RefPath]
	  ,td.TypeDescription
FROM BIDoc.BasicGraphNodes n
INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
INNER JOIN priorities p ON p.NodeType = n.NodeType
WHERE GraphKind = @graphkind AND n.ProjectConfigId = @projectconfigid 
AND (@pattern IS NULL OR n.Name LIKE '%' + Adm.f_EscapeForLike(@pattern) + '%')
ORDER BY p.Priority
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowBetweenGroups]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowBetweenGroups]
	@projectConfigId UNIQUEIDENTIFIER,
	@sourcePrefix NVARCHAR(MAX),
	@targetPrefix NVARCHAR(MAX),
	@sourceType NVARCHAR(200),
	@targetType NVARCHAR(200)
AS


IF OBJECT_ID('tempdb.dbo.#sourceNodes') IS NOT NULL
DROP TABLE #sourceNodes
IF OBJECT_ID('tempdb.dbo.#targetNodes') IS NOT NULL
DROP TABLE #targetNodes
IF OBJECT_ID('tempdb.dbo.#sourceDescendants') IS NOT NULL
DROP TABLE #sourceDescendants
IF OBJECT_ID('tempdb.dbo.#targetDescendants') IS NOT NULL
DROP TABLE #targetDescendants
--IF OBJECT_ID('tempdb.dbo.#nodes') IS NOT NULL
--DROP TABLE #nodes

--SELECT n.BasicGraphNodeId, e.RefPath, n.Name, n.SourceElementId, NodeType
--INTO #nodes
--FROM BIDoc.BasicGraphNodes n 
--INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
--WHERE 
--GraphKind = N'DataFlow'  --'DataFlowTransitive' 
--AND e.ProjectConfigId = @projectConfigId

DECLARE @id NVARCHAR(100)
SET @id = REPLACE(CAST(@projectConfigId AS NVARCHAR(100)),'-','')


DECLARE @sourceNodeId INT = (SELECT BasicGraphNodeId FROM [BIDoc].[f_GetGraphNodeIdByRefPath](@projectConfigId, N'DataFlow', @sourcePrefix))
DECLARE @targetNodeId INT = (SELECT BasicGraphNodeId FROM [BIDoc].[f_GetGraphNodeIdByRefPath](@projectConfigId, N'DataFlow', @targetPrefix))
DECLARE 
	@sourceIntervalFrom INT,
	@sourceIntervalTo INT,
	@targetIntervalFrom INT,
	@targetIntervalTo INT

SELECT @sourceIntervalFrom = n.RefPathIntervalStart, @sourceIntervalTo = n.RefPathIntervalEnd FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = @sourceNodeId
SELECT @targetIntervalFrom = n.RefPathIntervalStart, @targetIntervalTo = n.RefPathIntervalEnd FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = @targetNodeId


SELECT n.BasicGraphNodeId, n.SourceElementId
INTO #sourceNodes
FROM BIDoc.BasicGraphNodes n
WHERE n.ProjectConfigId = @projectConfigId AND n.GraphKind = N'DataFlow' AND n.NodeType = @sourceType 
	AND n.ProjectConfigId = @projectConfigId 
	AND n.RefPathIntervalStart BETWEEN @sourceIntervalFrom AND @sourceIntervalTo

SELECT n.BasicGraphNodeId, n.SourceElementId
INTO #targetNodes
FROM BIDoc.BasicGraphNodes n
WHERE n.ProjectConfigId = @projectConfigId AND n.GraphKind = N'DataFlow' AND n.NodeType = @targetType
	AND n.ProjectConfigId = @projectConfigId 
	AND n.RefPathIntervalStart BETWEEN @targetIntervalFrom AND @targetIntervalTo

SELECT n.BasicGraphNodeId, snn.BasicGraphNodeId OriginalNodeId, n.SourceElementId
INTO #sourceDescendants
FROM 
#sourceNodes sn
INNER JOIN BIDoc.BasicGraphNodes snn ON snn.BasicGraphNodeId = sn.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes n ON n.RefPathIntervalStart BETWEEN snn.RefPathIntervalStart AND snn.RefPathIntervalEnd
WHERE n.ProjectConfigId = @projectConfigId AND n.GraphKind = N'DataFlow'
	AND n.ProjectConfigId = @projectConfigId 
	AND n.RefPathIntervalStart BETWEEN @sourceIntervalFrom AND @sourceIntervalTo

SELECT n.BasicGraphNodeId, snn.BasicGraphNodeId OriginalNodeId, n.SourceElementId
INTO #targetDescendants
FROM 
#targetNodes sn
INNER JOIN BIDoc.BasicGraphNodes snn ON snn.BasicGraphNodeId = sn.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes n ON n.RefPathIntervalStart BETWEEN snn.RefPathIntervalStart AND snn.RefPathIntervalEnd
WHERE n.ProjectConfigId = @projectConfigId AND n.GraphKind = N'DataFlow'
	AND n.ProjectConfigId = @projectConfigId 
	AND n.RefPathIntervalStart BETWEEN @targetIntervalFrom AND @targetIntervalTo

	--SELECT * FROM #sourceNodes
	--SELECT * FROM #targetNodes
	--SELECT * FROM #sourceDescendants
	--SELECT * FROM #targetDescendants




-- create new sequences from those that end in the front nodes (and such sequence does not exist already)
DECLARE @sql NVARCHAR(MAX)
SET @sql = 
N'
SELECT 
DISTINCT s.BasicGraphNodeId SourceNodeId, se.Caption SourceNodeName, /*dps.DescriptivePath*/ se.RefPath SourceNodePath, s.SourceElementId SourceElementId,
dps.DescriptivePath SourceDescriptivePath,
t.BasicGraphNodeId TargetNodeId, te.Caption TargetNodeName, /*dpt.DescriptivePath*/ te.RefPath TargetNodePath, t.SourceElementId TargetElementId,
dpt.DescriptivePath TargetDescriptivePath
FROM [' + @id + N'].DataFlowSequences sq
INNER JOIN #sourceDescendants sd ON sd.BasicGraphNodeId = sq.SourceNode
INNER JOIN #targetDescendants td ON td.BasicGraphNodeId = sq.TargetNode
INNER JOIN #sourceNodes s ON s.BasicGraphNodeId = sd.OriginalNodeId
INNER JOIN #targetNodes t ON t.BasicGraphNodeId = td.OriginalNodeId
INNER JOIN BIDoc.ModelElementDescriptivePaths dps ON dps.ModelElementId = s.SourceElementId
INNER JOIN BIDoc.ModelElementDescriptivePaths dpt ON dpt.ModelElementId = t.SourceElementId
INNER JOIN BIDoc.ModelElements se ON se.ModelElementId = s.SourceElementId
INNER JOIN BIDoc.ModelElements te ON te.ModelElementId = t.SourceElementId
WHERE sq.ProjectConfigid = @projectConfigId AND sq.DetailLevel = 1
'
EXEC sp_executesql  @sql, N'@projectconfigid UNIQUEIDENTIFIER', @projectconfigid = @projectconfigid
GO
PRINT N'Creating Procedure [Inspect].[sp_GetSolutionMidSubtree]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetSolutionMidSubtree]
@projectConfigId UNIQUEIDENTIFIER,
@rootElementId INT

AS

DECLARE @pathPrefix NVARCHAR(MAX) = (SELECT [Adm].[f_EscapeForLike]((SELECT RefPath FROM bidoc.ModelElements e WHERE e.ModelElementId = @rootElementId))) + N'%'

--SELECT @pathPrefix

;

WITH elemTree AS(
	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, 0 ParentLevel
	FROM BIDoc.ModelElements e 
	WHERE e.ProjectConfigId = @projectConfigId AND e.Type IN (
	N'CD.DLS.Model.Mssql.Ssrs.ReportElement',
	N'CD.DLS.Model.Mssql.Ssis.PackageElement',
	N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',
	N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',
	N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',
	N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',
	N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement',
	N'CD.DLS.Model.Mssql.Db.ColumnElement'
	) AND e.RefPath LIKE @pathPrefix ESCAPE N'\'

	UNION ALL

	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, ParentLevel + 1
	FROM elemTree t
	INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = t.ModelElementId AND l.Type = N'parent'
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
	WHERE e.RefPath LIKE @pathPrefix ESCAPE N'\'
)
,x AS(

SELECT ModelElementId, Caption, elemTree.[Type], td.TypeDescription, MAX(ParentLevel) MaxParentLevel, RefPath
FROM elemTree
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON [Type] = td.ElementType
GROUP BY ModelElementId, Caption, elemTree.[Type], td.TypeDescription, RefPath
)
SELECT ModelElementId, Caption, x.[Type], TypeDescription, MaxParentLevel, l.ElementToId ParentElementId, RefPath
FROM x
LEFT JOIN BIDoc.ModelLinks l ON l.ElementFromId = ModelElementId AND l.Type = N'parent'
GO
PRINT N'Creating Procedure [Inspect].[sp_GetVisualNodeAncestor]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetVisualNodeAncestor]
@nodeId INT

AS

DECLARE @nodeType NVARCHAR(200)
DECLARE @parentId INT
DECLARE @refPath NVARCHAR(MAX)
SELECT @nodeType = NodeType, @parentId = ParentId, @refPath = e.RefPath 
FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE n.BasicGraphNodeId = @nodeId

IF(@nodeType IN (N'ColumnElement', N'MdxFragmentElement', 
	N'SsisExpressionFragmentElement'/*, N'SsrsExpressionFragmentElement'*/))
BEGIN
	SELECT @parentId
END
ELSE IF @nodeType IN(N'CubeCalculatedMeasureElement', N'ReportCalculatedMeasureElement', N'PackageElement', N'SchemaTableElement', N'ProcedureElement', N'ViewElement', N'ReportElement')
BEGIN
	SELECT @nodeId
END
ELSE IF @nodeType IN (N'SqlScriptElement', N'SqlDmlSourceElement', N'SqlDmlTargetReferenceElement')
BEGIN
	;WITH ancestors AS
	(
	SELECT @nodeId NodeId, @parentId ParentId, @refPath RefPath
	UNION ALL
	SELECT n.BasicGraphNodeId NodeId, n.ParentId, e.RefPath
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN ancestors a ON n.BasicGraphNodeId = a.ParentId
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
	WHERE n.NodeType IN (N'SqlScriptElement', N'SqlDmlSourceElement', N'SqlDmlTargetReferenceElement')
	)
	SELECT TOP 1 NodeId 
	FROM ancestors
	ORDER BY RefPath
END
ELSE IF @nodeType IN (N'DfColumnElement')
BEGIN
	;WITH ancestors AS
	(
	SELECT @nodeId NodeId, @parentId ParentId, @refPath RefPath, @nodeType NodeType
	UNION ALL
	SELECT n.BasicGraphNodeId NodeId, n.ParentId, e.RefPath, n.NodeType
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN ancestors a ON n.BasicGraphNodeId = a.ParentId
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
	)
	SELECT NodeId 
	FROM ancestors
	WHERE ancestors.NodeType = N'PackageElement'
END
ELSE IF @nodeType IN (N'SsrsExpressionFragmentElement', N'TextBoxElement')
BEGIN
	;WITH ancestors AS
	(
	SELECT @nodeId NodeId, @parentId ParentId, @refPath RefPath, @nodeType NodeType
	UNION ALL
	SELECT n.BasicGraphNodeId NodeId, n.ParentId, e.RefPath, n.NodeType
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN ancestors a ON n.BasicGraphNodeId = a.ParentId
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
	)
	SELECT NodeId 
	FROM ancestors
	WHERE ancestors.NodeType = N'ReportElement'
END
ELSE IF @refPath LIKE N'%]/DaxScript%'
BEGIN
	;WITH ancestors AS
	(
	SELECT @nodeId NodeId, @parentId ParentId, @refPath RefPath, @nodeType NodeType
	UNION ALL
	SELECT n.BasicGraphNodeId NodeId, n.ParentId, e.RefPath, n.NodeType
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN ancestors a ON n.BasicGraphNodeId = a.ParentId
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
	)
	SELECT NodeId 
	FROM ancestors
	WHERE ancestors.NodeType = N'DaxScriptElement'
END
ELSE IF @nodeType LIKE 'PowerQuery.%'
BEGIN
	;WITH ancestors AS
	(
	SELECT @nodeId NodeId, @parentId ParentId, @refPath RefPath, @nodeType NodeType
	UNION ALL
	SELECT n.BasicGraphNodeId NodeId, n.ParentId, e.RefPath, n.NodeType
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN ancestors a ON n.BasicGraphNodeId = a.ParentId
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
	)
	SELECT NodeId 
	FROM ancestors
	WHERE ancestors.NodeType = N'PowerQuery.PowerQueryElement'
END
BEGIN
	SELECT NULL
END
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowLinksBetweenNodes]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowLinksBetweenNodes]
	@sourceNodeId INT,
	@targetNodeId INT,
	@detailLevel INT,
	@projectConfigId UNIQUEIDENTIFIER
AS

DECLARE @projectSchema NVARCHAR(50) = REPLACE(N'[' + CONVERT(NVARCHAR(50), @projectConfigId) + N']', N'-', N'')

;WITH  sourceDescendants AS
	(
	SELECT @sourceNodeId SourceNodeId
	UNION ALL
	SELECT n.BasicGraphNodeId FROM BIDoc.BasicGraphNodes n
	INNER JOIN sourceDescendants sd ON sd.SourceNodeId = n.ParentId
	)
SELECT * INTO #sourceDescendants FROM sourceDescendants
OPTION (MAXRECURSION 1000)

;WITH targetDescendants AS
	(
	SELECT @targetNodeId TargetNodeId
	UNION ALL
	SELECT n.BasicGraphNodeId FROM BIDoc.BasicGraphNodes n
	INNER JOIN targetDescendants sd ON sd.TargetNodeId = n.ParentId
	)
SELECT * INTO #targetDescendants FROM targetDescendants
OPTION (MAXRECURSION 1000)

DECLARE @sql NVARCHAR(MAX) =
N'
-- if direct link exists, use it
IF(EXISTS(SELECT TOP 1 1 FROM ' + @projectSchema +  N'.DataFlowSequences s WHERE s.SourceNode = @sourceNodeId AND s.TargetNode = @targetNodeId AND s.DetailLevel = @detailLevel))
BEGIN
	SELECT --DISTINCT 
	stp.Id SequenceStepId, 
	stp.SourceNodeId, 
	stp.TargetNodeId 
	FROM ' + @projectSchema +  N'.DataFlowSequences sq
	INNER JOIN ' + @projectSchema +  N'.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
	INNER JOIN BIDoc.BasicGraphNodes n ON stp.SourceNodeId = n.BasicGraphNodeId

	WHERE sq.DetailLevel = @detailLevel AND sq.SourceNode = @sourceNodeId AND sq.TargetNode = @targetNodeId AND n.ProjectConfigId = sq.ProjectConfigId --AND stp.SourceNodeId <> stp.TargetNodeId
END
-- if direct links to target exists, use those
ELSE IF EXISTS(SELECT TOP 1 1 FROM ' + @projectSchema +  N'.DataFlowSequences s 
INNER JOIN #sourceDescendants sd ON sd.SourceNodeId = s.SourceNode
WHERE s.TargetNode = @targetNodeId AND s.DetailLevel = @detailLevel)
BEGIN
	SELECT --DISTINCT 
	MIN(stp.Id) SequenceStepId, 
	stp.SourceNodeId, 
	stp.TargetNodeId 
	FROM ' + @projectSchema +  N'.DataFlowSequences sq
	INNER JOIN #sourceDescendants sd ON sq.SourceNode = sd.SourceNodeId
	INNER JOIN ' + @projectSchema +  N'.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
	INNER JOIN BIDoc.BasicGraphNodes n ON stp.SourceNodeId = n.BasicGraphNodeId

	WHERE sq.DetailLevel = @detailLevel AND sq.TargetNode = @targetNodeId AND n.ProjectConfigId = sq.ProjectConfigId --AND stp.SourceNodeId <> stp.TargetNodeId
	GROUP BY 
	stp.SourceNodeId, 
	stp.TargetNodeId
END
-- if direct links to source exists, use those
ELSE IF EXISTS(SELECT TOP 1 1 FROM ' + @projectSchema +  N'.DataFlowSequences s 
INNER JOIN #targetDescendants td ON td.TargetNodeId = s.TargetNode
WHERE s.SourceNode = @sourceNodeId AND s.DetailLevel = @detailLevel)
BEGIN
	SELECT --DISTINCT 
	MIN(stp.Id) SequenceStepId, 
	stp.SourceNodeId, 
	stp.TargetNodeId 
	FROM ' + @projectSchema +  N'.DataFlowSequences sq
	INNER JOIN #targetDescendants td ON sq.TargetNode = td.TargetNodeId
	INNER JOIN ' + @projectSchema +  N'.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
	INNER JOIN BIDoc.BasicGraphNodes n ON stp.SourceNodeId = n.BasicGraphNodeId

	WHERE sq.DetailLevel = @detailLevel AND sq.SourceNode = @sourceNodeId AND n.ProjectConfigId = sq.ProjectConfigId --AND stp.SourceNodeId <> stp.TargetNodeId
	GROUP BY 
	stp.SourceNodeId, 
	stp.TargetNodeId
END
ELSE
BEGIN
	SELECT --DISTINCT 
	MIN(stp.Id) SequenceStepId, 
	stp.SourceNodeId, 
	stp.TargetNodeId 
	FROM ' + @projectSchema +  N'.DataFlowSequences sq
	INNER JOIN #sourceDescendants sd ON sq.SourceNode = sd.SourceNodeId
	INNER JOIN #targetDescendants td ON sq.TargetNode = td.TargetNodeId
	INNER JOIN ' + @projectSchema +  N'.DataFlowSequenceSteps stp ON stp.SequenceId = sq.SequenceId
	INNER JOIN BIDoc.BasicGraphNodes n ON stp.SourceNodeId = n.BasicGraphNodeId
	LEFT JOIN #sourceDescendants stepToSource ON stepToSource.SourceNodeId = stp.TargetNodeId
	LEFT JOIN #targetDescendants stepFromTarget ON stepFromTarget.TargetNodeId = stp.SourceNodeId
	
	WHERE sq.DetailLevel = @detailLevel AND sq.ProjectConfigId = n.ProjectConfigId --AND stp.SourceNodeId <> stp.TargetNodeId
	AND stepFromTarget.TargetNodeId IS NULL AND stepToSource.SourceNodeId IS NULL
	GROUP BY 
	stp.SourceNodeId, 
	stp.TargetNodeId
END
'

DECLARE @paramDef NVARCHAR(MAX) = N'@sourceNodeId INT, @targetNodeId INT, @detailLevel INT'
EXEC sp_executesql @sql, @paramDef, @sourceNodeId = @sourceNodeId, @targetNodeId = @targetNodeId, @detailLevel = @detailLevel


DROP TABLE #sourceDescendants
DROP TABLE #targetDescendants
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowBetweenGroupsSteps]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowBetweenGroupsSteps]
	@projectConfigId UNIQUEIDENTIFIER,
	@sourcePrefix NVARCHAR(MAX),
	@targetPrefix NVARCHAR(MAX),
	@sourceType NVARCHAR(200),
	@targetType NVARCHAR(200),
	@stepCount INT = 10
AS
--DECLARE @sourcePrefix NVARCHAR(MAX) = N'IntegrationServices[@Name=''FSCZPRCT0041'']/Catalog[@Name=''SSISDB'']/CatalogFolder[@Name=''NRWH_SSIS'']/ProjectInfo[@Name=''NRWH_SSIS'']'
--DECLARE @targetPrefix NVARCHAR(MAX) = N'Server[@Name=''FSCZPRCT0041'']/Database[@Name=''NRWH_L2'']'
--DECLARE @sourceType NVARCHAR(200) = N'PackageElement'
--DECLARE @targetType NVARCHAR(200) = N'SchemaTableElement'

/*
DECLARE
	@projectConfigId UNIQUEIDENTIFIER = N'18258D08-66CC-4B97-A695-226C7BA64AFE',
	@sourcePrefix NVARCHAR(MAX) = N'Server[@Name=''FSCZPRCT0041'']/Database[@Name=''NDWH_L1'']',
	@targetPrefix NVARCHAR(MAX) = N'Server[@Name=''FSCZPRCT0041'']/Database[@Name=''NRWH_L2'']',
	@sourceType NVARCHAR(200) = N'ColumnElement',
	@targetType NVARCHAR(200) = N'ColumnElement',
	@stepCount INT = 10
*/

IF OBJECT_ID('tempdb.dbo.#sourceNodes') IS NOT NULL
DROP TABLE #sourceNodes
IF OBJECT_ID('tempdb.dbo.#targetNodes') IS NOT NULL
DROP TABLE #targetNodes
IF OBJECT_ID('tempdb.dbo.#sourceDescendants') IS NOT NULL
DROP TABLE #sourceDescendants
IF OBJECT_ID('tempdb.dbo.#targetDescendants') IS NOT NULL
DROP TABLE #targetDescendants
IF OBJECT_ID('tempdb.dbo.#targetReach') IS NOT NULL
DROP TABLE #targetReach


SELECT n.BasicGraphNodeId, e.RefPath, n.Name, n.SourceElementId 
INTO #sourceNodes
FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE GraphKind = 'DataFlowTransitive' 
AND n.ProjectConfigId = @projectConfigId
AND LEFT(e.RefPath, LEN(@sourcePrefix)) = @sourcePrefix 
AND NodeType = @sourceType

SELECT n.BasicGraphNodeId, e.RefPath, n.Name, n.SourceElementId
INTO #targetNodes
FROM BIDoc.BasicGraphNodes n 
INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = n.SourceElementId
WHERE GraphKind = 'DataFlowTransitive' 
AND e.ProjectConfigId = @projectConfigId
AND LEFT(e.RefPath, LEN(@targetPrefix)) = @targetPrefix 
AND NodeType = @targetType


;WITH  sourceDescendants AS
(
SELECT BasicGraphNodeId, BasicGraphNodeId OriginalNodeId FROM #sourceNodes
UNION ALL
SELECT n.BasicGraphNodeId, sd.OriginalNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN sourceDescendants sd ON sd.BasicGraphNodeId = n.ParentId
)
SELECT * INTO #sourceDescendants FROM sourceDescendants

;WITH  targetDescendants AS
(
SELECT BasicGraphNodeId,BasicGraphNodeId OriginalNodeId FROM #targetNodes
UNION ALL
SELECT n.BasicGraphNodeId, sd.OriginalNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN targetDescendants sd ON sd.BasicGraphNodeId = n.ParentId
)
SELECT * INTO #targetDescendants FROM targetDescendants

--SELECT * FROM #sourceDescendants
--SELECT * FROM #targetDescendants

;WITH newTargets AS
(
SELECT DISTINCT s.OriginalNodeId, n.BasicGraphNodeId 
FROM #sourceDescendants s
INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = s.BasicGraphNodeId AND l.LinkType = N'DataFlow'
INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = l.NodeToId
UNION ALL
SELECT sd.OriginalNodeId, n.BasicGraphNodeId FROM BIDoc.BasicGraphNodes n
INNER JOIN newTargets sd ON sd.BasicGraphNodeId = n.ParentId
)
SELECT * INTO #targetReach FROM newTargets

DECLARE @remainingSteps INT = @stepCount - 1
	
WHILE @remainingSteps > 0
BEGIN
	;WITH newTargets AS
	(
	SELECT DISTINCT s.OriginalNodeId, n.BasicGraphNodeId 
	FROM #targetReach s
	INNER JOIN BIDoc.BasicGraphLinks l ON l.NodeFromId = s.BasicGraphNodeId AND l.LinkType = N'DataFlow'
	INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = l.NodeToId
	UNION ALL
	SELECT sd.OriginalNodeId, n.BasicGraphNodeId FROM BIDoc.BasicGraphNodes n
	INNER JOIN newTargets sd ON sd.BasicGraphNodeId = n.ParentId
	) 
	INSERT INTO #targetReach(OriginalNodeId, BasicGraphNodeId)
	SELECT nt.OriginalNodeId, nt.BasicGraphNodeId FROM newTargets nt
	LEFT JOIN #targetReach rs ON rs.BasicGraphNodeId = nt.BasicGraphNodeId
	WHERE rs.BasicGraphNodeId IS NULL

	SET @remainingSteps = @remainingSteps - 1
END

--SELECT * FROM #targetReach
/*
SELECT *
FROM #sourceNodes s
INNER JOIN #targetReach tr ON tr.OriginalNodeId = s.BasicGraphNodeId
INNER JOIN BIDoc.BasicGraphNodes tn ON tr.BasicGraphNodeId = tn.BasicGraphNodeId
INNER JOIN BIDoc.ModelElements te ON te.ModelElementId = tn.SourceElementId
WHERE s.Name = N'VREGNO'
ORDER BY s.BasicGraphNodeId

SELECT * FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = 2801264
SELECT * FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = 2801262
SELECT * FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = 2801261
SELECT * FROM BIDoc.BasicGraphNodes n WHERE n.BasicGraphNodeId = 2801181


SELECT * FROM BIDoc.BasicGraphNodes n WHERE n.NodeType = N'DfColumnElement'

--2801261

SELECT * FROM BIDoc.BasicGraphLinks l WHERE l.NodeFromId = 2801261

SELECT * FROM BIDoc.BasicGraphNodes WHERE BasicGraphNodeId = 2674732
SELECT * FROM BIDoc.BasicGraphNodes WHERE BasicGraphNodeId = 2801265

SELECT * FROM BIDoc.BasicGraphNodes WHERE ParentId = 2801265

SELECT * FROM BIDoc.BasicGraphLinks l 
WHERE l.NodeFromId = 2801265

SELECT * FROM BIDoc.BasicGraphLinks l 
WHERE l.NodeFromId = 2674732


SELECT * FROM #targetReach
*/

SELECT 
DISTINCT s.BasicGraphNodeId SourceNodeId, s.Name SourceNodeName, s.RefPath SourceNodePath, s.SourceElementId SourceElementId, 
t.BasicGraphNodeId TargetNodeId, t.Name TargetNodeName, t.RefPath TargetNodePath, t.SourceElementId TargetElementId
FROM #sourceNodes s
INNER JOIN #targetReach tr ON tr.OriginalNodeId = s.BasicGraphNodeId
INNER JOIN #targetDescendants td ON td.BasicGraphNodeId = tr.BasicGraphNodeId
INNER JOIN #targetNodes t ON t.BasicGraphNodeId = td.OriginalNodeId
GO
PRINT N'Creating Procedure [Inspect].[sp_TranslateDataFlowLinksDetailLevel]...';


GO
CREATE PROCEDURE [Inspect].[sp_TranslateDataFlowLinksDetailLevel]
@linkIds [BIDoc].[UDTT_IdList] READONLY,
@sourceDetailLevel INT,
@targetDetailLevel INT
AS
--DECLARE @linkIds [BIDoc].[UDTT_IdList]
--DECLARE @sourceDetailLevel INT = 1
--DECLARE @targetDetailLevel INT = 3

DECLARE @targetDetailGraphKind NVARCHAR(50) =
 IIF(@targetDetailLevel = 1, N'DataFlow', IIF(@targetDetailLevel = 2, N'DataFlowMediumDetail', N'DataFlowLowDetail'))
DECLARE @sourceDetailGraphKind NVARCHAR(50) = 
 IIF(@sourceDetailLevel = 1, N'DataFlow', IIF(@sourceDetailLevel = 2, N'DataFlowMediumDetail', N'DataFlowLowDetail'))

;WITH linkNodes AS
(
SELECT DISTINCT l.NodeFromId Id FROM BIDoc.BasicGraphLinks l
INNER JOIN @linkIds lid ON l.BasicGraphLinkId = lid.Id
UNION
SELECT DISTINCT l.NodeToId Id FROM BIDoc.BasicGraphLinks l
INNER JOIN @linkIds lid ON l.BasicGraphLinkId = lid.Id
)
SELECT n.Id INTO #nodeIds 
FROM linkNodes n

CREATE TABLE #nodeIdMap
(
OldNodeId INT,
NewNodeId INT
)

IF @sourceDetailLevel = @targetDetailLevel
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT nl.Id OriginalNodeId, nl.Id NewNodeId FROM #nodeIds nl
END
ELSE IF @sourceDetailLevel < @targetDetailLevel
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT srcN.BasicGraphNodeId OriginalNodeId, tgtN.BasicGraphNodeId NewNodeId 
	FROM #nodeIds nl
	INNER JOIN BIDoc.BasicGraphNodes srcN ON srcN.BasicGraphNodeId = nl.Id
	INNER JOIN BIDoc.HigherLevelElementAncestors anc ON anc.SouceElementId = srcN.SourceElementId
	INNER JOIN BIDoc.BasicGraphNodes tgtN ON tgtN.SourceElementId = anc.AncestorElementId
	WHERE anc.DetailLevel = @targetDetailLevel AND tgtN.GraphKind = @targetDetailGraphKind
END
ELSE
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT srcN.BasicGraphNodeId OriginalNodeId, tgtn.BasicGraphNodeId NewNodeId
	FROM #nodeIds nl
	INNER JOIN BIDoc.BasicGraphNodes srcN ON srcN.BasicGraphNodeId = nl.Id
	INNER JOIN BIDoc.HigherLevelElementAncestors anc ON anc.AncestorElementId = srcN.SourceElementId
	INNER JOIN BIDoc.BasicGraphNodes tgtN ON tgtN.SourceElementId = anc.SouceElementId
	WHERE anc.DetailLevel = @sourceDetailLevel AND tgtN.GraphKind = @targetDetailGraphKind
END

SELECT DISTINCT
	nl.BasicGraphLinkId, 
	nl.NodeFromId, 
	nl.NodeToId 
FROM 
@linkIds li
INNER JOIN BIDoc.BasicGraphLinks ol ON ol.BasicGraphLinkId = li.Id
INNER JOIN #nodeIdMap nmFrom ON ol.NodeFromId = nmFrom.OldNodeId
INNER JOIN #nodeIdMap nmTo ON ol.NodeToId = nmTo.OldNodeId
INNER JOIN BIDoc.BasicGraphLinks nl ON nl.NodeFromId = nmFrom.NewNodeId AND nl.NodeToId = nmTo.NewNodeId

DROP TABLE #nodeIdMap
DROP TABLE #nodeIds
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowLinksToNode]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowLinksToNode]
	@targetNodeId INT
AS
	SELECT 
	l.BasicGraphLinkId, 
	l.NodeFromId, 
	l.NodeToId 
	FROM BIDoc.BasicGraphLinks l
	INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = l.NodeToId
	WHERE l.LinkType = N'DataFlow' AND n.BasicGraphNodeId = @targetNodeId
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowLinksFromNode]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowLinksFromNode]
	@sourceNodeId INT
AS
	SELECT 
	l.BasicGraphLinkId, 
	l.NodeFromId, 
	l.NodeToId 
	FROM BIDoc.BasicGraphLinks l
	INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = l.NodeFromId
	WHERE l.LinkType = N'DataFlow' AND n.BasicGraphNodeId = @sourceNodeId
GO
PRINT N'Creating Procedure [Inspect].[sp_GetModelElementsUnderPathDisplay]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetModelElementsUnderPathDisplay]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(200) = NULL
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @path))
DECLARE 
	@intervalFrom INT,
	@intervalTo INT

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

SELECT e.[ModelElementId]
      ,[RefPath]
      ,[Caption]
      ,[Type]
	  ,td.TypeDescription
	  ,dp.DescriptivePath
  FROM [BIDoc].[ModelElements] e
  INNER JOIN BIDoc.ModelElementTypeDescriptions td ON e.Type = td.ElementType
  INNER JOIN BIDoc.ModelElementDescriptivePaths dp ON e.ModelElementId = dp.ModelElementId
  WHERE
  e.ProjectConfigId = @projectconfigid
  AND e.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo
  --e.RefPathPrefix >= LEFT(@path, 300) AND e.RefPathPrefix <= LEFT(@path, 300) + N'~' AND 
  --e.RefPath >= @path AND RefPath <= @path + N'~' -- LEFT(RefPath, LEN(@path)) = @path --RefPath LIKE Adm.f_EscapeForLike(@path) + '%' ESCAPE '\' AND ProjectConfigId = @projectconfigid
  AND e.[Type] = ISNULL(@type, [Type])
--)
GO
PRINT N'Creating Procedure [Inspect].[sp_TranslateDataFlowNodeDetailLevel]...';


GO
CREATE PROCEDURE [Inspect].[sp_TranslateDataFlowNodeDetailLevel]
@nodeId INT,
@sourceDetailLevel INT,
@targetDetailLevel INT
AS

DECLARE @targetDetailGraphKind NVARCHAR(50) =
 IIF(@targetDetailLevel = 1, N'DataFlow', IIF(@targetDetailLevel = 2, N'DataFlowMediumDetail', N'DataFlowLowDetail'))
DECLARE @sourceDetailGraphKind NVARCHAR(50) = 
 IIF(@sourceDetailLevel = 1, N'DataFlow', IIF(@sourceDetailLevel = 2, N'DataFlowMediumDetail', N'DataFlowLowDetail'))

CREATE TABLE #nodeIdMap
(
OldNodeId INT,
NewNodeId INT
)

IF @sourceDetailLevel = @targetDetailLevel
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT @nodeId OriginalNodeId, @nodeId NewNodeId
END
ELSE IF @sourceDetailLevel < @targetDetailLevel
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT srcN.BasicGraphNodeId OriginalNodeId, tgtN.BasicGraphNodeId NewNodeId 
	FROM BIDoc.BasicGraphNodes srcN
	INNER JOIN BIDoc.HigherLevelElementAncestors anc ON anc.SouceElementId = srcN.SourceElementId
	INNER JOIN BIDoc.BasicGraphNodes tgtN ON tgtN.SourceElementId = anc.AncestorElementId
	WHERE anc.DetailLevel = @targetDetailLevel AND tgtN.GraphKind = @targetDetailGraphKind AND srcN.BasicGraphNodeId = @nodeId
END
ELSE
BEGIN
	INSERT INTO #nodeIdMap(OldNodeId, NewNodeId)
	SELECT srcN.BasicGraphNodeId OriginalNodeId, tgtn.BasicGraphNodeId NewNodeId
	FROM BIDoc.BasicGraphNodes srcN
	INNER JOIN BIDoc.HigherLevelElementAncestors anc ON anc.AncestorElementId = srcN.SourceElementId
	INNER JOIN BIDoc.BasicGraphNodes tgtN ON tgtN.SourceElementId = anc.SouceElementId
	WHERE anc.DetailLevel = @sourceDetailLevel AND tgtN.GraphKind = @targetDetailGraphKind AND srcN.BasicGraphNodeId = @nodeId
END

DECLARE @nodeIds [BIDoc].[UDTT_IdList]

INSERT INTO @nodeIds(Id)
SELECT DISTINCT NewNodeId FROM #nodeIdMap

SELECT
	[BasicGraphNodeId]
	,[Name]
	,[NodeType]
	,[Description]
	,[ParentId]
	,[GraphKind]
	,[ProjectConfigId]
	,[SourceElementId]
	,[TopologicalOrder]
	,[RefPath]
	,TypeDescription
	,ElementType
	,DescriptivePath
FROM [Inspect].[f_GetGraphNodesByIdExtended](@nodeIds)

DROP TABLE #nodeIdMap
GO
PRINT N'Creating Procedure [Inspect].[sp_FillHighLevelSolutionTree]...';


GO
CREATE PROCEDURE [Inspect].[sp_FillHighLevelSolutionTree]
@projectConfigId UNIQUEIDENTIFIER
AS

DELETE FROM Inspect.HighLevelSolutionTrees WHERE ProjectConfigId = @projectConfigId

;
WITH elemTree AS(
	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, 0 ParentLevel
	FROM BIDoc.ModelElements e 
	WHERE e.ProjectConfigId = @projectConfigId AND e.Type IN (
	N'CD.DLS.Model.Mssql.Ssrs.ReportElement',
	N'CD.DLS.Model.Mssql.Ssis.PackageElement',
	N'CD.DLS.Model.Mssql.Ssas.CubeElement',
	N'CD.DLS.Model.Mssql.Pbi.ReportElement',
	N'CD.DLS.Model.Mssql.Ssas.DimensionElement',
	N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',
	N'CD.DLS.Model.Mssql.Db.ViewElement',
	N'CD.DLS.Model.Mssql.Db.SchemaTableElement',
	N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',
	N'CD.DLS.Model.Mssql.Db.ProcedureElement',
	N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement'
	)

	UNION ALL

	SELECT e.ModelElementId, e.Caption, e.Type, e.RefPath, ParentLevel + 1
	FROM elemTree t
	INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = t.ModelElementId AND l.Type = N'parent'
	INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = l.ElementToId
)
,x AS(

SELECT ModelElementId, Caption, elemTree.[Type], td.TypeDescription, MAX(ParentLevel) MaxParentLevel, RefPath
FROM elemTree
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON [Type] = td.ElementType
GROUP BY ModelElementId, Caption, elemTree.[Type], td.TypeDescription, RefPath
)

INSERT INTO Inspect.HighLevelSolutionTrees
(ProjectConfigId, ModelElementId, Caption, [Type], TypeDescription, MaxParentLevel, ParentElementId, RefPath)

SELECT @projectConfigId, ModelElementId, Caption, x.[Type], TypeDescription, MaxParentLevel, l.ElementToId ParentElementId, RefPath
FROM x
LEFT JOIN BIDoc.ModelLinks l ON l.ElementFromId = ModelElementId AND l.Type = N'parent'
GO
PRINT N'Creating Procedure [Inspect].[sp_GetCloseAnnotatedSources]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetCloseAnnotatedSources]
	@modelElementId INT
AS

DECLARE @nodeId INT = (SELECT BasicGraphNodeId FROM BIDoc.BasicGraphNodes WHERE SourceElementId = @modelElementId AND GraphKind = N'DataFlow')

DECLARE @currentNodes TABLE(NodeId INT, ModelElementId INT)
DECLARE @nextNodes TABLE(NodeId INT, ModelElementId INT)

/*
;WITH descendants AS
(
SELECT @nodeId NodeId, @modelElementId ModelElementId

UNION ALL

SELECT n.BasicGraphNodeId NodeId, n.SourceElementId ModelElementId 
FROM BIDoc.BasicGraphNodes n
INNER JOIN descendants d ON d.NodeId = n.ParentId
)
*/
INSERT INTO @currentNodes(NodeId, ModelElementId)
--SELECT NodeId, ModelElementId FROM descendants
--OPTION (MAXRECURSION 1000)
VALUES(@nodeId, @modelElementId)

DECLARE @stepsLeft INT = 7
DECLARE @currentNodesCount INT = 1

WHILE @stepsLeft > 0 AND @currentNodesCount > 0
BEGIN
	DELETE FROM @nextNodes
	INSERT INTO @nextNodes (NodeId, ModelElementId)
		SELECT DISTINCT n.BasicGraphNodeId, n.SourceElementId
		FROM @currentNodes c
		INNER JOIN BIDoc.BasicGraphLinks l ON l.LinkType = N'DataFlow' AND l.NodeToId = c.NodeId
		INNER JOIN BIDoc.BasicGraphNodes n ON n.BasicGraphNodeId = l.NodeFromId

	DELETE FROM @currentNodes
	INSERT INTO @currentNodes(NodeId, ModelElementId)
		SELECT NodeId, ModelElementId FROM @nextNodes

	--SELECT * FROM @currentNodes

	-- annotations found at this level
	IF EXISTS(
		SELECT TOP 1 1 FROM @currentNodes c
		INNER JOIN Annotate.AnnotationElements ae ON ae.ModelElementId = c.ModelElementId
		INNER JOIN Annotate.FieldValues fv ON fv.AnnotationElementId = ae.AnnotationElementId
		WHERE ae.IsCurrentVersion = 1 AND fv.[Value] <> N''
	)
	BEGIN
		SELECT e.ModelElementId, e.Caption ModelElementName, td.TypeDescription, f.FieldName, fv.[Value] FieldValue 
		FROM @currentNodes c
		INNER JOIN BIDoc.ModelElements e ON c.ModelElementId = e.ModelElementId
		INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.Type
		INNER JOIN Annotate.AnnotationElements ae ON ae.ModelElementId = e.ModelElementId
		INNER JOIN Annotate.FieldValues fv ON fv.AnnotationElementId = ae.AnnotationElementId
		INNER JOIN Annotate.Fields f ON f.FieldId = fv.FieldId
		WHERE ae.IsCurrentVersion = 1
		
		RETURN
	END

	SET @stepsLeft = @stepsLeft - 1
END

SELECT TOP 0 0 [0]
GO
PRINT N'Creating Procedure [Inspect].[sp_GetDataFlowLinksAmongNodes]...';


GO
CREATE PROCEDURE [Inspect].[sp_GetDataFlowLinksAmongNodes]
@nodeIds [BIDoc].[UDTT_IdList] READONLY
AS
SELECT DISTINCT
	nl.BasicGraphLinkId, 
	nl.NodeFromId, 
	nl.NodeToId 
FROM 
BIDoc.BasicGraphLinks nl
INNER JOIN @nodeIds nf ON nf.Id = nl.NodeFromId
INNER JOIN @nodeIds nt ON nt.Id = nl.NodeToId
WHERE nl.LinkType = N'Dataflow'
GO
PRINT N'Creating Procedure [Learning].[sp_ListOlapFields]...';


GO
CREATE PROCEDURE [Learning].[sp_ListOlapFields]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT f.OlapFieldId, f.FieldElementId, f.FieldName, f.FieldReference, f.FieldType,
f.ServerName, f.DbName, f.CubeName
FROM Learning.OlapFields f
WHERE ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Learning].[sp_GetOlapRuleConclusions]...';


GO
CREATE PROCEDURE [Learning].[sp_GetOlapRuleConclusions]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT c.OlapRuleId, c.OlapFieldId
FROM Learning.OlapRules r
INNER JOIN Learning.OlapRuleConclusions c ON r.OlapRuleId = c.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Learning].[sp_GetOlapRulePremises]...';


GO
CREATE PROCEDURE [Learning].[sp_GetOlapRulePremises]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT p.OlapRuleId, p.OlapFieldId
FROM Learning.OlapRules r
INNER JOIN Learning.OlapRulePremises p ON r.OlapRuleId = p.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Learning].[sp_GetOlapRules]...';


GO
CREATE PROCEDURE [Learning].[sp_GetOlapRules]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT r.OlapRuleId, r.RuleCode, r.Support, r.Confidence, r.ServerName, r.DbName, r.CubeName
FROM Learning.OlapRules r
WHERE r.ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Learning].[sp_SetOlapRules]...';


GO
CREATE PROCEDURE [Learning].[sp_SetOlapRules]
	@projectconfigid UNIQUEIDENTIFIER,
	@rules [Learning].[UDTT_OlapRules] READONLY
AS

DELETE p FROM Learning.OlapRulePremises p
INNER JOIN Learning.OlapRules r ON p.OlapRuleId = r.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid

DELETE c FROM Learning.OlapRuleConclusions c
INNER JOIN Learning.OlapRules r ON c.OlapRuleId = r.OlapRuleId
WHERE r.ProjectConfigId = @projectconfigid

DELETE FROM Learning.OlapRules WHERE ProjectConfigId = @projectconfigid

INSERT INTO Learning.OlapRules
(ProjectConfigId, RuleCode, Support, Confidence, ServerName, DbName, CubeName)
SELECT @projectconfigid, RuleCode, Support, Confidence, ServerName, DbName, CubeName FROM @rules

;WITH premises AS
(
SELECT r.RuleCode, CONVERT(INT, p.item) FieldId FROM @rules r
CROSS APPLY adm.f_splitstring(r.Premises, N';') p
)
INSERT INTO Learning.OlapRulePremises
(OlapRuleId, OlapFieldId)
SELECT r.OlapRuleId, premises.FieldId 
FROM premises
INNER JOIN Learning.OlapRules r ON r.RuleCode = premises.RuleCode
WHERE r.ProjectConfigId = @projectconfigid

;WITH conclusions AS
(
SELECT r.RuleCode, CONVERT(INT, p.item) FieldId FROM @rules r
CROSS APPLY adm.f_splitstring(r.Conclusions, N';') p
)
INSERT INTO Learning.OlapRuleConclusions
(OlapRuleId, OlapFieldId)
SELECT r.OlapRuleId, conclusions.FieldId 
FROM conclusions
INNER JOIN Learning.OlapRules r ON r.RuleCode = conclusions.RuleCode
WHERE r.ProjectConfigId = @projectconfigid

RETURN 0
GO
PRINT N'Creating Procedure [Learning].[sp_GetOlapQueryFields]...';


GO
CREATE PROCEDURE [Learning].[sp_GetOlapQueryFields]
	@projectconfigid UNIQUEIDENTIFIER
AS

SELECT OlapQueryFieldId, QueryElementId, OlapFieldId 
FROM Learning.OlapQueryFields
WHERE ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Procedure [Learning].[sp_CollectOlapFieldReferences]...';


GO
CREATE PROCEDURE [Learning].[sp_CollectOlapFieldReferences]
	@projectconfigid UNIQUEIDENTIFIER
AS

DELETE FROM Learning.OlapFieldReferences WHERE ProjectConfigId = @projectconfigid
/*
;WITH x AS(
---------- pivot tables
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/Field[', e.RefPath)) [GroupPath], 
IIF(
JSON_VALUE(e.ExtendedProperties, '$.Orientation') IN(N'0', N'1'), N'Axis', 
IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', N'Measure', N'Filter')
) [FieldType],
e.RefPath, N'[' + IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', N'Measures', he.Caption) + N'].[' + le.Caption + N']' FieldReference, 
le.ModelElementId FieldElementId, IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', le.Caption, N'[' + he.Caption + N'].[' + le.Caption + N']') FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = le.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Business.Excel.PivotTableFieldElement' 
AND l.Type = N'SourceField'
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement', 
N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',
N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement')
--AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

------ measures
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Measure' [FieldType],
e.RefPath, e.Definition FieldReference, le.ModelElementId FieldElementId, le.Caption FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' 
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

--------- direct attributes
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Axis' [FieldType],
e.RefPath, /*e.Definition*/ N'[' + he.Caption + N'].[' + le.Caption + N']' FieldReference, 
le.ModelElementId FieldElementId, N'[' + he.Caption + N'].[' + le.Caption + N']' FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = le.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
--INNER JOIN BIDoc.ModelLinks dl ON dl.ElementFromId = he.ModelElementId AND dl.Type = N'parent'
--INNER JOIN BIDoc.ModelElements de ON de.ModelElementId = dl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition NOT LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

-------- hierarchy levels
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Axis' [FieldType],
e.RefPath, /*e.Definition*/ N'[' + he.Caption + N'].[' + ae.Caption + N']' FieldReference, 
ae.ModelElementId FieldElementId, N'[' + he.Caption + N'].[' + ae.Caption + N']' FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks al ON al.ElementFromId = le.ModelElementId AND al.Type = N'Attribute'
INNER JOIN BIDoc.ModelElements ae ON ae.ModelElementId = al.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = ae.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
--INNER JOIN BIDoc.ModelLinks dl ON dl.ElementFromId = he.ModelElementId AND dl.Type = N'parent'
--INNER JOIN BIDoc.ModelElements de ON de.ModelElementId = dl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition NOT LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

------- filters
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Filter' [FieldType],
e.RefPath, e.Definition FieldReference, 
le.ModelElementId FieldElementId, le.Caption + N' ' + SUBSTRING(e.Definition, CHARINDEX(N'.&[', e.Definition) + 2, 1000) FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement', N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId
)
INSERT INTO Learning.OlapFieldReferences
(
ProjectConfigId, 
QueryElementId,
FieldElementId,
ReferenceElementId,
FieldType,
FieldReference,
FieldName, 
QueryElementRefPath,
ReferenceElementRefPath
)
SELECT 
x.ProjectConfigId, 
queryElement.ModelElementId QueryElementId,
FieldElementId,
referenceElement.ModelElementId ReferenceElementId,
x.FieldType,
x.FieldReference,
x.FieldName,
x.GroupPath QueryElementRefPath,
x.RefPath ReferenceElementRefPath
FROM x
INNER JOIN BIDoc.ModelElements queryElement ON queryElement.RefPath = x.GroupPath
INNER JOIN BIDoc.ModelElements referenceElement ON referenceElement.RefPath = x.RefPath
WHERE queryElement.ProjectConfigId = @projectConfigId AND referenceElement.ProjectConfigId = @projectConfigId
*/

;WITH x AS(
---------- pivot tables
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/Field[', e.RefPath)) [GroupPath], 
IIF(
JSON_VALUE(e.ExtendedProperties, '$.Orientation') IN(N'0', N'1'), N'Axis', 
IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', N'Measure', N'Filter')
) [FieldType],
e.RefPath, N'[' + IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', N'Measures', he.Caption) + N'].[' + le.Caption + N']' FieldReference, 
le.ModelElementId FieldElementId, IIF(JSON_VALUE(e.ExtendedProperties, '$.Orientation') = N'2', le.Caption, N'[' + he.Caption + N'].[' + le.Caption + N']') FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = le.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Business.Excel.PivotTableFieldElement' 
AND l.Type = N'SourceField'
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', 
N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',
N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement')
--AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId
-- for now, exclude pivot table template filters
AND (ISNULL(JSON_VALUE(e.ExtendedProperties, '$.Orientation'), N'') <> N'3')
UNION ALL

------ measures
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Measure' [FieldType],
e.RefPath, e.Definition FieldReference, le.ModelElementId FieldElementId, le.Caption FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' 
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

--------- direct attributes
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Axis' [FieldType],
e.RefPath, /*e.Definition*/ N'[' + he.Caption + N'].[' + le.Caption + N']' FieldReference, 
le.ModelElementId FieldElementId, N'[' + he.Caption + N'].[' + le.Caption + N']' FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = le.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
--INNER JOIN BIDoc.ModelLinks dl ON dl.ElementFromId = he.ModelElementId AND dl.Type = N'parent'
--INNER JOIN BIDoc.ModelElements de ON de.ModelElementId = dl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition NOT LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

-------- hierarchy levels
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Axis' [FieldType],
e.RefPath, /*e.Definition*/ N'[' + he.Caption + N'].[' + ae.Caption + N']' FieldReference, 
ae.ModelElementId FieldElementId, N'[' + he.Caption + N'].[' + ae.Caption + N']' FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
INNER JOIN BIDoc.ModelLinks al ON al.ElementFromId = le.ModelElementId AND al.Type = N'Attribute'
INNER JOIN BIDoc.ModelElements ae ON ae.ModelElementId = al.ElementToId
INNER JOIN BIDoc.ModelLinks hl ON hl.ElementFromId = ae.ModelElementId AND hl.Type = N'parent'
INNER JOIN BIDoc.ModelElements he ON he.ModelElementId = hl.ElementToId
--INNER JOIN BIDoc.ModelLinks dl ON dl.ElementFromId = he.ModelElementId AND dl.Type = N'parent'
--INNER JOIN BIDoc.ModelElements de ON de.ModelElementId = dl.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition NOT LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId

UNION ALL

------- filters
SELECT e.ProjectConfigId, SUBSTRING(e.RefPath, 0, CHARINDEX(N'/MdxStatement', e.RefPath)) [GroupPath], N'Filter' [FieldType],
e.RefPath, e.Definition FieldReference, 
le.ModelElementId FieldElementId, le.Caption + N' ' + SUBSTRING(e.Definition, CHARINDEX(N'.&[', e.Definition) + 2, 1000) FieldName 
FROM BIDoc.ModelElements e 
INNER JOIN BIDoc.ModelLinks l ON l.ElementFromId = e.ModelElementId
INNER JOIN BIDoc.ModelElements le ON le.ModelElementId = l.ElementToId
WHERE e.Type = N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement' AND e.Definition LIKE '%.&%'
AND l.Type = N'Reference'
AND e.RefPath LIKE N'SSRS%' 
AND le.RefPath LIKE N'SSAS%' 
AND le.Type IN (N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement', N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement')
AND e.Definition NOT LIKE N'%(%'
AND e.ProjectConfigId = @projectConfigId
AND e.Definition LIKE '%&%'
)
INSERT INTO Learning.OlapFieldReferences
(
ServerName,
DbName,
CubeName,
ProjectConfigId, 
QueryElementId,
FieldElementId,
ReferenceElementId,
FieldType,
FieldReference,
FieldName, 
QueryElementRefPath,
ReferenceElementRefPath
)
SELECT 
SUBSTRING(fe.RefPath, LEN(N'SSASServer[@Name=') + 2, CHARINDEX(N']/Db[@Name=', fe.RefPath) - LEN(N'SSASServer[@Name=') - 3) ServerName
,SUBSTRING(fe.RefPath, CHARINDEX(N']/Db[@Name=', fe.RefPath) + LEN(N']/Db[@Name=') + 1, CHARINDEX(N']/Cube[@Name=', fe.RefPath) - (CHARINDEX(N']/Db[@Name=', fe.RefPath) + LEN(N']/Db[@Name=') + 1) - 1) DbName
,SUBSTRING(fe.RefPath, CHARINDEX(N']/Cube[@Name=', fe.RefPath) + LEN(N']/Cube[@Name=') + 1, 
	CHARINDEX(N''']/', SUBSTRING(fe.RefPath, CHARINDEX(N']/Cube[@Name=', fe.RefPath) + LEN(N']/Cube[@Name=') + 1, 1000)) - 1) CubeName,
x.ProjectConfigId, 
queryElement.ModelElementId QueryElementId,
FieldElementId,
referenceElement.ModelElementId ReferenceElementId,
x.FieldType,
x.FieldReference,
x.FieldName,
x.GroupPath QueryElementRefPath,
x.RefPath ReferenceElementRefPath
FROM x
INNER JOIN BIDoc.ModelElements queryElement ON queryElement.RefPath = x.GroupPath
INNER JOIN BIDoc.ModelElements referenceElement ON referenceElement.RefPath = x.RefPath
INNER JOIN BIDoc.ModelElements fe ON fe.ModelElementId = x.FieldElementId
WHERE queryElement.ProjectConfigId = @projectConfigId AND referenceElement.ProjectConfigId = @projectConfigId



DELETE rp FROM Learning.OlapRulePremises rp
INNER JOIN Learning.OlapRules r ON rp.OlapRuleId = r.OlapRuleId WHERE r.ProjectConfigId = @projectConfigId

DELETE rc FROM Learning.OlapRuleConclusions rc
INNER JOIN Learning.OlapRules r ON rc.OlapRuleId = r.OlapRuleId WHERE r.ProjectConfigId = @projectConfigId

DELETE FROM [Learning].[OlapQueryFields] WHERE ProjectConfigId = @projectConfigId
DELETE FROM Learning.OlapFields WHERE ProjectConfigId = @projectConfigId

INSERT INTO Learning.OlapFields
(
ProjectConfigId,
FieldElementId,
FieldType,
FieldReference,
FieldName,
ServerName,
DbName,
CubeName
)
SELECT DISTINCT @projectConfigId ProjectConfigId, r.FieldElementId, r.FieldType, r.FieldReference, r.FieldName, 
ServerName, DbName, CubeName
FROM Learning.OlapFieldReferences r

INSERT INTO Learning.OlapQueryFields
(
ProjectConfigId,
QueryElementId,
OlapFieldId
)
SELECT DISTINCT
@projectConfigId,
r.QueryElementId,
f.OlapFieldId
FROM Learning.OlapFieldReferences r
INNER JOIN Learning.OlapFields f ON f.FieldElementId = r.FieldElementId AND f.FieldReference = r.FieldReference AND f.FieldType = r.FieldType
	AND f.ServerName = r.ServerName AND f.DbName = r.DbName AND f.CubeName = r.CubeName
WHERE r.ProjectConfigId = @projectConfigId AND f.ProjectConfigId = @projectConfigId
GO
PRINT N'Creating Procedure [Search].[sp_FindRootElements]...';


GO
CREATE PROCEDURE [Search].[sp_FindRootElements]
@projectConfigId UNIQUEIDENTIFIER
AS

DELETE FROM Search.RootElements WHERE ProjectConfigId = @projectConfigId

INSERT INTO Search.RootElements
(
ProjectConfigId,
ModelElementId,
Caption
)

SELECT @projectConfigId, e.ModelElementId, dp.DescriptivePath 
FROM BIDoc.ModelElements e
INNER JOIN BIDoc.ModelElementDescriptivePaths dp ON e.ModelElementId = dp.ModelElementId
LEFT JOIN BIDoc.ModelLinks pl ON pl.Type = N'parent' AND pl.ElementFromId = e.ModelElementId
LEFT JOIN BIDoc.ModelElements parentFolder ON parentFolder.ModelElementId = pl.ElementToId AND parentFolder.Type = N'CD.DLS.Model.Mssql.Ssrs.FolderElement'
WHERE e.[Type] IN (
 N'CD.DLS.Model.Mssql.Db.DatabaseElement'
 ,N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement'
 ,N'CD.DLS.Model.Mssql.Ssis.ProjectElement'
  ,N'CD.DLS.Model.Mssql.Pbi.TenantElement'
 ,N'CD.DLS.Model.Mssql.Ssrs.FolderElement'
 ,N'CD.DLS.Model.Business.Organization.BusinessRootElement')
AND parentFolder.ModelElementId IS NULL
AND e.ProjectConfigId = @projectConfigId
GO
PRINT N'Creating Procedure [Search].[sp_FindFulltext]...';


GO
CREATE PROCEDURE [Search].[sp_FindFulltext]
	@projectConfigId UNIQUEIDENTIFIER, 
	@pattern NVARCHAR(MAX),
	@refPathPrefix NVARCHAR(300),
	@typeFilter [BIDoc].[UDTT_StringList] READONLY
AS
	--DECLARE @pattern NVARCHAR(MAX) = N'General Ledger'


DECLARE 
	@intervalFrom INT,
	@intervalTo INT,
	@annotationPrefix BIT = 0


DECLARE @elementId INT = (SELECT [ModelElementId] FROM [BIDoc].[f_GetModelElementIdByRefPath] (@projectConfigId, @refPathPrefix))

SELECT @intervalFrom = e.RefPathIntervalStart, @intervalTo = e.RefPathIntervalEnd FROM BIDoc.ModelElements e WHERE e.ModelElementId = @elementId

DECLARE @likePattern NVARCHAR(MAX) =  N'%' + [Adm].[f_EscapeForLike](@pattern) + N'%'
DECLARE @containsPattern NVARCHAR(1000) = N'ISABOUT(' + REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(/*TRIM(' ()[]&!|"' from*/ @pattern /*)*/, N' ', N', '), N'(', N''), N')', N''), N'[', N''), N']', N''), N'!', N''), N'|', N''), N'&', N''), N'"', N'') + N')'

;WITH r AS(
/**/
SELECT fts.ModelElementId, fts.ElementName, fts.TypeDescription /*td.TypeDescription*/, fts.DescriptiveRootPath /*dscPth.DescriptiveRootPath*/, 
fts.BusinessFields, KEY_TBL.RANK * fts.SearchPriority ResultPriority, fts.ElementType /*e.Type*/
,fts.RefPath
--,e.RefPathPrefix

FROM Search.FulltextSearch fts 
INNER JOIN CONTAINSTABLE(Search.FulltextSearch, (ElementName, ElementNameSplit, BusinessFields), @containsPattern ) AS KEY_TBL ON fts.FulltextSearchId = KEY_TBL.[KEY]
--INNER JOIN BIDoc.ModelElementDescriptivePaths dscPth ON dscPth.ModelElementId = fts.ModelElementId
--INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = fts.ModelElementId
--INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.[Type]
WHERE fts.ProjectConfigId = @projectConfigId

UNION
/**/
SELECT fts.ModelElementId, fts.ElementName, fts.TypeDescription, fts.DescriptiveRootPath, 
fts.BusinessFields, LEN(@pattern) * 5 * fts.SearchPriority ResultPriority, fts.ElementType
,fts.RefPath
--,e.RefPathPrefix
FROM Search.FulltextSearch fts 
--INNER JOIN BIDoc.ModelElementDescriptivePaths dscPth ON dscPth.ModelElementId = fts.ModelElementId
--INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = fts.ModelElementId
--INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.[Type]
WHERE (fts.ElementName LIKE @likePattern OR fts.BusinessFields LIKE @likePattern)
AND fts.ProjectConfigId = @projectConfigId
)

SELECT TOP 200 
r.ModelElementId, r.ElementName, r.TypeDescription, r.DescriptiveRootPath, 
r.BusinessFields, r.ElementType, MAX(r.ResultPriority) ResultPriority 
FROM r 
INNER JOIN @typeFilter tf ON tf.Value = r.ElementType
LEFT JOIN BIDoc.Modelelements me ON me.ModelElementId = r.ModelElementId
WHERE (@refPathPrefix = N'' OR (@annotationPrefix = 1 AND LEFT(r.RefPath, LEN(@refPathPrefix)) = @refPathPrefix) OR (me.RefPathIntervalStart BETWEEN @intervalFrom AND @intervalTo))
GROUP BY r.ModelElementId, r.ElementName, r.TypeDescription, r.DescriptiveRootPath, 
r.BusinessFields, r.ElementType
ORDER BY MAX(r.ResultPriority) DESC

RETURN 0
GO
PRINT N'Creating Procedure [Search].[sp_IndexFulltext]...';


GO
CREATE PROCEDURE [Search].[sp_IndexFulltext]
@projectConfigId UNIQUEIDENTIFIER
AS

BEGIN

DELETE fts FROM Search.FullTextSearch fts
--INNER JOIN BIDoc.ModelElements e ON e.ModelElementId = fts.ModelElementId
--WHERE e.ProjectConfigId = @projectConfigId
WHERE fts.ProjectConfigId = @projectConfigId

CREATE TABLE #searchTypes (TypeName NVARCHAR(MAX), SearchPriority INT)

INSERT INTO #searchTypes
(
    TypeName,
    SearchPriority
)
VALUES 

	(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', 10),	
	(N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement', 5),
	(N'CD.DLS.Model.Mssql.Ssis.PackageElement', 7),
	(N'CD.DLS.Model.Mssql.Ssas.CubeElement', 3),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', 3),
	(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', 2),
	(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', 7),
	--(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', 1),
	(N'CD.DLS.Model.Mssql.Db.ViewElement', 8),
	(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', 9),
	--(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', 6),
	(N'CD.DLS.Model.Mssql.Db.ProcedureElement', 5),
	(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', 9),
	--(N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement', 9),
	(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', 9),
	(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', 5),
	(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement', 8),
	(N'CD.DLS.Model.Mssql.Db.ColumnElement', 7),

	(N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement', 10),

	(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', 9),
	(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', 8),

	--(N'CD.DLS.Model.Mssql.Pbi.TenantElement', 10),
	(N'CD.DLS.Model.Mssql.Pbi.ReportElement', 10),
	(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement',8),
	(N'CD.DLS.Model.Mssql.Pbi.VisualElement', 5),
	--(N'CD.DLS.Model.Mssql.Pbi.ConnectionElement', 5),
	(N'CD.DLS.Model.Mssql.Pbi.PbiTableElement', 7),
	(N'CD.DLS.Model.Mssql.Pbi.PbiColumnElement', 7)




	

INSERT INTO Search.FulltextSearch(ModelElementID, ElementName, ElementNameSplit, SearchPriority,
[TypeDescription], [DescriptiveRootPath], [ElementType], ProjectConfigId, [RefPath]
)
SELECT e.ModelElementId, e.Caption, adm.f_SplitCamelCase(e.Caption), st.SearchPriority,
td.TypeDescription, dscPth.DescriptiveRootPath, e.Type, @projectConfigId, e.RefPath
FROM BIDoc.ModelElements e 
INNER JOIN #searchTypes st ON e.Type = st.TypeName
INNER JOIN BIDoc.ModelElementDescriptivePaths dscPth ON dscPth.ModelElementId = e.ModelElementId
INNER JOIN BIDoc.ModelElementTypeDescriptions td ON td.ElementType = e.[Type]
WHERE e.ProjectConfigId = @projectConfigId

;WITH assignments AS
(
SELECT DISTINCT fts.ModelElementId, 
SUBSTRING(
        (
            SELECT ', ' + fv.Value AS [text()]
            FROM Annotate.FieldValues fv
            WHERE fv.AnnotationElementId = ae.AnnotationElementId
            AND fv.Value <> N''
			FOR XML PATH ('')
        ), 2, 10000) [BusinessValues]

FROM Search.FulltextSearch AS fts
LEFT JOIN Annotate.AnnotationElements ae ON fts.ModelElementId = ae.ModelElementId
WHERE ae.IsCurrentVersion = N'1'
AND ae.ProjectConfigId = @projectConfigId
)
UPDATE fts SET BusinessFields = a.BusinessValues 
FROM Search.FulltextSearch fts
INNER JOIN assignments a ON a.ModelElementId = fts.ModelElementId

ALTER FULLTEXT CATALOG fulltext_default REBUILD

DROP TABLE #searchTypes

END
GO
PRINT N'Creating Procedure [Stg].[sp_SaveExtractItem]...';


GO
CREATE PROCEDURE [Stg].[sp_SaveExtractItem]
	@ExtractId	UNIQUEIDENTIFIER,
	@ComponentId INT,
	@ObjectType NVARCHAR(MAX),
	@ObjectName NVARCHAR(MAX),
	@Content NVARCHAR(MAX)
AS
	INSERT INTO Stg.ExtractItems(
	[ExtractId],
	[ComponentId],
	[ObjectType],
	[ObjectName],
	[Content]
	)
	VALUES
	(
	@ExtractId,
	@ComponentId,
	@ObjectType,
	@ObjectName,
	@Content
	)
RETURN 0
GO
PRINT N'Creating Procedure [Stg].[sp_SaveNewExtract]...';


GO
CREATE PROCEDURE [Stg].[sp_SaveNewExtract]
	@extractId UNIQUEIDENTIFIER,
	@projectConfigId UNIQUEIDENTIFIER,
	@extractedBy NVARCHAR(MAX),
	@extractStartTime DATETIME

AS
	INSERT INTO stg.Extracts
	(
	ExtractId,
	ProjectConfigId,
	ExtractedBy,
	ExtractStartTime
	)
	VALUES
	(
	@extractId,
	@projectConfigId,
	@extractedBy,
	@extractStartTime
	)
GO
PRINT N'Creating Procedure [Adm].[sp_WaitingTest]...';


GO
CREATE PROCEDURE [Adm].[sp_WaitingTest]
	@projectConfigId UNIQUEIDENTIFIER,
	@requestId UNIQUEIDENTIFIER,
	@minutes int = 20
AS

	 DECLARE @i INT = 0
	 DECLARE @message NVARCHAR(MAX)
	 WHILE @minutes > @i
	 BEGIN
		WAITFOR DELAY '00:01' 
		SET @i = @i + 1
		SET @message = N'Waited for ' + CONVERT(NVARCHAR(10), @i) + N' minutes'
		PRINT @message
		EXEC [Adm].[sp_WriteLogInfo] @message
	 END
GO
PRINT N'Creating Procedure [BIDoc].[sp_ClearModel]...';


GO
CREATE PROCEDURE [BIDoc].[sp_ClearModel]
	@projectconfigid UNIQUEIDENTIFIER,
	@requestId UNIQUEIDENTIFIER = NULL
AS

DECLARE @rc INT = 1

EXEC [BIDoc].[sp_ClearAggregations] @projectConfigId

--SET @rc = 1
--WHILE @rc > 0
--BEGIN
--DELETE TOP (10000) FROM [BIDoc].[BasicGraphNodes] WHERE ProjectConfigId = @projectconfigid --AND GraphKind = @graphkind
--SELECT @rc = @@ROWCOUNT
--END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing model links'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[ModelLinks] l
INNER JOIN [BIDoc].[ModelElements] ef ON l.ElementFromId = ef.ModelElementId
INNER JOIN [BIDoc].[ModelElements] et ON l.ElementToId = et.ModelElementId
WHERE ef.ProjectConfigId = @projectconfigid AND (ef.Type LIKE N'CD.DLS.Model.Mssql.%' OR et.Type LIKE N'CD.DLS.Model.Mssql.%')
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Clearing model elements'

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) FROM [BIDoc].[ModelElements] 
WHERE ProjectConfigId = @projectconfigid AND [Type] LIKE N'CD.DLS.Model.Mssql.%'
SELECT @rc = @@ROWCOUNT
END

EXEC [Adm].[sp_WriteLogInfo] N'Done clearing model'

IF @requestId IS NOT NULL
BEGIN
-- notify the WF followup
EXEC [Adm].[sp_SaveDbOperationFinishedMessage] @requestId
END
GO
PRINT N'Creating Procedure [BIDoc].[sp_BuildAggregations]...';


GO
CREATE PROCEDURE [BIDoc].[sp_BuildAggregations]
	@projectconfigid UNIQUEIDENTIFIER --= N'e99a3b4e-7f04-4b98-9780-10e71e6258cf'
	,@requestId UNIQUEIDENTIFIER
AS
	PRINT N'Clearing aggregations'
	EXEC [Adm].[sp_WriteLogInfo] N'Clearing aggregations'
	EXEC [BIDoc].[sp_ClearAggregations] @projectConfigId

	/*
	PRINT N'Rebuilding indexes'
	EXEC [Adm].[sp_WriteLogInfo] N'Rebuilding indexes'
	ALTER INDEX ALL ON BIDoc.ModelElements  
	REBUILD ;
	ALTER INDEX ALL ON BIDoc.ModelLinks
	REBUILD ;   
	*/

	PRINT N'Building dependency graph'
	EXEC [Adm].[sp_WriteLogInfo] N'Building dependency graph'

	EXEC BIDoc.sp_CreateDataFlowGraph @projectconfigid

	PRINT N'Propagating dataflow vertically'
	EXEC [Adm].[sp_WriteLogInfo] N'Propagating dataflow vertically'
	EXEC BIDoc.sp_PropagateDataFlowVertically @projectconfigid
	/*
	PRINT N'Building transitive dependency graph'
	EXEC [Adm].[sp_WriteLogInfo] N'Building transitive dependency graph'
	EXEC BIDoc.sp_BuildTransitiveGraph @projectconfigid, N'DataFlow', N'DataFlowTransitive', 'DataFlow'
	*/
	PRINT N'Building dataflow sequences'
	EXEC [Adm].[sp_WriteLogInfo] N'Building dataflow sequences'
	EXEC BIDoc.sp_BuildDataFlowSequences @projectconfigid

	PRINT N'Propagating nodes to higher level nodes'
	EXEC [Adm].[sp_WriteLogInfo] N'Propagating nodes to higher level nodes'
	EXEC BIDoc.sp_FillHigherLevelElementAncestors @projectconfigid

	PRINT N'Clensing dataflow sequences'
	EXEC [Adm].[sp_WriteLogInfo] N'Clensing dataflow sequences'
	EXEC BIDoc.sp_ClenseDataFlowSequences @projectconfigid

	PRINT N'Building high level dataflow graph'
	EXEC [Adm].[sp_WriteLogInfo] N'Building high level dataflow graph'
	EXEC BIDoc.sp_BuildHighLevelGraph @projectconfigid

	PRINT N'Setting descriptive element paths'
	EXEC [Adm].[sp_WriteLogInfo] N'Setting descriptive element paths'
	EXEC BIDoc.sp_SetModelElementDescriptivePaths @projectconfigid

	PRINT N'Propagating dataflow sequences to higher level nodes'
	EXEC [Adm].[sp_WriteLogInfo] N'Propagating dataflow sequences to higher level nodes'
	EXEC BIDoc.sp_BuildHigherDataFlowSequences @projectconfigid

	PRINT N'Creating medium level dataflow graph'
	EXEC [Adm].[sp_WriteLogInfo] N'Creating medium level dataflow graph'
	EXEC [BIDoc].[sp_CreateDataFlowMediumDetailGraph] @projectconfigid

	PRINT N'Creating low level dataflow graph'
	EXEC [Adm].[sp_WriteLogInfo] N'Creating low level dataflow graph'
	EXEC [BIDoc].[sp_CreateDataFlowLowDetailGraph] @projectconfigid

	PRINT N'Creating links betweeen Elements and Annotations'
	EXEC [Adm].[sp_WriteLogInfo] N'Creating links betweeen Elements and Annotations'
	EXEC Annotate.sp_UpdateModelElememntReferences @projectconfigid
	
	PRINT N'Building fulltext indexes'
	EXEC [Adm].[sp_WriteLogInfo] N'Building fulltext indexes'
	EXEC Search.sp_FindRootElements @projectconfigid
	EXEC Search.sp_IndexFulltext @projectconfigid

	/**/
	PRINT N'Finding and saving errors in dataflow'
	EXEC [Adm].[sp_WriteLogInfo] N'Finding and saving errors in dataflow'
	EXEC BIDoc.sp_FillDataMessages @projectconfigid
	/**/
	
	--UPDATE bm SET bm.Active = 0 
	--FROM adm.BroadcastMessages bm WHERE bm.Active = 1 AND bm.ProjectConfigId = @projectconfigid AND bm.BroadcastMessageType = N'ProjectUpdateStarted'

	PRINT N'Setting RefPath intervals'
	EXEC [Adm].[sp_WriteLogInfo] N'Setting RefPath intervals'
	
	EXEC [BIDOc].[sp_SetRefPathIntervals] @projectConfigId

	UPDATE n
	SET RefPathIntervalStart = e.RefPathIntervalStart, RefPathIntervalEnd = e.RefPathIntervalEnd
	FROM BIDoc.BasicGraphNodes n
	INNER JOIN BIDoc.ModelElements e ON n.SourceElementId = e.ModelElementId
	WHERE e.ProjectConfigId = @projectconfigid

	PRINT N'Building high level solution tree'
	EXEC [Adm].[sp_WriteLogInfo] N'Building high level solution tree'
	
	EXEC [Inspect].[sp_FillHighLevelSolutionTree] @projectconfigid

	PRINT N'Building high level solution tree'
	EXEC [Adm].[sp_WriteLogInfo] N'Building high level solution tree'
	
	/*
	PRINT N'Setting subtree contents for comparison'
	EXEC [Adm].[sp_WriteLogInfo] N'Setting subtree contents for comparison'
	
	EXEC [BIDoc].[sp_SetElementSubtreeContents] @projectconfigid
	*/

	PRINT N'Relinking lineage grid history'
	EXEC [Adm].[sp_WriteLogInfo] N'Relinking lineage grid history'
	
	UPDATE h SET SourceRootElementId = e.ModelElementId
	FROM BIDoc.LineageGridHistory h
	INNER JOIN BIDoc.ModelElements e ON h.SourceRootElementPath = e.RefPath
	WHERE h.ProjectConfigId = @projectconfigid AND e.ProjectConfigId = @projectconfigid

	UPDATE h SET TargetRootElementId = e.ModelElementId
	FROM BIDoc.LineageGridHistory h
	INNER JOIN BIDoc.ModelElements e ON h.TargetRootElementPath = e.RefPath
	WHERE h.ProjectConfigId  = @projectconfigid AND e.ProjectConfigId = @projectconfigid

	DELETE FROM BIDoc.LineageGridHistory
	WHERE ProjectConfigId = @projectconfigid AND (SourceRootElementId IS NULL OR TargetRootElementId IS NULL)
	
	/*
	PRINT N'Rebuilding indexes'
	EXEC [Adm].[sp_WriteLogInfo] N'Rebuilding indexes'
	ALTER INDEX ALL ON BIDoc.BasicGraphNodes  
	REBUILD ;
	ALTER INDEX ALL ON BIDoc.BasicGraphLinks
	REBUILD ;
	*/
	
	EXEC [Adm].[sp_SaveDbOperationFinishedMessage] @requestId
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelLinksUnderPathToChildrenOfTypes]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelLinksUnderPathToChildrenOfTypes]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@types BIDoc.UDTT_StringList READONLY
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elements TABLE
(
[ModelElementId] INT,
[ExtendedProperties] NVARCHAR(MAX),
[RefPath] NVARCHAR(MAX),
[Definition] NVARCHAR(MAX),
[Caption] NVARCHAR(MAX),
[Type] NVARCHAR(MAX),
[ProjectConfigId] UNIQUEIDENTIFIER
)

INSERT INTO @elements
EXEC BIDoc.sp_GetModelElementsUnderPathToChildrenOfTypesNoDef @projectConfigId, @path, @types

SELECT DISTINCT 
	   l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN /*BIDoc.f_GetModelElementsUnderPathToChildrenOfTypesNoDef(@projectConfigId, @path, @types)*/ @elements ef ON ef.ModelElementId = l.ElementFromId
  INNER JOIN /*BIDoc.f_GetModelElementsUnderPathToChildrenOfTypesNoDef(@projectConfigId, @path, @types)*/ @elements et ON et.ModelElementId = l.ElementToId
--)
GO
PRINT N'Creating Procedure [BIDoc].[sp_GetModelLinksUnderPathToChildrenOfType]...';


GO
CREATE PROCEDURE [BIDoc].[sp_GetModelLinksUnderPathToChildrenOfType]
--(
	@projectconfigid UNIQUEIDENTIFIER,
	@path NVARCHAR(MAX),
	@type NVARCHAR(200)
AS
/*
)
RETURNS TABLE AS RETURN
(
*/

DECLARE @elements TABLE
(
[ModelElementId] INT,
[ExtendedProperties] NVARCHAR(MAX),
[RefPath] NVARCHAR(MAX),
[Definition] NVARCHAR(MAX),
[Caption] NVARCHAR(MAX),
[Type] NVARCHAR(MAX),
[ProjectConfigId] UNIQUEIDENTIFIER
)

INSERT INTO @elements
EXEC BIDoc.sp_GetModelElementsUnderPathToChildrenOfTypeNoDef @projectConfigId, @path, @type

SELECT DISTINCT 
	   l.[ModelLinkId]
      ,l.[ElementFromId]
      ,l.[ElementToId]
      ,l.[Type]
      ,l.[ExtendedProperties]
  FROM [BIDoc].[ModelLinks] l
  INNER JOIN @elements ef ON ef.ModelElementId = l.ElementFromId
  INNER JOIN @elements et ON et.ModelElementId = l.ElementToId
--)
GO
PRINT N'Creating Procedure [Adm].[sp_DeleteProjectConfig]...';


GO
CREATE PROCEDURE [Adm].[sp_DeleteProjectConfig]
	@projectconfigid UNIQUEIDENTIFIER
AS

DELETE FROM Inspect.HighLevelSolutionTrees WHERE ProjectConfigId = @projectconfigid

DELETE FROM BIDoc.LineageGridHistory WHERE ProjectConfigId = @projectconfigid

DELETE fv FROM Annotate.FieldValues fv
INNER JOIN Annotate.AnnotationElements e ON e.AnnotationElementId = fv.AnnotationElementId
WHERE e.ProjectConfigId = @projectconfigid

DELETE f FROM Annotate.AnnotationViewFields f
INNER JOIN Annotate.AnnotationViews v ON f.AnnotationViewId = v.AnnotationViewId
WHERE v.ProjectConfigId = @projectconfigid

DELETE FROM Annotate.Fields WHERE ProjectConfigId = @projectconfigid

DELETE l FROM Annotate.ElementLinks l
INNER JOIN Annotate.AnnotationElements e ON l.AnnotationElementFromId = e.AnnotationElementId
WHERE e.ProjectConfigId = @projectconfigid

DELETE FROM Annotate.LinkTypes WHERE ProjectConfigId = @projectconfigid

DELETE e FROM Annotate.AnnotationElements e
WHERE e.ProjectConfigId = @projectconfigid



DELETE FROM Annotate.AnnotationViews WHERE ProjectConfigId = @projectconfigid

EXEC BIDoc.sp_ClearModel @projectconfigid

DECLARE @rc INT

SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) l FROM [BIDoc].[ModelLinks] l
INNER JOIN [BIDoc].[ModelElements] ef ON l.ElementFromId = ef.ModelElementId
INNER JOIN [BIDoc].[ModelElements] et ON l.ElementToId = et.ModelElementId
WHERE ef.ProjectConfigId = @projectconfigid --AND (ef.Type LIKE N'CD.DLS.Model.Mssql.%' OR et.Type LIKE N'CD.DLS.Model.Mssql.%')
SELECT @rc = @@ROWCOUNT
END


SET @rc = 1
WHILE @rc > 0
BEGIN
DELETE TOP (10000) FROM [BIDoc].[ModelElements] 
WHERE ProjectConfigId = @projectconfigid --AND [Type] LIKE N'CD.DLS.Model.Mssql.%'
SELECT @rc = @@ROWCOUNT
END


SET @rc = 1
WHILE @rc > 0
BEGIN
	DELETE TOP (1000) ei FROM stg.ExtractItems ei
	INNER JOIN stg.Extracts e ON ei.ExtractId = e.ExtractId
	WHERE e.ProjectConfigId = @projectconfigid

	SELECT @rc = @@ROWCOUNT
END

DELETE e FROM stg.Extracts e
WHERE e.ProjectConfigId = @projectconfigid


DELETE FROM adm.RequestMessages WHERE Project_ProjectConfigId = @projectconfigid
DELETE FROM Adm.MssqlAgentProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
DELETE FROM Adm.MssqlDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
DELETE FROM Adm.SsasDbProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
DELETE FROM Adm.SsisProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
DELETE FROM Adm.SsrsProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid
DELETE FROM Adm.PowerBiProjectComponents WHERE ProjectConfig_ProjectConfigId = @projectconfigid

DELETE FROM adm.BroadcastMessages WHERE ProjectConfigId = @projectconfigid

DELETE FROM Adm.ProjectConfigs WHERE ProjectConfigId = @projectconfigid
GO
PRINT N'Creating Permission Permission...';


GO
GRANT SELECT
    ON SCHEMA::[Adm] TO [uploader];


GO
PRINT N'Creating Permission Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[Adm] TO [uploader];


GO
PRINT N'Creating Permission Permission...';


GO
GRANT SELECT
    ON SCHEMA::[Stg] TO [uploader];


GO
PRINT N'Creating Permission Permission...';


GO
GRANT INSERT
    ON SCHEMA::[Stg] TO [uploader];


GO
PRINT N'Creating Permission Permission...';


GO
GRANT EXECUTE
    ON SCHEMA::[Stg] TO [uploader];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r .\Scripts\Fill.ProjectsConfig.Manpower.sql
--:r .\Scripts\Fill.ProjectsConfig.SO.sql
--:r .\Scripts\Fill.ProjectsConfig.Provident.sql
--:r .\Scripts\Fill.Analyst.ModelElementAttributeTypes.sql
--:r .\Scripts\Fill.Analyst.Objecst.sql

--:r .\Scripts\EnableServiceBroker.sql

--:r .\Scripts\Fill.ProjectsConfig.Test.sql
--:r .\Scripts\Fill.ProjectsConfig.NRWH.sql
TRUNCATE TABLE bidoc.modelelementtypedescriptions


INSERT INTO BIDoc.ModelElementTypeDescriptions(ElementType, TypeDescription)
VALUES
(N'CD.DLS.Model.Mssql.Db.ColumnElement', N'SQL Column'),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'SQL Database'),
(N'CD.DLS.Model.Mssql.Db.DeclareVariableElement', N'SQL Variable'),
(N'CD.DLS.Model.Mssql.Db.ForeignKeyElement', N'Foreign Key'),
(N'CD.DLS.Model.Mssql.Db.ProcedureElement', N'Stored Procedure'),
(N'CD.DLS.Model.Mssql.Db.ScalarUdfElement', N'SQL Scalar Function'),
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'SQL Server Instance'),
(N'CD.DLS.Model.Mssql.Db.SchemaElement', N'SQL Schema'),
(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', N'SQL Table'),
(N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement', N'SQL DML Source'),
(N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement', N'SQL DML Target Reference'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptElement', N'SQL Script'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultElement', N'SQL Script Result'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultColumnElement', N'SQL Script Result Column'),
(N'CD.DLS.Model.Mssql.Db.TableUdfElement', N'SQL Table Function'),
(N'CD.DLS.Model.Mssql.Db.ViewElement', N'SQL View'),
(N'CD.DLS.Model.Mssql.Db.UserDefinedTableTypeElement', N'User-Defined Table Type'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'Framework Project'),
(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', N'Calculated Cube Measure'),
(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', N'Calculated Report Measure'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement', N'Cube Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'SSAS Cube'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'SSAS Database'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement', N'DSV Column'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewElement', N'Datasource View'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewTableElement', N'DSV Table'),
(N'CD.DLS.Model.Mssql.Ssas.DegenerateMeasureGroupDimensionElement', N'Degenerate Measure Group Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement', N'Dimension Attribute'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', N'SSAS Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.DsvTableBoundPartitionElement', N'DSV Table Partition'),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyElement', N'Dimension Hierarchy'),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement', N'Dimension Hierarchy Level'),
(N'CD.DLS.Model.Mssql.Ssas.KeyColumnElement', N'SSAS Dimension Key'),
(N'CD.DLS.Model.Mssql.Ssas.ManyToManyMeasureGroupDimensionElement', N'M:N Measure Group Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement', N'MDX Fragment'),
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', N'Calculations (MDX)'),
(N'CD.DLS.Model.Mssql.Ssas.MdxStatementElement', N'MDX Statement'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupDimensionColumnBindingElement', N'Measure Group Dimension Binding'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', N'Measure Group'),
(N'CD.DLS.Model.Mssql.Ssas.NameColumnElement', N'Dimension Attribute Name Column'),
(N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement', N'SSAS Partition Column'),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', N'Cube Measure'),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement', N'SSAS Measure Group Partition Source'),
(N'CD.DLS.Model.Mssql.Ssas.QueryBoundPartitionElement', N'SSAS Query-Bound Partition'),
(N'CD.DLS.Model.Mssql.Ssas.RegularMeasureGroupDimensionElement', N'Regular Measure Group Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.RelatedAttributeElement', N'SSAS Related Attribute'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'SSAS Server Instance'),
(N'CD.DLS.Model.Mssql.Ssis.CatalogElement', N'SSIS Catalog'),
(N'CD.DLS.Model.Mssql.Ssis.ConnectionManagerElement', N'SSIS Connection Manager'),
(N'CD.DLS.Model.Mssql.Ssis.ContainerElement', N'SSIS Container'),
(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement', N'Dataflow Column'),
(N'CD.DLS.Model.Mssql.Ssis.DfComponentElement', N'Dataflow Component'),
(N'CD.DLS.Model.Mssql.Ssis.DfDataConversionElement', N'Data Conversion Component'),
(N'CD.DLS.Model.Mssql.Ssis.DfDestinationElement', N'Dataflow Destination Component'),
(N'CD.DLS.Model.Mssql.Ssis.DfInnerElement', N'SSIS Dataflow Element'),
(N'CD.DLS.Model.Mssql.Ssis.DfInputElement', N'SSIS Dataflow Input'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement', N'SSIS Lookup Column'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupElement', N'SSIS Lookup'),
(N'CD.DLS.Model.Mssql.Ssis.DfOutputElement', N'SSIS Dataflow Output'),
(N'CD.DLS.Model.Mssql.Ssis.DfPathElement', N'SSIS Dataflow Path'),
(N'CD.DLS.Model.Mssql.Ssis.DfSourceElement', N'SSIS Dataflow Source'),
(N'CD.DLS.Model.Mssql.Ssis.DfTaskElement', N'SSIS Dataflow Task'),
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageParameterAssignmentElement', N'Execute Package Parameter Assignment'),
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageTaskElement', N'Execute Package Task'),
(N'CD.DLS.Model.Mssql.Ssis.ExpressionTaskElement', N'Expression Task'),
(N'CD.DLS.Model.Mssql.Ssis.FolderElement', N'SSIS Folder'),
(N'CD.DLS.Model.Mssql.Ssis.PackageElement', N'SSIS Package'),
(N'CD.DLS.Model.Mssql.Ssis.PackageParameterElement', N'SSIS Package Parameter'),
(N'CD.DLS.Model.Mssql.Ssis.PrecedenceConstraintElement', N'Precedence Constraint'),
(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', N'SSIS Project'),
(N'CD.DLS.Model.Mssql.Ssis.ProjectParameterElement', N'Project Parameter'),
(N'CD.DLS.Model.Mssql.Ssis.ServerElement', N'SSIS Server Instance'),
(N'CD.DLS.Model.Mssql.Ssis.SqlTaskElement', N'SSIS SQL Task'),
(N'CD.DLS.Model.Mssql.Ssis.SsisExpressionFragmentElement', N'SSIS Expression Fragment'),
(N'CD.DLS.Model.Mssql.Ssis.SystemVariableElement', N'SSIS System Variable'),
(N'CD.DLS.Model.Mssql.Ssis.TaskElement', N'SSIS Task'),
(N'CD.DLS.Model.Mssql.Ssis.VariableElement', N'SSIS Variable'),
(N'CD.DLS.Model.Mssql.Ssrs.CellElement', N'SSRS Cell'),
(N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement', N'SSRS Dataset Field'),
(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'SSRS Folder'),
(N'CD.DLS.Model.Mssql.Ssrs.GaugePanelElement', N'SSRS Gauge Panel'),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyGroupElement', N'SSRS Hierarchy Group'),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyMemberElement', N'SSRS Hierarchy Member'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataElement', N'SSRS Chart Data'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataPointElement', N'Chart Data Point'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartElement', N'SSRS Chart'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartSeriesElement', N'Chart Series'),
(N'CD.DLS.Model.Mssql.Ssrs.IndicatorGaugeElement', N'Indicator Gauge'),
(N'CD.DLS.Model.Mssql.Ssrs.ParameterValueElement', N'SSRS Parameter Value'),
(N'CD.DLS.Model.Mssql.Ssrs.QueryParameterElement', N'SSRS Query Parameter'),
(N'CD.DLS.Model.Mssql.Ssrs.RectangleElement', N'SSRS Rectangle'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSetElement', N'Report Dataset'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSourceElement', N'Report Data Source'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', N'SSRS Report'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesDataSetElement', N'Report Parameter Default Values Dataset'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesStaticElement', N'Report Parameter Default Values'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterElement', N'Report Parameter'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesDataSetElement', N'Report Parameter Valid Values Dataset'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesStaticElement', N'Report Parameter Valid Values'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionBodyElement', N'Report Section Body'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionElement', N'Report Section'),
(N'CD.DLS.Model.Mssql.Ssrs.ServerElement', N'SSRS Instance'),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSetElement', N'SSRS Shared Dataset'),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSourceElement', N'SSRS Shared Dtasource'),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionElement', N'SSRS Expression'),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionFragmentElement', N'SSRS Expression Fragment'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixColumnHierarchyElement', N'Tablix Column Hierarchy'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixElement', N'Tablix'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowElement', N'Tablix Row'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowHierarchyElement', N'Tablix Row Hierarchy'),
(N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement', N'SSRS Textbox'),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOutputColumnElement', N'Set Operation Output Column'),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement', N'Set Operation Operand Column'),
(N'CD.DLS.Model.Mssql.Ssis.DbConnectionManagerElement', N'Connection Manager'),
(N'CD.DLS.Model.Mssql.Db.ForeignDbTableElement', N'SQL Table'),
(N'CD.DLS.Model.Mssql.Db.ForeignProviderSqlScriptElement', N'Unknown DB Connection Provider'),
(N'CD.DLS.Model.Mssql.Ssas.ReferencedMeasureGroupDimensionElement', N'Referenced Measure Group Dimension'),
(N'CD.DLS.Model.Mssql.Ssas.TableBoundPartitionElement', N'Table-Bound Partition'),
(N'CD.DLS.Model.Mssql.Ssas.ValueColumnElement', N'SSAS Dimension Value Column'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupOutputJoinReferenceElement', N'Lookup Column Reference'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnionAllElement', N'Union All Transformation'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement', N'SSIS Unpivot Source Reference Element'),
(N'CD.DLS.Model.Mssql.Ssis.DfMergeJoinElement', N'SSIS Merge Join'),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupColumnElement', N'Custom Rollup Column'),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupPropertiesColumnElement', N'Custom Rollup Proprties'),
(N'CD.DLS.Model.Mssql.Ssas.UnaryOperatorColumnElement', N'SSAS Unary Operator'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotElement', N'Unpivot Component'),
(N'CD.DLS.Model.Mssql.Ssis.FileConnectionManagerElement', N'File Connection Manager'),
(N'CD.DLS.Model.Mssql.Ssis.DfDerivedColumnElement', N'Derived Column Information'),
('CD.DLS.Model.Mssql.Ssis.DfColumnAggregationLinkElement', N'SSIS Aggregation Link'),

(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'Tabular Database'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDataSourceElement', N'Tabular Database Data Source'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'Tabular Database Table'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', N'Tabular Database Column'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAnnotationElement', N'Tabular Database Annotation'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAttributeHierarchyElement', N'Tabular Attribute Hierarchy'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionElement', N'Tabular Partition'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionColumnElement', N'Tabular Partition Column'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', N'Tabular Measure'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyElement', N'Tabular Hierarchy'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularRelationshipElement', N'Tabular Relationship'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPerspectiveElement', N'Tabular Perspective'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyLevelElement', N'Tabular Hierarchy Level'),

(N'CD.DLS.Model.Business.Organization.BusinessFolderElement', N'Folder'),
(N'CD.DLS.Model.Business.Organization.BusinessRootElement', N'Business Objects'),
(N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement', N'Pivot Table Template'),
(N'CD.DLS.Model.Business.Excel.PivotTableFieldElement', N'Pivot Table Field'),
(N'CD.DLS.Model.Business.Excel.PivotTableValuesFilterElement', N'Pivot Table Values Filter'),

(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement', N'Cube Dimension Attribute'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyElement', N'Cube Dimension Hierarchy'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement', N'Cube Dimension Hierarchy Level'),

(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'Power BI Tenant'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'Power BI Report'),
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'Report Page'),
(N'CD.DLS.Model.Mssql.Pbi.VisualElement', N'Power BI Report Visual'),
(N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', N'Power BI Visual Field'),
(N'CD.DLS.Model.Mssql.Pbi.ConnectionElement', N'Data Source'),
(N'CD.DLS.Model.Mssql.Pbi.PbiTableElement', N'Power BI Table'),
(N'CD.DLS.Model.Mssql.Pbi.PbiColumnElement', N'Power BI Table Column'),
(N'CD.DLS.Model.Mssql.Pbi.FilterElement', N'Filter'),

-- DAX general start

('CD.DLS.Model.Mssql.Ssas.UnknownDaxTableFunctionElement', N'DAX Table Function'),
('CD.DLS.Model.Mssql.Ssas.GeneralDaxScalarFunctionElement', N'DAX Scalar Function'),
('CD.DLS.Model.Mssql.Ssas.DaxLocalVariableElement', N'DAX Local Variable'),
('CD.DLS.Model.Mssql.Ssas.DaxLocalMeasureElement', N'DAX Local Measure'),
('CD.DLS.Model.Mssql.Ssas.DaxBinaryScalarOperationElement', N'DAX Binary Scalar Operation'),
('CD.DLS.Model.Mssql.Ssas.DaxUnaryScalarOperationElement', N'DAX Unary Scalar Operation'),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationElement', N'DAX Table Operation'),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationOutputColumnElement', N'DAX Table Operation Output Column'),
('CD.DLS.Model.Mssql.Ssas.DaxScalarOperationElement', N'DAX Scalar Operation'),
('CD.DLS.Model.Mssql.Ssas.DaxOperationArgumentElement', N'DAX Operation Argument'),
('CD.DLS.Model.Mssql.Ssas.DaxColumnReferenceElement', N'DAX Column Reference'),
('CD.DLS.Model.Mssql.Ssas.DaxTableReferenceElement', N'DAX Table Reference'),
('CD.DLS.Model.Mssql.Ssas.DaxLiteralElement', N'DAX Literal Value'),
('CD.DLS.Model.Mssql.Ssas.DaxDataFlowLinkElement', N'DAX Data Flow Link'),
('CD.DLS.Model.Mssql.Ssas.DaxScriptElement', N'DAX Script'),
('CD.DLS.Model.Mssql.Ssas.DaxFragmentElement', N'DAX Fragment'),

-- DAX general end

-- DAX functions start

('CD.DLS.Model.Mssql.Ssas.DaxCalendarFunctionElement', N'DaxCalendarFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCalendarAutoFunctionElement', N'DaxCalendarAutoFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDateFunctionElement', N'DaxDateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDateDiffFunctionElement', N'DaxDateDiffFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDateValueFunctionElement', N'DaxDateValueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDayFunctionElement', N'DaxDayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEDateFunctionElement', N'DaxEDateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEOMonthFunctionElement', N'DaxEOMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxHourFunctionElement', N'DaxHourFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxMinuteFunctionElement', N'DaxMinuteFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxMonthFunctionElement', N'DaxMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNowFunctionElement', N'DaxNowFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSecondFunctionElement', N'DaxSecondFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTimeFunctionElement', N'DaxTimeFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTimeValueFunctionElement', N'DaxTimeValueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTodayFunctionElement', N'DaxTodayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxUtcNowFunctionElement', N'DaxUtcNowFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxUtcTodayFunctionElement', N'DaxUtcTodayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxWeekDayFunctionElement', N'DaxWeekDayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxWeekNumFunctionElement', N'DaxWeekNumFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxYearFunctionElement', N'DaxYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxYearFracFunctionElement', N'DaxYearFracFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceMonthFunctionElement', N'DaxClosingBalanceMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceQuarterFunctionElement', N'DaxClosingBalanceQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceYearFunctionElement', N'DaxClosingBalanceYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDateAddFunctionElement', N'DaxDateAddFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesBetweenFunctionElement', N'DaxDatesBetweenFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesInPeriodFunctionElement', N'DaxDatesInPeriodFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesMtdFunctionElement', N'DaxDatesMtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesQtdFunctionElement', N'DaxDatesQtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesYtdFunctionElement', N'DaxDatesYtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfMonthFunctionElement', N'DaxEndOfMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfQuarterFunctionElement', N'DaxEndOfQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfYearFunctionElement', N'DaxEndOfYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFirstDateFunctionElement', N'DaxFirstDateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFirstNonBlankFunctionElement', N'DaxFirstNonBlankFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxLastDateFunctionElement', N'DaxLastDateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxLastNonBlankFunctionElement', N'DaxLastNonBlankFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNextDayFunctionElement', N'DaxNextDayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNextMonthFunctionElement', N'DaxNextMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNextQuarterFunctionElement', N'DaxNextQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNextYearFunctionElement', N'DaxNextYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceMonthFunctionElement', N'DaxOpeningBalanceMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceQuarterFunctionElement', N'DaxOpeningBalanceQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceYearFunctionElement', N'DaxOpeningBalanceYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxParallelPeriodFunctionElement', N'DaxParallelPeriodFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousDayFunctionElement', N'DaxPreviousDayFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousMonthFunctionElement', N'DaxPreviousMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousQuarterFunctionElement', N'DaxPreviousQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousYearFunctionElement', N'DaxPreviousYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSamePeriodLastYearFunctionElement', N'DaxSamePeriodLastYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfMonthFunctionElement', N'DaxStartOfMonthFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfQuarterFunctionElement', N'DaxStartOfQuarterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfYearFunctionElement', N'DaxStartOfYearFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalMtdFunctionElement', N'DaxTotalMtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalQtdFunctionElement', N'DaxTotalQtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalYtdFunctionElement', N'DaxTotalYtdFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAddMissingItemsFunctionElement', N'DaxAddMissingItemsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAllFunctionElement', N'DaxAllFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAllExceptFunctionElement', N'DaxAllExceptFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAllNoBlankRowFunctionElement', N'DaxAllNoBlankRowFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAllSelectedFunctionElement', N'DaxAllSelectedFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateFunctionElement', N'DaxCalculateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateTableFunctionElement', N'DaxCalculateTableFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCrossFilterFunctionElement', N'DaxCrossFilterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctFunctionElement', N'DaxDistinctFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEarlierFunctionElement', N'DaxEarlierFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxEarliestFunctionElement', N'DaxEarliestFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFilterFunctionElement', N'DaxFilterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFiltersFunctionElement', N'DaxFiltersFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneFilterFunctionElement', N'DaxHasOneFilterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneValueFunctionElement', N'DaxHasOneValueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsCrossFilteredFunctionElement', N'DaxIsCrossFilteredFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsFilteredFunctionElement', N'DaxIsFilteredFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxKeepFiltersFunctionElement', N'DaxKeepFiltersFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedFunctionElement', N'DaxRelatedFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedTableFunctionElement', N'DaxRelatedTableFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSelectedValueFunctionElement', N'DaxSelectedValueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSubstituteWithIndexFunctionElement', N'DaxSubstituteWithIndexFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxUseRelationshipFunctionElement', N'DaxUseRelationshipFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxValuesFunctionElement', N'DaxValuesFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxContainsFunctionElement', N'DaxContainsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCustomDataFunctionElement', N'DaxCustomDataFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsBlankFunctionElement', N'DaxIsBlankFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsErrorFunctionElement', N'DaxIsErrorFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsEvenFunctionElement', N'DaxIsEvenFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsInScopeFunctionElement', N'DaxIsInScopeFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsLogicalFunctionElement', N'DaxIsLogicalFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsNonTextFunctionElement', N'DaxIsNonTextFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsNumberFunctionElement', N'DaxIsNumberFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsOddFunctionElement', N'DaxIsOddFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsOnOrAfterFunctionElement', N'DaxIsOnOrAfterFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsTextFunctionElement', N'DaxIsTextFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxLookupValueFunctionElement', N'DaxLookupValueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxUserNameFunctionElement', N'DaxUserNameFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAndFunctionElement', N'DaxAndFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFalseFunctionElement', N'DaxFalseFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIfFunctionElement', N'DaxIfFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIfErrorFunctionElement', N'DaxIfErrorFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNotFunctionElement', N'DaxNotFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxOrFunctionElement', N'DaxOrFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSwitchFunctionElement', N'DaxSwitchFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTrueFunctionElement', N'DaxTrueFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDataTableFunctionElement', N'DaxDataTableFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxErrorFunctionElement', N'DaxErrorFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxExceptFunctionElement', N'DaxExceptFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateSeriesFunctionElement', N'DaxGenerateSeriesFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxGroupByFunctionElement', N'DaxGroupByFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIntersectFunctionElement', N'DaxIntersectFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxIsEmptyFunctionElement', N'DaxIsEmptyFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalInnerJoinFunctionElement', N'DaxNaturalInnerJoinFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalLeftOuterJoinFunctionElement', N'DaxNaturalLeftOuterJoinFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeColumnsFunctionElement', N'DaxSummarizeColumnsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxTreatAsFunctionElement', N'DaxTreatAsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxUnionFunctionElement', N'DaxUnionFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxAddColumnsFunctionElement', N'DaxAddColumnsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCrossJoinFunctionElement', N'DaxCrossJoinFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateFunctionElement', N'DaxGenerateFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateAllFunctionElement', N'DaxGenerateAllFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxRowFunctionElement', N'DaxRowFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSampleFunctionElement', N'DaxSampleFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSelectColumnsFunctionElement', N'DaxSelectColumnsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeFunctionElement', N'DaxSummarizeFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCountRowsFunctionElement', N'DaxCountRowsFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCountFunctionElement', N'DaxCountFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxCountaFunctionElement', N'DaxCountaFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctCountFunctionElement', N'DaxDistinctCountFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxSumFunctionElement', N'DaxSumFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxBlankFunctionElement', N'DaxBlankFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxFormatFunctionElement', N'DaxFormatFunction'),
('CD.DLS.Model.Mssql.Ssas.DaxRightFunctionElement', N'DaxRightFunction'),

-- DAX functions end

-- Power Query general start

('CD.DLS.Model.Mssql.PowerQuery.MFragmentElement', N'PowerQuery Fragment'),
('CD.DLS.Model.Mssql.PowerQuery.PowerQueryElement', N'PowerQuery Operation'),
('CD.DLS.Model.Mssql.PowerQuery.DataFlowLinkElement', N'PowerQuery Data Flow'),
('CD.DLS.Model.Mssql.PowerQuery.LiteralElement', N'PowerQuery Literal'),
('CD.DLS.Model.Mssql.PowerQuery.IdentifierElement', N'PowerQuery Identifier'),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemIdentifierElement', N'PowerQuery Record Item'),
('CD.DLS.Model.Mssql.PowerQuery.VariableReferenceElement', N'PowerQuery Variable Reference'),
('CD.DLS.Model.Mssql.PowerQuery.FormulaStepElement', N'PowerQuery Formula Step'),
('CD.DLS.Model.Mssql.PowerQuery.OperationArgumentElement', N'PowerQuery Operation Argument'),
('CD.DLS.Model.Mssql.PowerQuery.ListElement', N'PowerQuery Literal'),
('CD.DLS.Model.Mssql.PowerQuery.ListIndexElement', N'PowerQuery List Index'),
('CD.DLS.Model.Mssql.PowerQuery.ListAccessElement', N'PowerQuery List Access'),
('CD.DLS.Model.Mssql.PowerQuery.RecordElement', N'PowerQuery  Record'),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemElement', N'PowerQuery Record Item'),
('CD.DLS.Model.Mssql.PowerQuery.OperationElement', N'PowerQuery Operation'),
('CD.DLS.Model.Mssql.PowerQuery.SqlDatabaseOperationElement', N'PowerQuery SQL DB Access'),
('CD.DLS.Model.Mssql.PowerQuery.ScalarOperationElement', N'PowerQuery Scalar Operation'),
('CD.DLS.Model.Mssql.PowerQuery.OperationOutputColumnElement', N'PowerQuery Operation Output Column'),
('CD.DLS.Model.Mssql.PowerQuery.TableRowOperationElement', N'PowerQuery Row Operation'),
('CD.DLS.Model.Mssql.PowerQuery.TableSplitColumnOperationElement', N'PowerQuery Split Column'),
('CD.DLS.Model.Mssql.PowerQuery.TableDuplicateColumnOperationElement', N'PowerQuery Dulicate Column'),
('CD.DLS.Model.Mssql.PowerQuery.TableRemoveColumnsOperationElement', N'PowerQuery Remove Column'),
('CD.DLS.Model.Mssql.PowerQuery.TableSelectColumnsOperationElement', N'PowerQuery Select Columns'),
('CD.DLS.Model.Mssql.PowerQuery.TableRenameColumnsOperationElement', N'PowerQuery Rename Columns'),
('CD.DLS.Model.Mssql.PowerQuery.GeneralOperationElement', N'PowerQuery General Operation')

-- Power Query general end
TRUNCATE TABLE bidoc.modelelementtypedetaillevels


INSERT INTO BIDoc.ModelElementTypeDetailLevels(ElementType, DetailLevel)
VALUES
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageTaskElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesDataSetElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.ContainerElement', 1),
(N'CD.DLS.Model.Mssql.Db.DeclareVariableElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyMemberElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfInnerElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement', 1),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', 3),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowHierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Db.ScalarUdfElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.ConnectionManagerElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.CatalogElement', 3),
(N'CD.DLS.Model.Mssql.Db.ViewElement', 2),
(N'CD.DLS.Model.Mssql.Ssrs.ChartSeriesElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.TableBoundPartitionElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesStaticElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.RegularMeasureGroupDimensionElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataPointElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.SsisExpressionFragmentElement', 1),
(N'CD.DLS.Model.Mssql.Db.ColumnElement', 1),
(N'CD.DLS.Model.Mssql.SolutionModelElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.DsvTableBoundPartitionElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement', 1),
(N'CD.DLS.Model.Mssql.Db.ForeignProviderSqlScriptElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfComponentElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.VariableElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.QueryParameterElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ServerElement', 3),
(N'CD.DLS.Model.Mssql.Ssrs.GaugePanelElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfInputElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSourceElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.QueryBoundPartitionElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ParameterValueElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.FolderElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.MdxStatementElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.CellElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', 3),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionBodyElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewTableElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfSourceElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlScriptElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', 3),
(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', 2),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyGroupElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement', 2),
(N'CD.DLS.Model.Mssql.Ssas.NameColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.TablixColumnHierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.TaskElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.RectangleElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', 2),
(N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.ExpressionTaskElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSetElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupDimensionColumnBindingElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfDestinationElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.RelatedAttributeElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfUnionAllElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.ValueColumnElement', 1),
(N'CD.DLS.Model.Mssql.Db.ForeignKeyElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.PackageParameterElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfOutputElement', 1),
(N'CD.DLS.Model.Mssql.Db.ForeignDbTableElement', 2),
(N'CD.DLS.Model.Mssql.Ssrs.ChartElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupOutputJoinReferenceElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.PrecedenceConstraintElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.KeyColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.IndicatorGaugeElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', 3),
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageParameterAssignmentElement', 1),
(N'CD.DLS.Model.Mssql.Db.SchemaElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfTaskElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', 2),
(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', 1),
(N'CD.DLS.Model.Mssql.Db.ProcedureElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.PackageElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DbConnectionManagerElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionFragmentElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.ProjectParameterElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfDataConversionElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSourceElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.SystemVariableElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesStaticElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.SqlTaskElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.ServerElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesDataSetElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.TablixElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.ManyToManyMeasureGroupDimensionElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfPathElement', 1),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionElement', 1),
(N'CD.DLS.Model.Mssql.Db.ServerElement', 3),
(N'CD.DLS.Model.Mssql.Ssas.DegenerateMeasureGroupDimensionElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.ReferencedMeasureGroupDimensionElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOutputColumnElement', 1),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement', 1),
(N'CD.DLS.Model.Mssql.Db.TableUdfElement', 2),
(N'CD.DLS.Model.Mssql.Db.UserDefinedTableTypeElement', 2),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSetElement', 2),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfMergeJoinElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupPropertiesColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.UnaryOperatorColumnElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.FileConnectionManagerElement', 1),
(N'CD.DLS.Model.Mssql.Ssis.DfDerivedColumnElement', 1),
('CD.DLS.Model.Mssql.Ssis.DfColumnAggregationLinkElement', 1),

(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', 3),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDataSourceElement', 2),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', 2),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAnnotationElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAttributeHierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionColumnElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularRelationshipElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPerspectiveElement', 1),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyLevelElement',1),

(N'CD.DLS.Model.Business.Organization.BusinessFolderElement', 3),
(N'CD.DLS.Model.Business.Organization.BusinessRootElement', 3),
(N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement', 2),
(N'CD.DLS.Model.Business.Excel.PivotTableFieldElement', 1),
(N'CD.DLS.Model.Business.Excel.PivotTableValuesFilterElement', 1),

(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyElement', 1),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement', 1),

(N'CD.DLS.Model.Mssql.Pbi.TenantElement', 3),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', 2),
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement',1),
(N'CD.DLS.Model.Mssql.Pbi.VisualElement', 1),
(N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', 1),
(N'CD.DLS.Model.Mssql.Pbi.ConnectionElement', 1),
(N'CD.DLS.Model.Mssql.Pbi.PbiTableElement', 1),
(N'CD.DLS.Model.Mssql.Pbi.PbiColumnElement', 1),
(N'CD.DLS.Model.Mssql.Pbi.FilterElement', 1),


-- DAX general start

('CD.DLS.Model.Mssql.Ssas.UnknownDaxTableFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.GeneralDaxScalarFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLocalVariableElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLocalMeasureElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxBinaryScalarOperationElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUnaryScalarOperationElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationOutputColumnElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxScalarOperationElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxOperationArgumentElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxColumnReferenceElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTableReferenceElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLiteralElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDataFlowLinkElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxScriptElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFragmentElement', 1),

-- DAX general end

-- DAX functions start

('CD.DLS.Model.Mssql.Ssas.DaxCalendarFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCalendarAutoFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDateDiffFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDateValueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEDateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEOMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxHourFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxMinuteFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNowFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSecondFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTimeFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTimeValueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTodayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUtcNowFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUtcTodayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxWeekDayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxWeekNumFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxYearFracFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDateAddFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDatesBetweenFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDatesInPeriodFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDatesMtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDatesQtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDatesYtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFirstDateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFirstNonBlankFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLastDateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLastNonBlankFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNextDayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNextMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNextQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNextYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxParallelPeriodFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousDayFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSamePeriodLastYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfMonthFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfQuarterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfYearFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTotalMtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTotalQtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTotalYtdFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAddMissingItemsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAllFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAllExceptFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAllNoBlankRowFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAllSelectedFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateTableFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCrossFilterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEarlierFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxEarliestFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFilterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFiltersFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneFilterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneValueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsCrossFilteredFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsFilteredFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxKeepFiltersFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedTableFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSelectedValueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSubstituteWithIndexFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUseRelationshipFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxValuesFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxContainsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCustomDataFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsBlankFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsErrorFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsEvenFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsInScopeFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsLogicalFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsNonTextFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsNumberFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsOddFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsOnOrAfterFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsTextFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxLookupValueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUserNameFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAndFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFalseFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIfFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIfErrorFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNotFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxOrFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSwitchFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTrueFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDataTableFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxErrorFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxExceptFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateSeriesFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxGroupByFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIntersectFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxIsEmptyFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalInnerJoinFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalLeftOuterJoinFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeColumnsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxTreatAsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxUnionFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxAddColumnsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCrossJoinFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateAllFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxRowFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSampleFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSelectColumnsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCountRowsFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCountFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxCountaFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctCountFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxSumFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxBlankFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxFormatFunctionElement', 1),
('CD.DLS.Model.Mssql.Ssas.DaxRightFunctionElement', 1),

-- DAX functions end

-- Power Query general start

('CD.DLS.Model.Mssql.PowerQuery.MFragmentElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.PowerQueryElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.DataFlowLinkElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.LiteralElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.IdentifierElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemIdentifierElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.VariableReferenceElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.FormulaStepElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.OperationArgumentElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.ListElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.ListIndexElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.ListAccessElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.RecordElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.OperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.SqlDatabaseOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.ScalarOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.OperationOutputColumnElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableRowOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableSplitColumnOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableDuplicateColumnOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableRemoveColumnsOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableSelectColumnsOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.TableRenameColumnsOperationElement', 1),
('CD.DLS.Model.Mssql.PowerQuery.GeneralOperationElement', 1)

-- Power Query general end




TRUNCATE TABLE bidoc.modelelementtypeclasses


INSERT INTO BIDoc.ModelElementTypeClasses(ElementType, ClassCode)
VALUES
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageTaskElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesDataSetElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.ContainerElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.DeclareVariableElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyMemberElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfInnerElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowHierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.ScalarUdfElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.ConnectionManagerElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.CatalogElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.ViewElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartSeriesElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.TableBoundPartitionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesStaticElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.RegularMeasureGroupDimensionElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataPointElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.SsisExpressionFragmentElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.ColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.DsvTableBoundPartitionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.ForeignProviderSqlScriptElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfComponentElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.VariableElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.QueryParameterElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ServerElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.GaugePanelElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfInputElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSourceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.QueryBoundPartitionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ParameterValueElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.FolderElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.MdxStatementElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.CellElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionBodyElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewTableElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfSourceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixRowElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.SqlScriptResultColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.HierarchyGroupElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.NameColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixColumnHierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.TaskElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.RectangleElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.ExpressionTaskElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportDataSetElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupDimensionColumnBindingElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartDataElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfDestinationElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.RelatedAttributeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnionAllElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.ValueColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.ForeignKeyElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.PackageParameterElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfOutputElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.ForeignDbTableElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ChartElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupOutputJoinReferenceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.PrecedenceConstraintElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.KeyColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.IndicatorGaugeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.ExecutePackageParameterAssignmentElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SchemaElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfTaskElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.ProcedureElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.PackageElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DbConnectionManagerElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfLookupElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionFragmentElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.ProjectParameterElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfDataConversionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSourceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.SystemVariableElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesStaticElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.SqlTaskElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.ServerElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesDataSetElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.TablixElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.ManyToManyMeasureGroupDimensionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfPathElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportSectionElement', N'F'),
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.DegenerateMeasureGroupDimensionElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.ReferencedMeasureGroupDimensionElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOutputColumnElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.TableUdfElement', N'T'),
(N'CD.DLS.Model.Mssql.Db.UserDefinedTableTypeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssrs.SharedDataSetElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfMergeJoinElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.CustomRollupPropertiesColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.UnaryOperatorColumnElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotElement', N'T'),
(N'CD.DLS.Model.Mssql.Ssis.FileConnectionManagerElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssis.DfDerivedColumnElement', N'T'),
('CD.DLS.Model.Mssql.Ssis.DfColumnAggregationLinkElement', N'T'),

/*
(N'CD.DLS.Model.Mssql.Tabular.TabularModelElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularDatabase', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularModel', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularDataSource', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularTable', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularTableColumn', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedTabularAnnotation', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedAttributeHierarchy', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedPartition', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedMeasure', N'T'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedHierarchy', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedRelationship', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedPerspective', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.ParsedHierarchyLevel', N'F'),
*/

(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDataSourceElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAnnotationElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularAttributeHierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPartitionColumnElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularRelationshipElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularPerspectiveElement', N'F'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyLevelElement', N'F'),

(N'CD.DLS.Model.Business.Organization.BusinessFolderElement', N'F'),
(N'CD.DLS.Model.Business.Organization.BusinessRootElement', N'F'),
(N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement', N'F'),
(N'CD.DLS.Model.Business.Excel.PivotTableFieldElement', N'F'),
(N'CD.DLS.Model.Business.Excel.PivotTableValuesFilterElement', N'F'),

(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionAttributeElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyElement', N'F'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionHierarchyLevelElement', N'F'),

(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'F'),
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'F'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'F'),


-- DAX general start

('CD.DLS.Model.Mssql.Ssas.UnknownDaxTableFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.GeneralDaxScalarFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLocalVariableElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLocalMeasureElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxBinaryScalarOperationElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUnaryScalarOperationElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTableOperationOutputColumnElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxScalarOperationElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxOperationArgumentElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxColumnReferenceElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTableReferenceElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLiteralElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDataFlowLinkElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxScriptElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFragmentElement', N'T'),

-- DAX general end

-- DAX functions start

('CD.DLS.Model.Mssql.Ssas.DaxCalendarFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCalendarAutoFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDateDiffFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDateValueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEDateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEOMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxHourFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxMinuteFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNowFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSecondFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTimeFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTimeValueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTodayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUtcNowFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUtcTodayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxWeekDayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxWeekNumFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxYearFracFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxClosingBalanceYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDateAddFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesBetweenFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesInPeriodFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesMtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesQtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDatesYtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEndOfYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFirstDateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFirstNonBlankFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLastDateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLastNonBlankFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNextDayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNextMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNextQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNextYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxOpeningBalanceYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxParallelPeriodFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousDayFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxPreviousYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSamePeriodLastYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfMonthFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfQuarterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxStartOfYearFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalMtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalQtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTotalYtdFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAddMissingItemsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAllFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAllExceptFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAllNoBlankRowFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAllSelectedFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCalculateTableFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCrossFilterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEarlierFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxEarliestFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFilterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFiltersFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneFilterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxHasOneValueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsCrossFilteredFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsFilteredFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxKeepFiltersFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxRelatedTableFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSelectedValueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSubstituteWithIndexFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUseRelationshipFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxValuesFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxContainsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCustomDataFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsBlankFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsErrorFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsEvenFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsInScopeFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsLogicalFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsNonTextFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsNumberFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsOddFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsOnOrAfterFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsTextFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxLookupValueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUserNameFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAndFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFalseFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIfFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIfErrorFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNotFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxOrFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSwitchFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTrueFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDataTableFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxErrorFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxExceptFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateSeriesFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxGroupByFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIntersectFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxIsEmptyFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalInnerJoinFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxNaturalLeftOuterJoinFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeColumnsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxTreatAsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxUnionFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxAddColumnsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCrossJoinFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxGenerateAllFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxRowFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSampleFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSelectColumnsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSummarizeFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCountRowsFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCountFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxCountaFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxDistinctCountFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxSumFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxBlankFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxFormatFunctionElement', N'T'),
('CD.DLS.Model.Mssql.Ssas.DaxRightFunctionElement', N'T'),

-- DAX functions end


-- Power Query general start

('CD.DLS.Model.Mssql.PowerQuery.MFragmentElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.PowerQueryElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.DataFlowLinkElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.LiteralElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.IdentifierElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemIdentifierElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.VariableReferenceElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.FormulaStepElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.OperationArgumentElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.ListElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.ListIndexElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.ListAccessElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.RecordElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.RecordItemElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.OperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.SqlDatabaseOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.ScalarOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.OperationOutputColumnElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableRowOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableSplitColumnOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableDuplicateColumnOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableRemoveColumnsOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableSelectColumnsOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.TableRenameColumnsOperationElement', N'T'),
('CD.DLS.Model.Mssql.PowerQuery.GeneralOperationElement', N'T')

-- Power Query general end

GO

DECLARE @receiverId UNIQUEIDENTIFIER = N'287E123F-6DC6-4EAB-8F95-14E42B25F1D6'

IF NOT EXISTS(SELECT 1 FROM adm.GlobalConfig WHERE [Key] = N'SVC_RUNCONSOLE')
BEGIN
	INSERT INTO adm.GlobalConfig([Key], [Value])
	VALUES(N'SVC_RUNCONSOLE', N'False')
END

IF NOT EXISTS(SELECT 1 FROM adm.GlobalConfig WHERE [Key] = N'SVC_INSTANCE_ID')
BEGIN
	INSERT INTO adm.GlobalConfig([Key], [Value])
	VALUES(N'SVC_INSTANCE_ID', @receiverId)
END

GO
DELETE [BIDoc].[SourceDataTypes]
DELETE [BIDoc].[DataTypes]

INSERT INTO BIDoc.DataTypes
(
	[DataTypeName]
)
VALUES (N'String'),
(N'Integer'),
(N'Boolean'),
(N'Character'),
(N'Date'),
(N'Floating-point number'),
(N'Fixed-point number'),
(N'Unknown'),
(N'Image'),
(N'Binary'),
(N'Text');

INSERT INTO [BIDoc].[SourceDataTypes]
(
	[SourceName],
	[SourceDataTypeName],
	[DataTypeId]
)
VALUES ('MS SQL', 'None', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'BigInt', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'Binary', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Binary')),
('MS SQL', 'Bit', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'Char', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Character')),
('MS SQL', 'DateTime', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'Decimal', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('MS SQL', 'Float', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Floating-point number')),
('MS SQL', 'Image', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Image')),
('MS SQL', 'Int', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'Money', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('MS SQL', 'Nchar', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Character')),
('MS SQL', 'Ntext', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'String')),
('MS SQL', 'NVarChar', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Character')),
('MS SQL', 'NVarCharMax', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Text')),
('MS SQL', 'Real', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Floating-point number')),
('MS SQL', 'SmallDateTime', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'SmallInt', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'SmallMoney', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('MS SQL', 'Text', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Text')),
('MS SQL', 'Timestamp', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'TinyInt', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'UniqueIdentifier', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'UserDefinedDataType', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'UserDefinedType', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'VarBinary', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Binary')),
('MS SQL', 'VarBinaryMax', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Binary')),
('MS SQL', 'VarChar', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'String')),
('MS SQL', 'VarCharMax', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Text')),
('MS SQL', 'Variant', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'Xml', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'SysName', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'String')),
('MS SQL', 'Numeric', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('MS SQL', 'Date', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'Time', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'DateTimeOffset', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'DateTime2 ', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('MS SQL', 'UserDefinedTableType', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'HierarchyId', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('MS SQL', 'Geometry', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('MS SQL', 'Geography', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Unknown')),
('SSIS', 'DT_BOOL', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Boolean')),
('SSIS', 'DT_BYTES', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Binary')),
('SSIS', 'DT_CY', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_DATE', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBDATE', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBTIME', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBTIME2', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBTIMESTAMP', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBTIMESTAMP2', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DBTIMESTAMPOFFSET', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_DECIMAL', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('SSIS', 'DT_FILETIME', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Date')),
('SSIS', 'DT_GUID', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_I1', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_I2', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_I4', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_I8', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_NUMERIC', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Fixed-point number')),
('SSIS', 'DT_R4', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Floating-point number')),
('SSIS', 'DT_R8', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Floating-point number')),
('SSIS', 'DT_STR', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'String')),
('SSIS', 'DT_UI1', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_UI2', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_UI4', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_UI8', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Integer')),
('SSIS', 'DT_WSTR', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'String')),
('SSIS', 'DT_IMAGE', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Image')),
('SSIS', 'DT_NTEXT', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Text')),
('SSIS', 'DT_TEXT', (SELECT DataTypesId FROM [BIDoc].[DataTypes] WHERE DataTypeName = 'Text'));
GO
CREATE TABLE #DataMessageData
(
[Message] NVARCHAR(30),
[Code] NVARCHAR(10)
)
INSERT INTO #DataMessageData
(
	[Message],
	[Code]
)
VALUES ('Truncation may occur', 'Truncat');

MERGE BIDoc.DataMessagesType  AS t 
USING #DataMessageData AS s
ON t.[DataMessageType] = s.[Message] AND t.[DataMessageCode] = s.[Code]
WHEN NOT MATCHED THEN INSERT([DataMessageType],[DataMessageCode])
VALUES(
[Message],
[Code]
)
WHEN MATCHED THEN UPDATE SET t.[DataMessageType] = s.[Message], t.[DataMessageCode] = s.[Code];
TRUNCATE TABLE [Search].[TypeChildTypes]
GO

INSERT INTO [Search].[TypeChildTypes]
([ParentType], [ChildType])
SELECT map.ParentType, map.ChildType
FROM   (VALUES
	(NULL, N'CD.DLS.Model.Mssql.Ssrs.ReportElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssis.PackageElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssis.ProjectElement'),
	(NULL, N'CD.DLS.Model.Mssql.Db.ViewElement'),
	(NULL, N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
	(NULL, N'CD.DLS.Model.Mssql.Db.ProcedureElement'),
	(NULL, N'CD.DLS.Model.Mssql.Db.ColumnElement'),
	(NULL, N'CD.DLS.Model.Mssql.Db.DatabaseElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
	--(NULL, N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.DimensionElement'),
	(NULL, N'CD.DLS.Model.Mssql.Ssas.CubeElement'),
	(NULL, N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement'),

	(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.ReportElement'),
	(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement'),
	(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.VisualElement'),
	
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.ColumnElement'),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.ProcedureElement'),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.ViewElement'),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.DatabaseElement'),
	
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.DimensionElement'),
	(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.CubeElement'),

	(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement'),
	(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement'),
	(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement'),
	
	(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement'),
	(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', N'CD.DLS.Model.Mssql.Ssis.ProjectElement'),
	
	(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'CD.DLS.Model.Mssql.Ssrs.ReportElement'),
	(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement'),

	(N'CD.DLS.Model.Business.Organization.BusinessRootElement', N'CD.DLS.Model.Business.Excel.PivotTableTemplateElement')
	) map(ParentType, ChildType)
LEFT JOIN [Search].[TypeChildTypes] ex ON ISNULL(ex.ParentType, N'') = ISNULL(map.ParentType, N'') AND ex.ChildType = map.ChildType
WHERE ex.ChildType IS NULL
TRUNCATE TABLE Search.BusinessDictionarySupportedTypes

INSERT INTO Search.BusinessDictionarySupportedTypes
VALUES 
	(N'CD.DLS.Model.Mssql.Ssrs.ReportElement'),	
	(N'CD.DLS.Model.Mssql.Ssis.PackageElement'),
	(N'CD.DLS.Model.Mssql.Ssas.CubeElement'),
	(N'CD.DLS.Model.Mssql.Db.DatabaseElement'),
	(N'CD.DLS.Model.Mssql.Ssis.ProjectElement'),
	(N'CD.DLS.Model.Mssql.Ssas.DimensionElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement'),
	(N'CD.DLS.Model.Mssql.Db.ViewElement'),
	(N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement'),
	(N'CD.DLS.Model.Mssql.Db.ProcedureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement'),
	(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
	(N'CD.DLS.Model.Mssql.Db.ColumnElement')

--:r .\Scripts\Fill.CreateDataFlowSequences.sql

INSERT INTO [Adm].[Roles]
([RoleName])
SELECT roles.RoleName
FROM   (VALUES
	--(N'ProjectCreator'),	-- system
	(N'CustomerUser'),	-- system; the role gained by assignment to AAD group corresponding to the customer
	--(N'ProjectAdmin'),	-- project
	(N'CustomerAdmin')		-- system
	) roles(RoleName)
LEFT JOIN [Adm].[Roles] ex ON ex.RoleName = roles.RoleName
WHERE ex.RoleId IS NULL


INSERT INTO [Adm].[Permissions]
([PermissionName])
SELECT perms.PermissionName
FROM   (VALUES
	--(N'CreateProject'),
	(N'ManageProject'),
	(N'ViewLineage'),
	(N'UpdateLineage'),
	(N'ViewAnnotations'),
	(N'EditAnnotations'),
	(N'EditPermissions')
	) perms(PermissionName)
LEFT JOIN [Adm].[Permissions] ex ON ex.PermissionName = perms.PermissionName
WHERE ex.PermissionId IS NULL

INSERT INTO [Adm].[RolePermissions]([RoleId], [PermissionId])
SELECT r.RoleId, p.PermissionId FROM
(VALUES
	(N'CustomerUser', N'ViewLineage'),
	(N'CustomerUser', N'ViewAnnotations'),
	(N'CustomerUser', N'EditAnnotations'),

	--(N'CustomerAdmin', N'CreateProject'),
	(N'CustomerAdmin', N'ManageProject'),
	(N'CustomerAdmin', N'ViewLineage'),
	(N'CustomerAdmin', N'UpdateLineage'),
	(N'CustomerAdmin', N'ViewAnnotations'),
	(N'CustomerAdmin', N'EditAnnotations'),
	(N'CustomerAdmin', N'EditPermissions')
	--,
	--(N'ProjectAdmin', N'ManageProject'),
	--(N'ProjectAdmin', N'ViewLineage'),
	--(N'ProjectAdmin', N'UpdateLineage'),
	--(N'ProjectAdmin', N'ViewAnnotations'),
	--(N'ProjectAdmin', N'EditAnnotations')
	) perms(RoleName, PermissionName)
INNER JOIN adm.Roles r ON r.RoleName = perms.RoleName
INNER JOIN adm.Permissions p ON p.PermissionName = perms.PermissionName
LEFT JOIN adm.RolePermissions rp ON rp.PermissionId = p.PermissionId AND rp.RoleId = r.RoleId
WHERE r.ProjectConfigId IS NULL AND rp.RolePermissionId IS NULL

TRUNCATE TABLE [BIDoc].[HighLevelTypeDescendants]

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssrs.ReportElement',N'ReportElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement',N'TextBoxElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.CubeElement',N'CubeElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.DimensionElement',N'DimensionElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',N'DimensionAttributeElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',N'MdxScriptElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Db.DatabaseElement',N'DatabaseElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Db.ViewElement',N'ViewElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement',N'SchemaTableElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',N'MeasureGroupElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',N'PhysicalMeasureElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Pbi.TenantElement',N'TenantElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'ReportElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'ReportSectionElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Pbi.VisualElement', N'VisualElement'),
(N'CD.DLS.Model.Mssql.SolutionModelElement', N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', N'ProjectionElement')


INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'CD.DLS.Model.Mssql.Db.DatabaseElement',N'DatabaseElement'),
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'CD.DLS.Model.Mssql.Db.ViewElement',N'ViewElement'),
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement',N'SchemaTableElement'),
(N'CD.DLS.Model.Mssql.Db.ServerElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement')



INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssis.ServerElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.CubeElement',N'CubeElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.DimensionElement',N'DimensionElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',N'DimensionAttributeElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',N'MdxScriptElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',N'MeasureGroupElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',N'PhysicalMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', N'SsasTabularTableColumnElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'SsasTabularTableElement'),
(N'CD.DLS.Model.Mssql.Ssas.ServerElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', N'SsasTabularMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssrs.ServerElement', N'CD.DLS.Model.Mssql.Ssrs.ReportElement',N'ReportElement'),
(N'CD.DLS.Model.Mssql.Ssrs.ServerElement', N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement',N'TextBoxElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.DatabaseElement',N'DatabaseElement'),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.ViewElement',N'ViewElement'),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement',N'SchemaTableElement'),
(N'CD.DLS.Model.Mssql.Db.DatabaseElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.CubeElement',N'CubeElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.DimensionElement',N'DimensionElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',N'DimensionAttributeElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',N'MdxScriptElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',N'MeasureGroupElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',N'PhysicalMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.SsasMultidimensionalDatabaseElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'CD.DLS.Model.Mssql.Ssrs.ReportElement',N'ReportElement'),
(N'CD.DLS.Model.Mssql.Ssrs.FolderElement', N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement',N'TextBoxElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssis.ProjectElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssis.FolderElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssis.CatalogElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.SchemaElement', N'CD.DLS.Model.Mssql.Db.ViewElement',N'ViewElement'),
(N'CD.DLS.Model.Mssql.Db.SchemaElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement',N'SchemaTableElement'),
(N'CD.DLS.Model.Mssql.Db.SchemaElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', N'CD.DLS.Model.Mssql.Ssrs.ReportElement',N'ReportElement'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportElement', N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement',N'TextBoxElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssis.PackageElement', N'CD.DLS.Model.Mssql.Ssis.PackageElement',N'PackageElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.CubeElement',N'CubeElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',N'MdxScriptElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement',N'MeasureGroupElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',N'PhysicalMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', N'CD.DLS.Model.Mssql.Ssas.DimensionElement',N'DimensionElement'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement', N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement',N'DimensionAttributeElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement',N'MdxScriptElement'),
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.ViewElement', N'CD.DLS.Model.Mssql.Db.ViewElement',N'ViewElement'),
(N'CD.DLS.Model.Mssql.Db.ViewElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', N'CD.DLS.Model.Mssql.Db.SchemaTableElement',N'SchemaTableElement'),
(N'CD.DLS.Model.Mssql.Db.SchemaTableElement', N'CD.DLS.Model.Mssql.Db.ColumnElement',N'ColumnElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement',N'PhysicalMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement',N'CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement', N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement',N'ReportCalculatedMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Db.ProcedureElement', N'CD.DLS.Model.Mssql.Db.ProcedureElement',N'ProcedureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', N'SsasTabularTableColumnElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'SsasTabularTableElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularDatabaseElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', N'SsasTabularMeasureElement')


INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement', N'SsasTabularTableColumnElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'SsasTabularTableElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableElement', N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement', N'SsasTabularMeasureElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'ReportElement'),
(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'ReportSectionElement'),
(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.VisualElement', N'VisualElement'),
(N'CD.DLS.Model.Mssql.Pbi.TenantElement', N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', N'ProjectionElement')


INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'ReportSectionElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'ReportElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'CD.DLS.Model.Mssql.Pbi.VisualElement', N'VisualElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', N'ProjectionElement')

--(N'CD.DLS.Model.Mssql.Pbi.ReportElement', N'CD.DLS.Model.Mssql.Pbi.ConnectionElement', N'ConnectionElement')

--INSERT INTO [BIDoc].[HighLevelTypeDescendants]
--([ParentType], [DescendantType], [NodeType])
--VALUES
--(N'CD.DLS.Model.Mssql.Pbi.ConnectionElement', N'CD.DLS.Model.Mssql.Pbi.PbiTableElement', N'TableElement')

INSERT INTO [BIDoc].[HighLevelTypeDescendants]
([ParentType], [DescendantType], [NodeType])
VALUES
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'ReportSectionElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'CD.DLS.Model.Mssql.Pbi.VisualElement', N'VisualElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportSectionElement', N'CD.DLS.Model.Mssql.Pbi.ProjectionElement', N'ProjectionElement')

TRUNCATE TABLE [BIDoc].[SequenceEndpointTypes]

INSERT INTO [BIDoc].[SequenceEndpointTypes]([TypeName])
VALUES

	--(N'CD.DLS.Model.Mssql.Ssrs.ReportElement'),
	--(N'CD.DLS.Model.Mssql.Ssrs.TextBoxElement'),
	--(N'CD.DLS.Model.Mssql.Ssis.PackageElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.CubeElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.DimensionElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.MdxScriptElement'),
	--(N'CD.DLS.Model.Mssql.Db.DatabaseElement'),
	--(N'CD.DLS.Model.Mssql.Db.ViewElement'),
	--(N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
	--(N'CD.DLS.Model.Mssql.Db.ColumnElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.MeasureGroupElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.CalculatedMeasureElement'),
	--(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement'),

(N'CD.DLS.Model.Mssql.Db.ColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.DeclareVariableElement'),
--(N'CD.DLS.Model.Mssql.Db.ForeignDbTableElement'),
--(N'CD.DLS.Model.Mssql.Db.ProcedureElement'),
--(N'CD.DLS.Model.Mssql.Db.ScalarUdfElement'),
--(N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOutputColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlScriptElement'),
--(N'CD.DLS.Model.Mssql.Db.TableUdfElement'),
--(N'CD.DLS.Model.Mssql.Db.ViewElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.ReportCalculatedMeasureElement'),
(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement'),
--(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewTableElement'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
(N'CD.DLS.Model.Mssql.Ssas.DimensionElement'),
(N'CD.DLS.Model.Mssql.Ssas.HierarchyElement'),
--(N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement'),
(N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement'),
--(N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement'),
(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
--(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement'),
--(N'CD.DLS.Model.Mssql.Ssis.ConnectionManagerElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DbConnectionManagerElement'),
(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement'),
--(N'CD.DLS.Model.Mssql.Ssis.FileConnectionManagerElement'),
(N'CD.DLS.Model.Mssql.Ssis.PackageParameterElement'),
--(N'CD.DLS.Model.Mssql.Ssis.SystemVariableElement'),
--(N'CD.DLS.Model.Mssql.Ssis.VariableElement'),
--(N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement'),
(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterElement'),

--(N'CD.DLS.Model.Mssql.Db.ColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.SchemaTableElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlDmlSourceElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlDmlTargetReferenceElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOperandColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlNAryOperationOutputColumnElement'),
--(N'CD.DLS.Model.Mssql.Db.SqlScriptElement'),
--(N'CD.DLS.Model.Mssql.Ssas.CubeDimensionElement'),
--(N'CD.DLS.Model.Mssql.Ssas.DatasourceViewColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssas.DimensionAttributeElement'),
--(N'CD.DLS.Model.Mssql.Ssas.HierarchyLevelElement'),
(N'CD.DLS.Model.Mssql.Ssas.KeyColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssas.MdxFragmentElement'),
(N'CD.DLS.Model.Mssql.Ssas.NameColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssas.PartitionColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasureElement'),
--(N'CD.DLS.Model.Mssql.Ssas.PhysicalMeasurePartitionSourceElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DfColumnElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DfLookupColumnElement'),
(N'CD.DLS.Model.Mssql.Ssis.DfSourceElement'),
--(N'CD.DLS.Model.Mssql.Ssis.DfUnpivotSourceReferenceElement'),
(N'CD.DLS.Model.Mssql.Ssrs.DataSetFieldElement'),
--(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterDefaultValuesDataSetElement'),
--(N'CD.DLS.Model.Mssql.Ssrs.ReportParameterValidValuesDataSetElement'),
(N'CD.DLS.Model.Mssql.Ssrs.SsrsExpressionFragmentElement'),

(N'CD.DLS.Model.Mssql.Tabular.SsasTabularTableColumnElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularMeasureElement'),
(N'CD.DLS.Model.Mssql.Tabular.SsasTabularHierarchyLevelElement'),

(N'CD.DLS.Model.Mssql.Pbi.ProjectionElement'),
(N'CD.DLS.Model.Mssql.Pbi.VisualElement'),
(N'CD.DLS.Model.Mssql.Pbi.ReportElement')





TRUNCATE TABLE Annotate.AnnotationElementTypeDescriptions


INSERT INTO Annotate.AnnotationElementTypeDescriptions(ElementType, TypeDescription)
VALUES
(N'CD.DLS.Annotate.Excel.PivotTableTemplateElement', N'Pivot Table Template')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Adm].[RequestMessages] WITH CHECK CHECK CONSTRAINT [FK_Adm_RequestMessages_Adm_ProjectConfigs_Project_ProjectConfigId];

ALTER TABLE [Adm].[SsrsProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_SsrsProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Adm].[SsasDbProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_SsasDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Adm].[SsisProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_SsisProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Adm].[MssqlAgentProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_MssqlAgentProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Adm].[MssqlDbProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_MssqlDbProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Adm].[RolePermissions] WITH CHECK CHECK CONSTRAINT [FK_Adm_RolePermissions_Permission];

ALTER TABLE [Adm].[RolePermissions] WITH CHECK CHECK CONSTRAINT [FK_Adm_UserPermissions_Role];

ALTER TABLE [Adm].[UserRoles] WITH CHECK CHECK CONSTRAINT [FK_Adm_UserRoles_User];

ALTER TABLE [Adm].[UserRoles] WITH CHECK CHECK CONSTRAINT [FK_Adm_UserRoles_Role];

ALTER TABLE [Adm].[BroadcastMessages] WITH CHECK CHECK CONSTRAINT [FK_Adm_BroadcastMessages_Adm_ProjectConfigs_ProjectConfigId];

ALTER TABLE [Adm].[UserActionLog] WITH CHECK CHECK CONSTRAINT [FK_Adm_UserActionLog_UserId];

ALTER TABLE [Adm].[PowerBiProjectComponents] WITH CHECK CHECK CONSTRAINT [FK_Adm_PowerBiProjectComponents_Adm_ProjectConfigs_ProjectConfig_ProjectConfigId];

ALTER TABLE [Analyst].[ModelElementAttributes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementAttributess_ModelElementId];

ALTER TABLE [Analyst].[ModelElementAttributes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementAttributes_ModelElementTypeAttributeId];

ALTER TABLE [Analyst].[ModelElementAttributes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementAttributes_ObjectId];

ALTER TABLE [Analyst].[ModelElementTypeAttributes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementTypeAttributes_ModelElementTypeId];

ALTER TABLE [Analyst].[ModelElementTypeAttributes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementTypeAttributes_ModelElementAttributeTypeId];

ALTER TABLE [Analyst].[Objects] WITH CHECK CHECK CONSTRAINT [FK_Analyst_Object_Author];

ALTER TABLE [Analyst].[Objects] WITH CHECK CHECK CONSTRAINT [FK_Analyst_Object_PreviousVersion];

ALTER TABLE [Analyst].[ModelLinkTypes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinkTypes_ProjectConfigId];

ALTER TABLE [Analyst].[ModelElementTypes] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElementTypes_ProjectConfigId];

ALTER TABLE [Analyst].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinks_ElementFromId];

ALTER TABLE [Analyst].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinks_ElementToId];

ALTER TABLE [Analyst].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinks_ModelLinkTypeId];

ALTER TABLE [Analyst].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinks_ModelElementTypeAttributeId];

ALTER TABLE [Analyst].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelLinks_ObjectId];

ALTER TABLE [Analyst].[ModelElements] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElements_ProjectConfigId];

ALTER TABLE [Analyst].[ModelElements] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElements_ModelElementTypeId];

ALTER TABLE [Analyst].[ModelElements] WITH CHECK CHECK CONSTRAINT [FK_Analyst_ModelElements_ObjectId];

ALTER TABLE [BIDoc].[GraphDocuments] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_GraphDocuments_BIDoc_BasicGraphInfoNodes_GraphNode_Id];

ALTER TABLE [BIDoc].[BasicGraphLinks] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_BasciGraphLinks_NodeFromId];

ALTER TABLE [BIDoc].[BasicGraphLinks] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_BasciGraphLinks_NodeToId];

ALTER TABLE [BIDoc].[BasicGraphNodes] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_BasciGraphNodes_SourceElement];

ALTER TABLE [BIDoc].[BasicGraphNodes] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_BasciGraphNodes_ProjectConfig];

ALTER TABLE [BIDoc].[ModelElements] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_ModelElements_ProjectConfigId];

ALTER TABLE [BIDoc].[DataMessages] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_DataMessages_SourceId];

ALTER TABLE [BIDoc].[DataMessages] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_DataMessages_TargetId];

ALTER TABLE [BIDoc].[DataMessages] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_DataMessages_DataMessagesTypeId];

ALTER TABLE [BIDoc].[SourceDataTypes] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_SourceDataTypes_DataTypeId];

ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH CHECK CHECK CONSTRAINT [FK_HigherLevelElementAncestors_SourceElement];

ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH CHECK CHECK CONSTRAINT [FK_HigherLevelElementAncestors_AncestorElement];

ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH CHECK CHECK CONSTRAINT [FK_HigherLevelElementAncestors_SourceNode];

ALTER TABLE [BIDoc].[HigherLevelElementAncestors] WITH CHECK CHECK CONSTRAINT [FK_HigherLevelElementAncestors_AncestorNode];

ALTER TABLE [BIDoc].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_ModelLinks_ElementFromId];

ALTER TABLE [BIDoc].[ModelLinks] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_ModelLinks_ElementToId];

ALTER TABLE [BIDoc].[LineageGridHistory] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_LineageGridHistory_ProjectConfigId];

ALTER TABLE [BIDoc].[LineageGridHistory] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_LineageGridHistory_UserId];

ALTER TABLE [BIDoc].[LineageGridHistory] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_LineageGridHistory_SourceElementId];

ALTER TABLE [BIDoc].[LineageGridHistory] WITH CHECK CHECK CONSTRAINT [FK_BIDoc_LineageGridHistory_TargetElementId];

ALTER TABLE [Inspect].[HighLevelSolutionTrees] WITH CHECK CHECK CONSTRAINT [FK_Inspect_HighLevelSolutionTrees_ProjectConfigId];

ALTER TABLE [Search].[FulltextSearch] WITH CHECK CHECK CONSTRAINT [FK_FullTextSearch_ModelElements];

ALTER TABLE [Stg].[ExtractItems] WITH CHECK CHECK CONSTRAINT [FK_ExtractItems_Extract];

ALTER TABLE [Stg].[Extracts] WITH CHECK CHECK CONSTRAINT [FK_Extracts_ProjectConfig];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'Annotate.AnnotationElements'), OBJECT_ID(N'Annotate.FieldValues'), OBJECT_ID(N'Annotate.AnnotationViewFields'), OBJECT_ID(N'Annotate.AnnotationViews'), OBJECT_ID(N'Annotate.Fields'), OBJECT_ID(N'Annotate.ElementLinks'), OBJECT_ID(N'Annotate.LinkTypes'), OBJECT_ID(N'Learning.OlapRuleConclusions'), OBJECT_ID(N'Learning.OlapRulePremises'), OBJECT_ID(N'Learning.OlapQueryFields'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
